.class public Lcom/android/server/wm/WindowManagerService;
.super Landroid/view/IWindowManager$Stub;
.source "WindowManagerService.java"

# interfaces
.implements Lcom/android/server/Watchdog$Monitor;
.implements Landroid/view/WindowManagerPolicy$WindowManagerFuncs;


# annotations
.annotation system Ldalvik/annotation/MemberClasses;
    value = {
        Lcom/android/server/wm/WindowManagerService$FlymeInjector;,
        Lcom/android/server/wm/WindowManagerService$1;,
        Lcom/android/server/wm/WindowManagerService$2;,
        Lcom/android/server/wm/WindowManagerService$DragInputEventReceiver;,
        Lcom/android/server/wm/WindowManagerService$H;,
        Lcom/android/server/wm/WindowManagerService$HideNavInputConsumer;,
        Lcom/android/server/wm/WindowManagerService$LocalService;,
        Lcom/android/server/wm/WindowManagerService$MousePositionTracker;,
        Lcom/android/server/wm/WindowManagerService$RotationWatcher;,
        Lcom/android/server/wm/WindowManagerService$SettingsObserver;,
        Lcom/android/server/wm/WindowManagerService$UpdateAnimationScaleMode;,
        Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    }
.end annotation


# static fields
.field private static final ALWAYS_KEEP_CURRENT:Z = true

.field private static final ANIMATION_DURATION_SCALE:I = 0x2

.field private static final BOOT_ANIMATION_POLL_INTERVAL:I = 0xc8

.field private static final BOOT_ANIMATION_SERVICE:Ljava/lang/String; = "bootanim"

.field static final CUSTOM_SCREEN_ROTATION:Z = true

.field static final DEFAULT_INPUT_DISPATCHING_TIMEOUT_NANOS:J = 0x12a05f200L

.field private static final DENSITY_OVERRIDE:Ljava/lang/String; = "ro.config.density_override"

.field private static final DRAG_SHADOW_ALPHA_TRANSPARENT:F = 0.7071f

.field private static final INPUT_DEVICES_READY_FOR_SAFE_MODE_DETECTION_TIMEOUT_MILLIS:I = 0x3e8

.field static final LAST_ANR_LIFETIME_DURATION_MSECS:I = 0x6ddd00

.field static final LAYER_OFFSET_DIM:I = 0x1

.field static final LAYER_OFFSET_THUMBNAIL:I = 0x4

.field static final LAYOUT_REPEAT_THRESHOLD:I = 0x4

.field static final MAX_ANIMATION_DURATION:I = 0x2710

.field private static final MAX_SCREENSHOT_RETRIES:I = 0x3

.field static final PROFILE_ORIENTATION:Z = false

.field private static final PROPERTY_BUILD_DATE_UTC:Ljava/lang/String; = "ro.build.date.utc"

.field private static final PROPERTY_EMULATOR_CIRCULAR:Ljava/lang/String; = "ro.emulator.circular"

.field static final SEAMLESS_ROTATION_TIMEOUT_DURATION:I = 0x7d0

.field private static final SIZE_OVERRIDE:Ljava/lang/String; = "ro.config.size_override"

.field private static final SYSTEM_DEBUGGABLE:Ljava/lang/String; = "ro.debuggable"

.field private static final SYSTEM_SECURE:Ljava/lang/String; = "ro.secure"

.field private static final TAG:Ljava/lang/String;

.field private static final TRANSITION_ANIMATION_SCALE:I = 0x1

.field static final TYPE_LAYER_MULTIPLIER:I = 0x2710

.field static final TYPE_LAYER_OFFSET:I = 0x3e8

.field static final UPDATE_FOCUS_NORMAL:I = 0x0

.field static final UPDATE_FOCUS_PLACING_SURFACES:I = 0x2

.field static final UPDATE_FOCUS_WILL_ASSIGN_LAYERS:I = 0x1

.field static final UPDATE_FOCUS_WILL_PLACE_SURFACES:I = 0x3

.field static final WINDOWS_FREEZING_SCREENS_ACTIVE:I = 0x1

.field static final WINDOWS_FREEZING_SCREENS_NONE:I = 0x0

.field static final WINDOWS_FREEZING_SCREENS_TIMEOUT:I = 0x2

.field private static final WINDOW_ANIMATION_SCALE:I = 0x0

.field static final WINDOW_FREEZE_TIMEOUT_DURATION:I = 0x7d0

.field static final WINDOW_LAYER_MULTIPLIER:I = 0x5

.field static final WINDOW_REPLACEMENT_TIMEOUT_DURATION:I = 0x7d0

.field static final localLOGV:Z

.field private static mSingleHandSwitch:I


# instance fields
.field mFlymeDisableScreenRotation:Z

.field mMoveWindowService:Lcom/android/server/wm/MoveWindowService;

.field mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

.field final mActivityManager:Landroid/app/IActivityManager;

.field private final mActivityManagerAppTransitionNotifier:Landroid/view/WindowManagerInternal$AppTransitionListener;

.field final mAllowAnimationsInLowPowerMode:Z

.field final mAllowBootMessages:Z

.field mAllowTheaterModeWakeFromLayout:Z

.field mAltOrientation:Z

.field final mAmInternal:Landroid/app/ActivityManagerInternal;

.field mAnimateWallpaperWithTarget:Z

.field mAnimationScheduled:Z

.field mAnimationsDisabled:Z

.field final mAnimator:Lcom/android/server/wm/WindowAnimator;

.field mAnimatorDurationScaleSetting:F

.field final mAppOps:Landroid/app/AppOpsManager;

.field final mAppTransition:Lcom/android/server/wm/AppTransition;

.field mAppsFreezingScreen:I

.field mBootAnimationStopped:Z

.field private final mBoundsAnimationController:Lcom/android/server/wm/BoundsAnimationController;

.field final mBroadcastReceiver:Landroid/content/BroadcastReceiver;

.field private final mChangedStackList:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Ljava/lang/Integer;",
            ">;"
        }
    .end annotation
.end field

.field final mChoreographer:Landroid/view/Choreographer;

.field mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

.field mClientFreezingScreen:Z

.field final mClosingApps:Landroid/util/ArraySet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/ArraySet",
            "<",
            "Lcom/android/server/wm/AppWindowToken;",
            ">;"
        }
    .end annotation
.end field

.field final mCompatDisplayMetrics:Landroid/util/DisplayMetrics;

.field mCompatibleScreenScale:F

.field final mContext:Landroid/content/Context;

.field mCurConfiguration:Landroid/content/res/Configuration;

.field mCurrentFocus:Lcom/android/server/wm/WindowState;

.field mCurrentProfileIds:[I

.field mCurrentUserId:I

.field mDeferredRotationPauseCount:I

.field final mDestroyPreservedSurface:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field final mDestroySurface:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mDisplayContents:Landroid/util/SparseArray;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/SparseArray",
            "<",
            "Lcom/android/server/wm/DisplayContent;",
            ">;"
        }
    .end annotation
.end field

.field mDisplayEnabled:Z

.field mDisplayFreezeTime:J

.field mDisplayFrozen:Z

.field final mDisplayManager:Landroid/hardware/display/DisplayManager;

.field final mDisplayManagerInternal:Landroid/hardware/display/DisplayManagerInternal;

.field final mDisplayMetrics:Landroid/util/DisplayMetrics;

.field mDisplayReady:Z

.field final mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

.field final mDisplays:[Landroid/view/Display;

.field mDockedStackCreateBounds:Landroid/graphics/Rect;

.field mDockedStackCreateMode:I

.field mDragState:Lcom/android/server/wm/DragState;

.field final mDrawLockTimeoutMillis:J

.field mEmulatorDisplayOverlay:Lcom/android/server/wm/EmulatorDisplayOverlay;

.field mEnterAnimId:I

.field private mEventDispatchingEnabled:Z

.field mExitAnimId:I

.field final mFinishedEarlyAnim:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/AppWindowToken;",
            ">;"
        }
    .end annotation
.end field

.field final mFinishedStarting:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/AppWindowToken;",
            ">;"
        }
    .end annotation
.end field

.field mFocusMayChange:Z

.field mFocusedApp:Lcom/android/server/wm/AppWindowToken;

.field mForceDisplayEnabled:Z

.field final mForceRemoves:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mForceResizableTasks:Z

.field final mFxSession:Landroid/view/SurfaceSession;

.field final mH:Lcom/android/server/wm/WindowManagerService$H;

.field mHardKeyboardAvailable:Z

.field mHardKeyboardStatusChangeListener:Landroid/view/WindowManagerInternal$OnHardKeyboardStatusChangeListener;

.field final mHasPermanentDpad:Z

.field final mHaveInputMethods:Z

.field private mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mHoldingScreenOn:Lcom/android/server/wm/Session;

.field mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

.field mInTouchMode:Z

.field mInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

.field final mInputManager:Lcom/android/server/input/InputManagerService;

.field final mInputMethodDialogs:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mInputMethodManager:Lcom/android/internal/view/IInputMethodManager;

.field mInputMethodTarget:Lcom/android/server/wm/WindowState;

.field mInputMethodTargetWaitingAnim:Z

.field mInputMethodWindow:Lcom/android/server/wm/WindowState;

.field final mInputMonitor:Lcom/android/server/wm/InputMonitor;

.field mIsTouchDevice:Z

.field private final mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

.field private mKeyguardWaitingForActivityDrawn:Z

.field mLastANRState:Ljava/lang/String;

.field mLastDispatchedSystemUiVisibility:I

.field mLastDisplayFreezeDuration:I

.field mLastFinishedFreezeSource:Ljava/lang/Object;

.field mLastFocus:Lcom/android/server/wm/WindowState;

.field mLastKeyguardForcedOrientation:I

.field mLastOrientation:I

.field mLastStatusBarVisibility:I

.field mLastWakeLockHoldingWindow:Lcom/android/server/wm/WindowState;

.field mLastWakeLockObscuringWindow:Lcom/android/server/wm/WindowState;

.field mLastWindowForcedOrientation:I

.field final mLayersController:Lcom/android/server/wm/WindowLayersController;

.field mLayoutSeq:I

.field final mLimitedAlphaCompositing:Z

.field mLosingFocus:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field private mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

.field final mNoAnimationNotifyOnTransitionFinished:Ljava/util/List;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/List",
            "<",
            "Landroid/os/IBinder;",
            ">;"
        }
    .end annotation
.end field

.field final mOnlyCore:Z

.field final mOpeningApps:Landroid/util/ArraySet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/ArraySet",
            "<",
            "Lcom/android/server/wm/AppWindowToken;",
            ">;"
        }
    .end annotation
.end field

.field final mPendingRemove:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mPendingRemoveTmp:[Lcom/android/server/wm/WindowState;

.field private final mPointerEventDispatcher:Lcom/android/server/wm/PointerEventDispatcher;

.field final mPolicy:Landroid/view/WindowManagerPolicy;

.field mPowerManager:Landroid/os/PowerManager;

.field mPowerManagerInternal:Landroid/os/PowerManagerInternal;

.field final mRealDisplayMetrics:Landroid/util/DisplayMetrics;

.field mRebuildTmp:[Lcom/android/server/wm/WindowState;

.field private final mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

.field final mReplacingWindowTimeouts:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/AppWindowToken;",
            ">;"
        }
    .end annotation
.end field

.field final mResizingWindows:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mRotation:I

.field mRotationWatchers:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowManagerService$RotationWatcher;",
            ">;"
        }
    .end annotation
.end field

.field mSafeMode:Z

.field mScreenCaptureDisabled:Landroid/util/SparseArray;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/SparseArray",
            "<",
            "Ljava/lang/Boolean;",
            ">;"
        }
    .end annotation
.end field

.field private final mScreenFrozenLock:Landroid/os/PowerManager$WakeLock;

.field final mScreenRect:Landroid/graphics/Rect;

.field mSeamlessRotationCount:I

.field final mSessions:Landroid/util/ArraySet;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/ArraySet",
            "<",
            "Lcom/android/server/wm/Session;",
            ">;"
        }
    .end annotation
.end field

.field mSettingsObserver:Lcom/android/server/wm/WindowManagerService$SettingsObserver;

.field private final mSfHwRotation:I

.field mShowingBootMessages:Z

.field private mSingleHandAdapter:Lcom/android/server/wm/SingleHandAdapter;

.field public mSingleHandMode:I

.field mSkipAppTransitionAnimation:Z

.field mStackIdToStack:Landroid/util/SparseArray;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/SparseArray",
            "<",
            "Lcom/android/server/wm/TaskStack;",
            ">;"
        }
    .end annotation
.end field

.field mStrictModeFlash:Lcom/android/server/wm/StrictModeFlash;

.field mSystemBooted:Z

.field mSystemDecorLayer:I

.field mTaskIdToTask:Landroid/util/SparseArray;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Landroid/util/SparseArray",
            "<",
            "Lcom/android/server/wm/Task;",
            ">;"
        }
    .end annotation
.end field

.field mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

.field final mTempConfiguration:Landroid/content/res/Configuration;

.field private mTempWindowRenderStats:Landroid/view/WindowContentFrameStats;

.field final mTmpDisplayMetrics:Landroid/util/DisplayMetrics;

.field final mTmpFloats:[F

.field final mTmpRect:Landroid/graphics/Rect;

.field final mTmpRect2:Landroid/graphics/Rect;

.field final mTmpRect3:Landroid/graphics/Rect;

.field final mTmpRectF:Landroid/graphics/RectF;

.field private final mTmpTaskIds:Landroid/util/SparseIntArray;

.field final mTmpTransform:Landroid/graphics/Matrix;

.field final mTmpWindows:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field final mTokenMap:Ljava/util/HashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/HashMap",
            "<",
            "Landroid/os/IBinder;",
            "Lcom/android/server/wm/WindowToken;",
            ">;"
        }
    .end annotation
.end field

.field mTransactionSequence:I

.field mTransitionAnimationScaleSetting:F

.field mTurnOnScreen:Z

.field private final mUiHandler:Landroid/os/Handler;

.field private mViewServer:Lcom/android/server/wm/ViewServer;

.field mWaitingForConfig:Z

.field mWaitingForDrawn:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field mWaitingForDrawnCallback:Ljava/lang/Runnable;

.field mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

.field mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

.field mWatermark:Lcom/android/server/wm/Watermark;

.field mWindowAnimationScaleSetting:F

.field final mWindowChangeListeners:Ljava/util/ArrayList;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowManagerService$WindowChangeListener;",
            ">;"
        }
    .end annotation
.end field

.field final mWindowMap:Ljava/util/HashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/HashMap",
            "<",
            "Landroid/os/IBinder;",
            "Lcom/android/server/wm/WindowState;",
            ">;"
        }
    .end annotation
.end field

.field final mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

.field mWindowsChanged:Z

.field mWindowsFreezingScreen:I


# direct methods
.method static synthetic -get0(Lcom/android/server/wm/WindowManagerService;)Lcom/android/server/wm/BoundsAnimationController;
    .locals 1

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mBoundsAnimationController:Lcom/android/server/wm/BoundsAnimationController;

    return-object v0
.end method

.method static synthetic -get1(Lcom/android/server/wm/WindowManagerService;)Lcom/android/server/wm/KeyguardDisableHandler;
    .locals 1

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    return-object v0
.end method

.method static synthetic -wrap0(Lcom/android/server/wm/WindowManagerService;)Z
    .locals 1

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->checkBootAnimationCompleteLocked()Z

    move-result v0

    return v0
.end method

.method static synthetic -wrap1(Lcom/android/server/wm/WindowManagerService;)Lcom/android/server/wm/WindowState;
    .locals 1

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindowLocked()Lcom/android/server/wm/WindowState;

    move-result-object v0

    return-object v0
.end method

.method static synthetic -wrap10(Lcom/android/server/wm/WindowManagerService;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->updateCircularDisplayMaskIfNeeded()V

    return-void
.end method

.method static synthetic -wrap2(Lcom/android/server/wm/WindowManagerService;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->finishPositioning()V

    return-void
.end method

.method static synthetic -wrap3(Lcom/android/server/wm/WindowManagerService;I)V
    .locals 0
    .param p1, "displayId"    # I

    .prologue
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->handleDisplayChangedLocked(I)V

    return-void
.end method

.method static synthetic -wrap4(Lcom/android/server/wm/WindowManagerService;I)V
    .locals 0
    .param p1, "displayId"    # I

    .prologue
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->handleDisplayRemovedLocked(I)V

    return-void
.end method

.method static synthetic -wrap5(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;II)V
    .locals 0
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "x"    # I
    .param p3, "y"    # I

    .prologue
    invoke-direct {p0, p1, p2, p3}, Lcom/android/server/wm/WindowManagerService;->handleTapOutsideTask(Lcom/android/server/wm/DisplayContent;II)V

    return-void
.end method

.method static synthetic -wrap6(Lcom/android/server/wm/WindowManagerService;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->notifyFocusChanged()V

    return-void
.end method

.method static synthetic -wrap7(Lcom/android/server/wm/WindowManagerService;)V
    .locals 0

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->notifyWindowsChanged()V

    return-void
.end method

.method static synthetic -wrap8(Lcom/android/server/wm/WindowManagerService;II)V
    .locals 0
    .param p1, "arg"    # I
    .param p2, "pid"    # I

    .prologue
    invoke-direct {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->showStrictModeViolation(II)V

    return-void
.end method

.method static synthetic -wrap9(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;II)V
    .locals 0
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "startX"    # I
    .param p3, "startY"    # I

    .prologue
    invoke-direct {p0, p1, p2, p3}, Lcom/android/server/wm/WindowManagerService;->startScrollingTask(Lcom/android/server/wm/DisplayContent;II)V

    return-void
.end method

.method static constructor <clinit>()V
    .locals 1

    .prologue
    .line 262
    const-string/jumbo v0, "WindowManager"

    sput-object v0, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    .line 260
    return-void
.end method

.method protected constructor <init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZZ)V
    .locals 6
    .param p1, "context"    # Landroid/content/Context;
    .param p2, "inputManager"    # Lcom/android/server/input/InputManagerService;
    .param p3, "haveInputMethods"    # Z
    .param p4, "showBootMsgs"    # Z
    .param p5, "onlyCore"    # Z

    .prologue
    .line 962
    invoke-direct {p0}, Landroid/view/IWindowManager$Stub;-><init>()V

    .line 365
    new-instance v3, Lcom/android/server/wm/WindowManagerService$1;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowManagerService$1;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mBroadcastReceiver:Landroid/content/BroadcastReceiver;

    .line 386
    const/4 v3, 0x0

    new-array v3, v3, [I

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentProfileIds:[I

    .line 400
    new-instance v3, Lcom/android/server/policy/PhoneWindowManager;

    invoke-direct {v3}, Lcom/android/server/policy/PhoneWindowManager;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 412
    new-instance v3, Landroid/util/ArraySet;

    invoke-direct {v3}, Landroid/util/ArraySet;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mSessions:Landroid/util/ArraySet;

    .line 419
    new-instance v3, Ljava/util/HashMap;

    invoke-direct {v3}, Ljava/util/HashMap;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    .line 424
    new-instance v3, Ljava/util/HashMap;

    invoke-direct {v3}, Ljava/util/HashMap;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    .line 430
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedStarting:Ljava/util/ArrayList;

    .line 437
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedEarlyAnim:Ljava/util/ArrayList;

    .line 443
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mReplacingWindowTimeouts:Ljava/util/ArrayList;

    .line 461
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    .line 466
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemove:Ljava/util/ArrayList;

    .line 471
    const/16 v3, 0x14

    new-array v3, v3, [Lcom/android/server/wm/WindowState;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemoveTmp:[Lcom/android/server/wm/WindowState;

    .line 476
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDestroySurface:Ljava/util/ArrayList;

    .line 483
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDestroyPreservedSurface:Ljava/util/ArrayList;

    .line 489
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLosingFocus:Ljava/util/ArrayList;

    .line 495
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    .line 498
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    .line 503
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    .line 513
    const/16 v3, 0x14

    new-array v3, v3, [Lcom/android/server/wm/WindowState;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    .line 520
    new-instance v3, Landroid/util/SparseArray;

    invoke-direct {v3}, Landroid/util/SparseArray;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mScreenCaptureDisabled:Landroid/util/SparseArray;

    .line 532
    const/16 v3, 0x9

    new-array v3, v3, [F

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpFloats:[F

    .line 533
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    .line 534
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect2:Landroid/graphics/Rect;

    .line 535
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect3:Landroid/graphics/Rect;

    .line 536
    new-instance v3, Landroid/graphics/RectF;

    invoke-direct {v3}, Landroid/graphics/RectF;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRectF:Landroid/graphics/RectF;

    .line 538
    new-instance v3, Landroid/graphics/Matrix;

    invoke-direct {v3}, Landroid/graphics/Matrix;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpTransform:Landroid/graphics/Matrix;

    .line 542
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    .line 543
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    .line 544
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mForceDisplayEnabled:Z

    .line 545
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    .line 546
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mBootAnimationStopped:Z

    .line 549
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockHoldingWindow:Lcom/android/server/wm/WindowState;

    .line 550
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockObscuringWindow:Lcom/android/server/wm/WindowState;

    .line 557
    new-instance v3, Landroid/util/SparseArray;

    const/4 v4, 0x2

    invoke-direct {v3, v4}, Landroid/util/SparseArray;-><init>(I)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    .line 559
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    .line 560
    const/4 v3, -0x1

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    .line 561
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    .line 565
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mDockedStackCreateMode:I

    .line 568
    new-instance v3, Landroid/util/SparseIntArray;

    invoke-direct {v3}, Landroid/util/SparseIntArray;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpTaskIds:Landroid/util/SparseIntArray;

    .line 570
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mChangedStackList:Ljava/util/ArrayList;

    .line 572
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mForceResizableTasks:Z

    .line 587
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    .line 590
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mSystemDecorLayer:I

    .line 591
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mScreenRect:Landroid/graphics/Rect;

    .line 593
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    .line 594
    const-wide/16 v4, 0x0

    iput-wide v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFreezeTime:J

    .line 595
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastDisplayFreezeDuration:I

    .line 596
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    .line 597
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    .line 602
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    .line 604
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    .line 605
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    .line 606
    const/4 v3, -0x1

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    .line 607
    const/4 v3, -0x1

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastKeyguardForcedOrientation:I

    .line 609
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLayoutSeq:I

    .line 612
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    .line 614
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastDispatchedSystemUiVisibility:I

    .line 619
    new-instance v3, Landroid/content/res/Configuration;

    invoke-direct {v3}, Landroid/content/res/Configuration;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    .line 627
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mSkipAppTransitionAnimation:Z

    .line 629
    new-instance v3, Landroid/util/ArraySet;

    invoke-direct {v3}, Landroid/util/ArraySet;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    .line 630
    new-instance v3, Landroid/util/ArraySet;

    invoke-direct {v3}, Landroid/util/ArraySet;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    .line 634
    new-instance v3, Landroid/util/DisplayMetrics;

    invoke-direct {v3}, Landroid/util/DisplayMetrics;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 635
    new-instance v3, Landroid/util/DisplayMetrics;

    invoke-direct {v3}, Landroid/util/DisplayMetrics;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mRealDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 636
    new-instance v3, Landroid/util/DisplayMetrics;

    invoke-direct {v3}, Landroid/util/DisplayMetrics;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 637
    new-instance v3, Landroid/util/DisplayMetrics;

    invoke-direct {v3}, Landroid/util/DisplayMetrics;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCompatDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 639
    new-instance v3, Lcom/android/server/wm/WindowManagerService$H;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowManagerService$H;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    .line 641
    invoke-static {}, Landroid/view/Choreographer;->getInstance()Landroid/view/Choreographer;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mChoreographer:Landroid/view/Choreographer;

    .line 643
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    .line 644
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastFocus:Lcom/android/server/wm/WindowState;

    .line 648
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 653
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 654
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    .line 658
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpWindows:Ljava/util/ArrayList;

    .line 668
    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    .line 726
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    .line 731
    const/high16 v3, 0x3f800000    # 1.0f

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    .line 732
    const/high16 v3, 0x3f800000    # 1.0f

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    .line 733
    const/high16 v3, 0x3f800000    # 1.0f

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    .line 734
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z

    .line 751
    const/4 v3, 0x0

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    .line 766
    new-instance v3, Landroid/util/SparseArray;

    invoke-direct {v3}, Landroid/util/SparseArray;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    .line 770
    new-instance v3, Landroid/util/SparseArray;

    invoke-direct {v3}, Landroid/util/SparseArray;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    .line 872
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    .line 873
    const/4 v3, 0x0

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 880
    new-instance v3, Landroid/content/res/Configuration;

    invoke-direct {v3}, Landroid/content/res/Configuration;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    .line 892
    new-instance v3, Ljava/util/ArrayList;

    invoke-direct {v3}, Ljava/util/ArrayList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mNoAnimationNotifyOnTransitionFinished:Ljava/util/List;

    .line 899
    new-instance v3, Lcom/android/server/wm/DisplayContentList;

    invoke-direct {v3}, Lcom/android/server/wm/DisplayContentList;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    .line 903
    new-instance v3, Lcom/android/server/wm/WindowManagerService$2;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowManagerService$2;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    .line 902
    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManagerAppTransitionNotifier:Landroid/view/WindowManagerInternal$AppTransitionListener;

    .line 8062
    new-instance v3, Lcom/android/server/wm/InputMonitor;

    invoke-direct {v3, p0}, Lcom/android/server/wm/InputMonitor;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    .line 11485
    new-instance v3, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    const/4 v4, 0x0

    invoke-direct {v3, v4}, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;-><init>(Lcom/android/server/wm/WindowManagerService$MousePositionTracker;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    const/4 v3, 0x0

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandMode:I

    iput-object p1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    iput-boolean p3, p0, Lcom/android/server/wm/WindowManagerService;->mHaveInputMethods:Z

    iput-boolean p4, p0, Lcom/android/server/wm/WindowManagerService;->mAllowBootMessages:Z

    iput-boolean p5, p0, Lcom/android/server/wm/WindowManagerService;->mOnlyCore:Z

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:bool@config_sf_limitedAlpha#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mLimitedAlphaCompositing:Z

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:bool@config_hasPermanentDpad#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mHasPermanentDpad:Z

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:bool@config_defaultInTouchMode#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mInTouchMode:Z

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:integer@config_drawLockTimeoutMillis#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getInteger(I)I

    move-result v3

    int-to-long v4, v3

    iput-wide v4, p0, Lcom/android/server/wm/WindowManagerService;->mDrawLockTimeoutMillis:J

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:bool@config_allowAnimationsInLowPowerMode#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mAllowAnimationsInLowPowerMode:Z

    iput-object p2, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const-class v3, Landroid/hardware/display/DisplayManagerInternal;

    invoke-static {v3}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/hardware/display/DisplayManagerInternal;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManagerInternal:Landroid/hardware/display/DisplayManagerInternal;

    .line 980
    new-instance v3, Lcom/android/server/wm/DisplaySettings;

    invoke-direct {v3}, Lcom/android/server/wm/DisplaySettings;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

    .line 981
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

    invoke-virtual {v3}, Lcom/android/server/wm/DisplaySettings;->readSettingsLocked()V

    .line 983
    new-instance v3, Lcom/android/server/wm/WallpaperController;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WallpaperController;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    .line 984
    new-instance v3, Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowSurfacePlacer;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    .line 985
    new-instance v3, Lcom/android/server/wm/WindowLayersController;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowLayersController;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    .line 987
    const-class v3, Landroid/view/WindowManagerPolicy;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-static {v3, v4}, Lcom/android/server/LocalServices;->addService(Ljava/lang/Class;Ljava/lang/Object;)V

    .line 989
    new-instance v3, Lcom/android/server/wm/PointerEventDispatcher;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const-string/jumbo v5, "WindowManager"

    invoke-virtual {v4, v5}, Lcom/android/server/input/InputManagerService;->monitorInput(Ljava/lang/String;)Landroid/view/InputChannel;

    move-result-object v4

    invoke-direct {v3, v4}, Lcom/android/server/wm/PointerEventDispatcher;-><init>(Landroid/view/InputChannel;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPointerEventDispatcher:Lcom/android/server/wm/PointerEventDispatcher;

    .line 991
    new-instance v3, Landroid/view/SurfaceSession;

    invoke-direct {v3}, Landroid/view/SurfaceSession;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 992
    const-string/jumbo v3, "display"

    invoke-virtual {p1, v3}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/hardware/display/DisplayManager;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManager:Landroid/hardware/display/DisplayManager;

    .line 993
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManager:Landroid/hardware/display/DisplayManager;

    invoke-virtual {v3}, Landroid/hardware/display/DisplayManager;->getDisplays()[Landroid/view/Display;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplays:[Landroid/view/Display;

    .line 994
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplays:[Landroid/view/Display;

    const/4 v3, 0x0

    array-length v5, v4

    :goto_0
    if-ge v3, v5, :cond_0

    aget-object v0, v4, v3

    .line 995
    .local v0, "display":Landroid/view/Display;
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->createDisplayContentLocked(Landroid/view/Display;)V

    .line 994
    add-int/lit8 v3, v3, 0x1

    goto :goto_0

    .line 998
    .end local v0    # "display":Landroid/view/Display;
    :cond_0
    new-instance v3, Lcom/android/server/wm/KeyguardDisableHandler;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-direct {v3, v4, v5}, Lcom/android/server/wm/KeyguardDisableHandler;-><init>(Landroid/content/Context;Landroid/view/WindowManagerPolicy;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    .line 1000
    const-string/jumbo v3, "power"

    invoke-virtual {p1, v3}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/os/PowerManager;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManager:Landroid/os/PowerManager;

    .line 1001
    const-class v3, Landroid/os/PowerManagerInternal;

    invoke-static {v3}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/os/PowerManagerInternal;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    .line 1002
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    .line 1003
    new-instance v4, Lcom/android/server/wm/WindowManagerService$5;

    invoke-direct {v4, p0}, Lcom/android/server/wm/WindowManagerService$5;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    .line 1002
    invoke-virtual {v3, v4}, Landroid/os/PowerManagerInternal;->registerLowPowerModeObserver(Landroid/os/PowerManagerInternal$LowPowerModeListener;)V

    .line 1014
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManagerInternal:Landroid/os/PowerManagerInternal;

    invoke-virtual {v3}, Landroid/os/PowerManagerInternal;->getLowPowerModeEnabled()Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z

    .line 1015
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManager:Landroid/os/PowerManager;

    .line 1016
    const-string/jumbo v4, "SCREEN_FROZEN"

    const/4 v5, 0x1

    .line 1015
    invoke-virtual {v3, v5, v4}, Landroid/os/PowerManager;->newWakeLock(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mScreenFrozenLock:Landroid/os/PowerManager$WakeLock;

    .line 1017
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mScreenFrozenLock:Landroid/os/PowerManager$WakeLock;

    const/4 v4, 0x0

    invoke-virtual {v3, v4}, Landroid/os/PowerManager$WakeLock;->setReferenceCounted(Z)V

    .line 1019
    new-instance v3, Lcom/android/server/wm/AppTransition;

    invoke-direct {v3, p1, p0}, Lcom/android/server/wm/AppTransition;-><init>(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    .line 1020
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManagerAppTransitionNotifier:Landroid/view/WindowManagerInternal$AppTransitionListener;

    invoke-virtual {v3, v4}, Lcom/android/server/wm/AppTransition;->registerListenerLocked(Landroid/view/WindowManagerInternal$AppTransitionListener;)V

    .line 1023
    new-instance v3, Lcom/android/server/wm/BoundsAnimationController;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-static {}, Lcom/android/server/UiThread;->getHandler()Landroid/os/Handler;

    move-result-object v5

    invoke-direct {v3, v4, v5}, Lcom/android/server/wm/BoundsAnimationController;-><init>(Lcom/android/server/wm/AppTransition;Landroid/os/Handler;)V

    .line 1022
    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mBoundsAnimationController:Lcom/android/server/wm/BoundsAnimationController;

    .line 1025
    invoke-static {}, Landroid/app/ActivityManagerNative;->getDefault()Landroid/app/IActivityManager;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    .line 1026
    const-class v3, Landroid/app/ActivityManagerInternal;

    invoke-static {v3}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/app/ActivityManagerInternal;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAmInternal:Landroid/app/ActivityManagerInternal;

    .line 1027
    const-string/jumbo v3, "appops"

    invoke-virtual {p1, v3}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Landroid/app/AppOpsManager;

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    .line 1029
    new-instance v2, Lcom/android/server/wm/WindowManagerService$6;

    invoke-direct {v2, p0}, Lcom/android/server/wm/WindowManagerService$6;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    .line 1034
    .local v2, "opListener":Landroid/app/AppOpsManager$OnOpChangedInternalListener;
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    const/16 v4, 0x18

    const/4 v5, 0x0

    invoke-virtual {v3, v4, v5, v2}, Landroid/app/AppOpsManager;->startWatchingMode(ILjava/lang/String;Landroid/app/AppOpsManager$OnOpChangedListener;)V

    .line 1035
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    const/16 v4, 0x2d

    const/4 v5, 0x0

    invoke-virtual {v3, v4, v5, v2}, Landroid/app/AppOpsManager;->startWatchingMode(ILjava/lang/String;Landroid/app/AppOpsManager$OnOpChangedListener;)V

    invoke-virtual {p1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "window_animation_scale"

    iget v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    invoke-static {v3, v4, v5}, Landroid/provider/Settings$Global;->getFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)F

    move-result v3

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    invoke-virtual {p1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "transition_animation_scale"

    iget v5, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    invoke-static {v3, v4, v5}, Landroid/provider/Settings$Global;->getFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)F

    move-result v3

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    invoke-virtual {p1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v3

    const-string v4, "animator_duration_scale"

    iget v5, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    invoke-static {v3, v4, v5}, Landroid/provider/Settings$Global;->getFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)F

    move-result v3

    invoke-direct {p0, v3}, Lcom/android/server/wm/WindowManagerService;->setAnimatorDurationScale(F)V

    new-instance v1, Landroid/content/IntentFilter;

    invoke-direct {v1}, Landroid/content/IntentFilter;-><init>()V

    .local v1, "filter":Landroid/content/IntentFilter;
    const-string v3, "android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED"

    invoke-virtual {v1, v3}, Landroid/content/IntentFilter;->addAction(Ljava/lang/String;)V

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mBroadcastReceiver:Landroid/content/BroadcastReceiver;

    invoke-virtual {v3, v4, v1}, Landroid/content/Context;->registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;

    new-instance v3, Lcom/android/server/wm/WindowManagerService$SettingsObserver;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowManagerService$SettingsObserver;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mSettingsObserver:Lcom/android/server/wm/WindowManagerService$SettingsObserver;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPowerManager:Landroid/os/PowerManager;

    const-string v4, "WindowManager"

    const v5, 0x2000000a

    invoke-virtual {v3, v5, v4}, Landroid/os/PowerManager;->newWakeLock(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    const/4 v4, 0x0

    invoke-virtual {v3, v4}, Landroid/os/PowerManager$WakeLock;->setReferenceCounted(Z)V

    new-instance v3, Lcom/android/server/wm/WindowAnimator;

    invoke-direct {v3, p0}, Lcom/android/server/wm/WindowAnimator;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {p1}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v3

    const v4, #android:bool@config_allowTheaterModeWakeFromWindowLayout#t

    invoke-virtual {v3, v4}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mAllowTheaterModeWakeFromLayout:Z

    const-class v3, Landroid/view/WindowManagerInternal;

    new-instance v4, Lcom/android/server/wm/WindowManagerService$LocalService;

    const/4 v5, 0x0

    invoke-direct {v4, p0, v5}, Lcom/android/server/wm/WindowManagerService$LocalService;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/WindowManagerService$LocalService;)V

    invoke-static {v3, v4}, Lcom/android/server/LocalServices;->addService(Ljava/lang/Class;Ljava/lang/Object;)V

    .line 1063
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->initPolicy()V

    .line 1066
    invoke-static {}, Lcom/android/server/Watchdog;->getInstance()Lcom/android/server/Watchdog;

    move-result-object v3

    invoke-virtual {v3, p0}, Lcom/android/server/Watchdog;->addMonitor(Lcom/android/server/Watchdog$Monitor;)V

    .line 1068
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V

    .line 1070
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->createWatermarkInTransaction()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 1072
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 1076
    const-string/jumbo v3, "ro.sf.hwrotation"

    const/4 v4, 0x0

    invoke-static {v3, v4}, Landroid/os/SystemProperties;->getInt(Ljava/lang/String;I)I

    move-result v3

    div-int/lit8 v3, v3, 0x5a

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mSfHwRotation:I

    .line 1078
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->showEmulatorDisplayOverlayIfNeeded()V

    .line 1079
    invoke-static {}, Lcom/android/server/UiThread;->getHandler()Landroid/os/Handler;

    move-result-object v3

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mUiHandler:Landroid/os/Handler;

    .line 963
    return-void

    .line 1071
    :catchall_0
    move-exception v3

    .line 1072
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 1071
    throw v3
.end method

.method synthetic constructor <init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZZLcom/android/server/wm/WindowManagerService;)V
    .locals 0
    .param p1, "context"    # Landroid/content/Context;
    .param p2, "inputManager"    # Lcom/android/server/input/InputManagerService;
    .param p3, "haveInputMethods"    # Z
    .param p4, "showBootMsgs"    # Z
    .param p5, "onlyCore"    # Z

    .prologue
    invoke-direct/range {p0 .. p5}, Lcom/android/server/wm/WindowManagerService;-><init>(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZZ)V

    return-void
.end method

.method private addAppWindowToListLocked(Lcom/android/server/wm/WindowState;)I
    .locals 27
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1178
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v10

    .line 1179
    .local v10, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v10, :cond_0

    .line 1181
    const/16 v25, 0x0

    return v25

    .line 1183
    :cond_0
    move-object/from16 v0, p1

    iget-object v9, v0, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    .line 1184
    .local v9, "client":Landroid/view/IWindow;
    move-object/from16 v0, p1

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    move-object/from16 v17, v0

    .line 1186
    .local v17, "token":Lcom/android/server/wm/WindowToken;
    invoke-virtual {v10}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v24

    .line 1187
    .local v24, "windows":Lcom/android/server/wm/WindowList;
    move-object/from16 v0, p0

    move-object/from16 v1, v17

    invoke-direct {v0, v1, v10}, Lcom/android/server/wm/WindowManagerService;->getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;

    move-result-object v19

    .line 1188
    .local v19, "tokenWindowList":Lcom/android/server/wm/WindowList;
    const/16 v20, 0x0

    .line 1189
    .local v20, "tokenWindowsPos":I
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->isEmpty()Z

    move-result v25

    if-nez v25, :cond_1

    .line 1190
    move-object/from16 v0, p0

    move-object/from16 v1, p1

    move-object/from16 v2, v17

    move-object/from16 v3, v24

    move-object/from16 v4, v19

    invoke-direct {v0, v1, v2, v3, v4}, Lcom/android/server/wm/WindowManagerService;->addAppWindowToTokenListLocked(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowList;Lcom/android/server/wm/WindowList;)I

    move-result v25

    return v25

    .line 1198
    :cond_1
    const/4 v13, 0x0

    .line 1200
    .local v13, "pos":Lcom/android/server/wm/WindowState;
    invoke-virtual {v10}, Lcom/android/server/wm/DisplayContent;->getTasks()Ljava/util/ArrayList;

    move-result-object v16

    .line 1202
    .local v16, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    const/16 v18, -0x1

    .line 1203
    .local v18, "tokenNdx":I
    invoke-virtual/range {v16 .. v16}, Ljava/util/ArrayList;->size()I

    move-result v25

    add-int/lit8 v15, v25, -0x1

    .end local v13    # "pos":Lcom/android/server/wm/WindowState;
    .local v15, "taskNdx":I
    :goto_0
    if-ltz v15, :cond_3

    .line 1204
    move-object/from16 v0, v16

    invoke-virtual {v0, v15}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v25

    check-cast v25, Lcom/android/server/wm/Task;

    move-object/from16 v0, v25

    iget-object v0, v0, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    move-object/from16 v21, v0

    .line 1205
    .local v21, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual/range {v21 .. v21}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v25

    add-int/lit8 v18, v25, -0x1

    :goto_1
    if-ltz v18, :cond_2

    .line 1206
    move-object/from16 v0, v21

    move/from16 v1, v18

    invoke-virtual {v0, v1}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v14

    check-cast v14, Lcom/android/server/wm/AppWindowToken;

    .line 1207
    .local v14, "t":Lcom/android/server/wm/AppWindowToken;
    move-object/from16 v0, v17

    if-ne v14, v0, :cond_5

    .line 1208
    add-int/lit8 v18, v18, -0x1

    .line 1209
    if-gez v18, :cond_2

    .line 1210
    add-int/lit8 v15, v15, -0x1

    .line 1211
    if-ltz v15, :cond_2

    .line 1212
    move-object/from16 v0, v16

    invoke-virtual {v0, v15}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v25

    check-cast v25, Lcom/android/server/wm/Task;

    move-object/from16 v0, v25

    iget-object v0, v0, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    move-object/from16 v25, v0

    invoke-virtual/range {v25 .. v25}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v25

    add-int/lit8 v18, v25, -0x1

    .line 1226
    .end local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    :cond_2
    if-ltz v18, :cond_7

    .line 1235
    .end local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_3
    if-eqz v13, :cond_9

    .line 1237
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    move-object/from16 v25, v0

    iget-object v0, v13, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    move-object/from16 v26, v0

    invoke-interface/range {v26 .. v26}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v26

    invoke-virtual/range {v25 .. v26}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowToken;

    .line 1238
    .local v7, "atoken":Lcom/android/server/wm/WindowToken;
    if-eqz v7, :cond_4

    .line 1240
    move-object/from16 v0, p0

    invoke-direct {v0, v7, v10}, Lcom/android/server/wm/WindowManagerService;->getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;

    move-result-object v19

    .line 1241
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    .line 1242
    .local v5, "NC":I
    if-lez v5, :cond_4

    .line 1243
    const/16 v25, 0x0

    move-object/from16 v0, v19

    move/from16 v1, v25

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/WindowState;

    .line 1244
    .local v8, "bottom":Lcom/android/server/wm/WindowState;
    iget v0, v8, Lcom/android/server/wm/WindowState;->mSubLayer:I

    move/from16 v25, v0

    if-gez v25, :cond_4

    .line 1245
    move-object v13, v8

    .line 1249
    .end local v5    # "NC":I
    .end local v8    # "bottom":Lcom/android/server/wm/WindowState;
    :cond_4
    move-object/from16 v0, p0

    move-object/from16 v1, p1

    invoke-direct {v0, v13, v1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1250
    return v20

    .line 1221
    .end local v7    # "atoken":Lcom/android/server/wm/WindowToken;
    .restart local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    .restart local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_5
    move-object/from16 v0, p0

    invoke-direct {v0, v14, v10}, Lcom/android/server/wm/WindowManagerService;->getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;

    move-result-object v19

    .line 1222
    iget-boolean v0, v14, Lcom/android/server/wm/AppWindowToken;->sendingToBottom:Z

    move/from16 v25, v0

    if-nez v25, :cond_6

    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v25

    if-lez v25, :cond_6

    .line 1223
    const/16 v25, 0x0

    move-object/from16 v0, v19

    move/from16 v1, v25

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v13

    check-cast v13, Lcom/android/server/wm/WindowState;

    .line 1205
    :cond_6
    add-int/lit8 v18, v18, -0x1

    goto/16 :goto_1

    .line 1203
    .end local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    :cond_7
    add-int/lit8 v15, v15, -0x1

    goto/16 :goto_0

    .line 1255
    :cond_8
    add-int/lit8 v15, v15, -0x1

    .end local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_9
    if-ltz v15, :cond_b

    .line 1256
    move-object/from16 v0, v16

    invoke-virtual {v0, v15}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v25

    check-cast v25, Lcom/android/server/wm/Task;

    move-object/from16 v0, v25

    iget-object v0, v0, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    move-object/from16 v21, v0

    .line 1257
    .restart local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :goto_2
    if-ltz v18, :cond_a

    .line 1258
    move-object/from16 v0, v21

    move/from16 v1, v18

    invoke-virtual {v0, v1}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v14

    check-cast v14, Lcom/android/server/wm/AppWindowToken;

    .line 1259
    .restart local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    move-object/from16 v0, p0

    invoke-direct {v0, v14, v10}, Lcom/android/server/wm/WindowManagerService;->getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;

    move-result-object v19

    .line 1260
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v6

    .line 1261
    .local v6, "NW":I
    if-lez v6, :cond_d

    .line 1262
    add-int/lit8 v25, v6, -0x1

    move-object/from16 v0, v19

    move/from16 v1, v25

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v13

    check-cast v13, Lcom/android/server/wm/WindowState;

    .line 1266
    .end local v6    # "NW":I
    .end local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    :cond_a
    if-ltz v18, :cond_8

    .line 1272
    .end local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_b
    if-eqz v13, :cond_e

    .line 1275
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    move-object/from16 v25, v0

    iget-object v0, v13, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    move-object/from16 v26, v0

    invoke-interface/range {v26 .. v26}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v26

    invoke-virtual/range {v25 .. v26}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowToken;

    .line 1276
    .restart local v7    # "atoken":Lcom/android/server/wm/WindowToken;
    if-eqz v7, :cond_c

    .line 1277
    iget-object v0, v7, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    move-object/from16 v25, v0

    invoke-virtual/range {v25 .. v25}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    .line 1278
    .restart local v5    # "NC":I
    if-lez v5, :cond_c

    .line 1279
    iget-object v0, v7, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    move-object/from16 v25, v0

    add-int/lit8 v26, v5, -0x1

    invoke-virtual/range {v25 .. v26}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v22

    check-cast v22, Lcom/android/server/wm/WindowState;

    .line 1280
    .local v22, "top":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v22

    iget v0, v0, Lcom/android/server/wm/WindowState;->mSubLayer:I

    move/from16 v25, v0

    if-ltz v25, :cond_c

    .line 1281
    move-object/from16 v13, v22

    .line 1285
    .end local v5    # "NC":I
    .end local v22    # "top":Lcom/android/server/wm/WindowState;
    :cond_c
    move-object/from16 v0, p0

    move-object/from16 v1, p1

    invoke-direct {v0, v13, v1}, Lcom/android/server/wm/WindowManagerService;->placeWindowAfter(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1286
    return v20

    .line 1257
    .end local v7    # "atoken":Lcom/android/server/wm/WindowToken;
    .restart local v6    # "NW":I
    .restart local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    .restart local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_d
    add-int/lit8 v18, v18, -0x1

    goto :goto_2

    .line 1290
    .end local v6    # "NW":I
    .end local v14    # "t":Lcom/android/server/wm/AppWindowToken;
    .end local v21    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_e
    move-object/from16 v0, p1

    iget v12, v0, Lcom/android/server/wm/WindowState;->mBaseLayer:I

    .line 1292
    .local v12, "myLayer":I
    invoke-virtual/range {v24 .. v24}, Lcom/android/server/wm/WindowList;->size()I

    move-result v25

    add-int/lit8 v11, v25, -0x1

    .local v11, "i":I
    :goto_3
    if-ltz v11, :cond_f

    .line 1293
    move-object/from16 v0, v24

    invoke-virtual {v0, v11}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v23

    check-cast v23, Lcom/android/server/wm/WindowState;

    .line 1298
    .local v23, "w":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v23

    iget v0, v0, Lcom/android/server/wm/WindowState;->mBaseLayer:I

    move/from16 v25, v0

    move/from16 v0, v25

    if-gt v0, v12, :cond_10

    move-object/from16 v0, v23

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    move-object/from16 v25, v0

    move-object/from16 v0, v25

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    move/from16 v25, v0

    const/16 v26, 0x7f2

    move/from16 v0, v25

    move/from16 v1, v26

    if-eq v0, v1, :cond_10

    .line 1305
    .end local v23    # "w":Lcom/android/server/wm/WindowState;
    :cond_f
    add-int/lit8 v25, v11, 0x1

    move-object/from16 v0, v24

    move/from16 v1, v25

    move-object/from16 v2, p1

    invoke-virtual {v0, v1, v2}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1306
    const/16 v25, 0x1

    move/from16 v0, v25

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1307
    return v20

    .line 1292
    .restart local v23    # "w":Lcom/android/server/wm/WindowState;
    :cond_10
    add-int/lit8 v11, v11, -0x1

    goto :goto_3
.end method

.method private addAppWindowToTokenListLocked(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowList;Lcom/android/server/wm/WindowList;)I
    .locals 9
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "token"    # Lcom/android/server/wm/WindowToken;
    .param p3, "windows"    # Lcom/android/server/wm/WindowList;
    .param p4, "tokenWindowList"    # Lcom/android/server/wm/WindowList;

    .prologue
    const/4 v8, 0x1

    const/4 v7, 0x0

    .line 1316
    iget-object v6, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v6, v6, Landroid/view/WindowManager$LayoutParams;->type:I

    if-ne v6, v8, :cond_0

    .line 1318
    invoke-virtual {p4, v7}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 1319
    .local v2, "lowestWindow":Lcom/android/server/wm/WindowState;
    invoke-direct {p0, v2, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1320
    iget-object v6, p2, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-direct {p0, v2, v6}, Lcom/android/server/wm/WindowManagerService;->indexOfWinInWindowList(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowList;)I

    move-result v4

    .line 1348
    .end local v2    # "lowestWindow":Lcom/android/server/wm/WindowState;
    .local v4, "tokenWindowsPos":I
    :goto_0
    return v4

    .line 1322
    .end local v4    # "tokenWindowsPos":I
    :cond_0
    iget-object v0, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1323
    .local v0, "atoken":Lcom/android/server/wm/AppWindowToken;
    invoke-virtual {p4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    .line 1324
    .local v5, "windowListPos":I
    add-int/lit8 v6, v5, -0x1

    invoke-virtual {p4, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 1325
    .local v1, "lastWindow":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_1

    iget-object v6, v0, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    if-ne v1, v6, :cond_1

    .line 1326
    invoke-direct {p0, v1, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1327
    iget-object v6, p2, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-direct {p0, v1, v6}, Lcom/android/server/wm/WindowManagerService;->indexOfWinInWindowList(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowList;)I

    move-result v4

    .restart local v4    # "tokenWindowsPos":I
    goto :goto_0

    .line 1329
    .end local v4    # "tokenWindowsPos":I
    :cond_1
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findIdxBasedOnAppTokens(Lcom/android/server/wm/WindowState;)I

    move-result v3

    .line 1337
    .local v3, "newIdx":I
    add-int/lit8 v6, v3, 0x1

    invoke-virtual {p3, v6, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1338
    if-gez v3, :cond_2

    .line 1340
    const/4 v4, 0x0

    .line 1345
    .restart local v4    # "tokenWindowsPos":I
    :goto_1
    iput-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    goto :goto_0

    .line 1343
    .end local v4    # "tokenWindowsPos":I
    :cond_2
    invoke-virtual {p3, v3}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/WindowState;

    iget-object v7, p2, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    .line 1342
    invoke-direct {p0, v6, v7}, Lcom/android/server/wm/WindowManagerService;->indexOfWinInWindowList(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowList;)I

    move-result v6

    add-int/lit8 v4, v6, 0x1

    .restart local v4    # "tokenWindowsPos":I
    goto :goto_1
.end method

.method private addAttachedWindowToListLocked(Lcom/android/server/wm/WindowState;Z)V
    .locals 12
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "addToToken"    # Z

    .prologue
    .line 1379
    iget-object v6, p1, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    .line 1380
    .local v6, "token":Lcom/android/server/wm/WindowToken;
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v2

    .line 1381
    .local v2, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v2, :cond_0

    .line 1382
    return-void

    .line 1384
    :cond_0
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mAttachedWindow:Lcom/android/server/wm/WindowState;

    .line 1386
    .local v1, "attached":Lcom/android/server/wm/WindowState;
    invoke-direct {p0, v6, v2}, Lcom/android/server/wm/WindowManagerService;->getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;

    move-result-object v7

    .line 1390
    .local v7, "tokenWindowList":Lcom/android/server/wm/WindowList;
    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 1391
    .local v0, "NA":I
    iget v5, p1, Lcom/android/server/wm/WindowState;->mSubLayer:I

    .line 1392
    .local v5, "sublayer":I
    const/high16 v4, -0x80000000

    .line 1393
    .local v4, "largestSublayer":I
    const/4 v10, 0x0

    .line 1395
    .local v10, "windowWithLargestSublayer":Lcom/android/server/wm/WindowState;
    const/4 v3, 0x0

    .end local v10    # "windowWithLargestSublayer":Lcom/android/server/wm/WindowState;
    .local v3, "i":I
    :goto_0
    if-ge v3, v0, :cond_4

    .line 1396
    invoke-virtual {v7, v3}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/WindowState;

    .line 1397
    .local v8, "w":Lcom/android/server/wm/WindowState;
    iget v9, v8, Lcom/android/server/wm/WindowState;->mSubLayer:I

    .line 1398
    .local v9, "wSublayer":I
    if-lt v9, v4, :cond_1

    .line 1399
    move v4, v9

    .line 1400
    move-object v10, v8

    .line 1402
    :cond_1
    if-gez v5, :cond_7

    .line 1405
    if-lt v9, v5, :cond_9

    .line 1406
    if-eqz p2, :cond_2

    .line 1408
    iget-object v11, v6, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v11, v3, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1410
    :cond_2
    if-ltz v9, :cond_3

    move-object v8, v1

    .end local v8    # "w":Lcom/android/server/wm/WindowState;
    :cond_3
    invoke-direct {p0, v8, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1426
    .end local v9    # "wSublayer":I
    :cond_4
    :goto_1
    if-lt v3, v0, :cond_6

    .line 1427
    if-eqz p2, :cond_5

    .line 1429
    iget-object v11, v6, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v11, p1}, Lcom/android/server/wm/WindowList;->add(Ljava/lang/Object;)Z

    .line 1431
    :cond_5
    if-gez v5, :cond_a

    .line 1432
    invoke-direct {p0, v1, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 1378
    :cond_6
    :goto_2
    return-void

    .line 1416
    .restart local v8    # "w":Lcom/android/server/wm/WindowState;
    .restart local v9    # "wSublayer":I
    :cond_7
    if-le v9, v5, :cond_9

    .line 1417
    if-eqz p2, :cond_8

    .line 1419
    iget-object v11, v6, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v11, v3, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1421
    :cond_8
    invoke-direct {p0, v8, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    goto :goto_1

    .line 1395
    :cond_9
    add-int/lit8 v3, v3, 0x1

    goto :goto_0

    .line 1434
    .end local v8    # "w":Lcom/android/server/wm/WindowState;
    .end local v9    # "wSublayer":I
    :cond_a
    if-ltz v4, :cond_b

    :goto_3
    invoke-direct {p0, v10, p1}, Lcom/android/server/wm/WindowManagerService;->placeWindowAfter(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    goto :goto_2

    :cond_b
    move-object v10, v1

    .line 1436
    goto :goto_3
.end method

.method private addFreeWindowToListLocked(Lcom/android/server/wm/WindowState;)V
    .locals 6
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1352
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v3

    .line 1355
    .local v3, "windows":Lcom/android/server/wm/WindowList;
    iget v1, p1, Lcom/android/server/wm/WindowState;->mBaseLayer:I

    .line 1357
    .local v1, "myLayer":I
    invoke-virtual {v3}, Lcom/android/server/wm/WindowList;->size()I

    move-result v4

    add-int/lit8 v0, v4, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_0

    .line 1358
    invoke-virtual {v3, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 1359
    .local v2, "otherWin":Lcom/android/server/wm/WindowState;
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getBaseType()I

    move-result v4

    const/16 v5, 0x7dd

    if-eq v4, v5, :cond_1

    iget v4, v2, Lcom/android/server/wm/WindowState;->mBaseLayer:I

    if-gt v4, v1, :cond_1

    .line 1371
    .end local v2    # "otherWin":Lcom/android/server/wm/WindowState;
    :cond_0
    add-int/lit8 v0, v0, 0x1

    .line 1374
    invoke-virtual {v3, v0, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1375
    const/4 v4, 0x1

    iput-boolean v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1351
    return-void

    .line 1357
    .restart local v2    # "otherWin":Lcom/android/server/wm/WindowState;
    :cond_1
    add-int/lit8 v0, v0, -0x1

    goto :goto_0
.end method

.method private addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V
    .locals 4
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "addToToken"    # Z

    .prologue
    .line 1445
    iget-object v3, p1, Lcom/android/server/wm/WindowState;->mAttachedWindow:Lcom/android/server/wm/WindowState;

    if-nez v3, :cond_3

    .line 1446
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    .line 1447
    .local v1, "token":Lcom/android/server/wm/WindowToken;
    const/4 v2, 0x0

    .line 1448
    .local v2, "tokenWindowsPos":I
    iget-object v3, v1, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v3, :cond_2

    .line 1449
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->addAppWindowToListLocked(Lcom/android/server/wm/WindowState;)I

    move-result v2

    .line 1453
    :goto_0
    if-eqz p2, :cond_0

    .line 1455
    iget-object v3, v1, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v3, v2, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1461
    .end local v1    # "token":Lcom/android/server/wm/WindowToken;
    .end local v2    # "tokenWindowsPos":I
    :cond_0
    :goto_1
    iget-object v0, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1462
    .local v0, "appToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_1

    .line 1463
    if-eqz p2, :cond_1

    .line 1464
    invoke-virtual {v0, p1}, Lcom/android/server/wm/AppWindowToken;->addWindow(Lcom/android/server/wm/WindowState;)V

    .line 1442
    :cond_1
    return-void

    .line 1451
    .end local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .restart local v1    # "token":Lcom/android/server/wm/WindowToken;
    .restart local v2    # "tokenWindowsPos":I
    :cond_2
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->addFreeWindowToListLocked(Lcom/android/server/wm/WindowState;)V

    goto :goto_0

    .line 1458
    .end local v1    # "token":Lcom/android/server/wm/WindowToken;
    .end local v2    # "tokenWindowsPos":I
    :cond_3
    invoke-direct {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->addAttachedWindowToListLocked(Lcom/android/server/wm/WindowState;Z)V

    goto :goto_1
.end method

.method private adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V
    .locals 3
    .param p1, "displayInfo"    # Landroid/view/DisplayInfo;
    .param p2, "rotation"    # I
    .param p3, "uiMode"    # I
    .param p4, "dw"    # I
    .param p5, "dh"    # I

    .prologue
    .line 7557
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2, p4, p5, p2, p3}, Landroid/view/WindowManagerPolicy;->getConfigDisplayWidth(IIII)I

    move-result v1

    .line 7558
    .local v1, "width":I
    iget v2, p1, Landroid/view/DisplayInfo;->smallestNominalAppWidth:I

    if-ge v1, v2, :cond_0

    .line 7559
    iput v1, p1, Landroid/view/DisplayInfo;->smallestNominalAppWidth:I

    .line 7561
    :cond_0
    iget v2, p1, Landroid/view/DisplayInfo;->largestNominalAppWidth:I

    if-le v1, v2, :cond_1

    .line 7562
    iput v1, p1, Landroid/view/DisplayInfo;->largestNominalAppWidth:I

    .line 7564
    :cond_1
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2, p4, p5, p2, p3}, Landroid/view/WindowManagerPolicy;->getConfigDisplayHeight(IIII)I

    move-result v0

    .line 7565
    .local v0, "height":I
    iget v2, p1, Landroid/view/DisplayInfo;->smallestNominalAppHeight:I

    if-ge v0, v2, :cond_2

    .line 7566
    iput v0, p1, Landroid/view/DisplayInfo;->smallestNominalAppHeight:I

    .line 7568
    :cond_2
    iget v2, p1, Landroid/view/DisplayInfo;->largestNominalAppHeight:I

    if-le v0, v2, :cond_3

    .line 7569
    iput v0, p1, Landroid/view/DisplayInfo;->largestNominalAppHeight:I

    .line 7555
    :cond_3
    return-void
.end method

.method private applyAnimationLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;IZZ)Z
    .locals 19
    .param p1, "atoken"    # Lcom/android/server/wm/AppWindowToken;
    .param p2, "lp"    # Landroid/view/WindowManager$LayoutParams;
    .param p3, "transit"    # I
    .param p4, "enter"    # Z
    .param p5, "isVoiceInteraction"    # Z

    .prologue
    .line 3287
    const-string/jumbo v2, "WM#applyAnimationLocked"

    const-wide/16 v6, 0x20

    invoke-static {v6, v7, v2}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 3288
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z

    move-result v2

    if-eqz v2, :cond_5

    .line 3289
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v15

    .line 3290
    .local v15, "displayInfo":Landroid/view/DisplayInfo;
    iget v0, v15, Landroid/view/DisplayInfo;->appWidth:I

    move/from16 v17, v0

    .line 3291
    .local v17, "width":I
    iget v0, v15, Landroid/view/DisplayInfo;->appHeight:I

    move/from16 v16, v0

    .line 3296
    .local v16, "height":I
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/AppWindowToken;->findMainWindow()Lcom/android/server/wm/WindowState;

    move-result-object v18

    .line 3297
    .local v18, "win":Lcom/android/server/wm/WindowState;
    new-instance v8, Landroid/graphics/Rect;

    const/4 v2, 0x0

    const/4 v6, 0x0

    move/from16 v0, v17

    move/from16 v1, v16

    invoke-direct {v8, v2, v6, v0, v1}, Landroid/graphics/Rect;-><init>(IIII)V

    .line 3298
    .local v8, "frame":Landroid/graphics/Rect;
    new-instance v9, Landroid/graphics/Rect;

    .line 3299
    iget v2, v15, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v6, v15, Landroid/view/DisplayInfo;->logicalHeight:I

    .line 3298
    const/4 v7, 0x0

    const/4 v12, 0x0

    invoke-direct {v9, v7, v12, v2, v6}, Landroid/graphics/Rect;-><init>(IIII)V

    .line 3300
    .local v9, "displayFrame":Landroid/graphics/Rect;
    new-instance v10, Landroid/graphics/Rect;

    invoke-direct {v10}, Landroid/graphics/Rect;-><init>()V

    .line 3301
    .local v10, "insets":Landroid/graphics/Rect;
    const/4 v11, 0x0

    .line 3302
    .local v11, "surfaceInsets":Landroid/graphics/Rect;
    if-eqz v18, :cond_3

    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/WindowState;->inFreeformWorkspace()Z

    move-result v13

    .line 3303
    :goto_0
    if-eqz v18, :cond_0

    .line 3308
    if-eqz v13, :cond_4

    .line 3309
    move-object/from16 v0, v18

    iget-object v2, v0, Lcom/android/server/wm/WindowState;->mFrame:Landroid/graphics/Rect;

    invoke-virtual {v8, v2}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3313
    :goto_1
    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/WindowState;->getAttrs()Landroid/view/WindowManager$LayoutParams;

    move-result-object v2

    iget-object v11, v2, Landroid/view/WindowManager$LayoutParams;->surfaceInsets:Landroid/graphics/Rect;

    .line 3314
    .local v11, "surfaceInsets":Landroid/graphics/Rect;
    move-object/from16 v0, v18

    iget-object v2, v0, Lcom/android/server/wm/WindowState;->mContentInsets:Landroid/graphics/Rect;

    invoke-virtual {v10, v2}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3317
    .end local v11    # "surfaceInsets":Landroid/graphics/Rect;
    :cond_0
    move-object/from16 v0, p1

    iget-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->mLaunchTaskBehind:Z

    if-eqz v2, :cond_1

    .line 3321
    const/16 p4, 0x0

    .line 3326
    .end local p4    # "enter":Z
    :cond_1
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    iget v6, v6, Landroid/content/res/Configuration;->uiMode:I

    .line 3327
    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    iget v7, v7, Landroid/content/res/Configuration;->orientation:I

    .line 3328
    move-object/from16 v0, p1

    iget-object v12, v0, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    iget v14, v12, Lcom/android/server/wm/Task;->mTaskId:I

    move-object/from16 v3, p2

    move/from16 v4, p3

    move/from16 v5, p4

    move/from16 v12, p5

    invoke-virtual/range {v2 .. v14}, Lcom/android/server/wm/AppTransition;->loadAnimation(Landroid/view/WindowManager$LayoutParams;IZIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;ZZI)Landroid/view/animation/Animation;

    move-result-object v3

    .local v3, "a":Landroid/view/animation/Animation;

    move-object/from16 v0, p0

    move/from16 v1, p3

    move/from16 v2, p4

    move-object/from16 v4, v3

    move-object/from16 v3, v15

    invoke-static/range {v0 .. v4}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->createFlymeCustomAnimation(Lcom/android/server/wm/WindowManagerService;IZLandroid/view/DisplayInfo;Landroid/view/animation/Animation;)Landroid/view/animation/Animation;

    move-result-object v3

    if-eqz v3, :cond_2

    invoke-virtual {v8}, Landroid/graphics/Rect;->width()I

    move-result v4

    .local v4, "containingWidth":I
    invoke-virtual {v8}, Landroid/graphics/Rect;->height()I

    move-result v5

    .local v5, "containingHeight":I
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v6}, Lcom/android/server/wm/AppTransition;->canSkipFirstFrame()Z

    move-result v6

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v7}, Lcom/android/server/wm/AppTransition;->getAppStackClipMode()I

    move-result v7

    .line 3333
    invoke-virtual/range {v2 .. v7}, Lcom/android/server/wm/AppWindowAnimator;->setAnimation(Landroid/view/animation/Animation;IIZI)V

    .line 3339
    .end local v3    # "a":Landroid/view/animation/Animation;
    .end local v4    # "containingWidth":I
    .end local v5    # "containingHeight":I
    .end local v8    # "frame":Landroid/graphics/Rect;
    .end local v9    # "displayFrame":Landroid/graphics/Rect;
    .end local v10    # "insets":Landroid/graphics/Rect;
    .end local v15    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v16    # "height":I
    .end local v17    # "width":I
    .end local v18    # "win":Lcom/android/server/wm/WindowState;
    :cond_2
    :goto_2
    const-wide/16 v6, 0x20

    invoke-static {v6, v7}, Landroid/os/Trace;->traceEnd(J)V

    .line 3341
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v2, v2, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    if-eqz v2, :cond_6

    const/4 v2, 0x1

    :goto_3
    return v2

    .line 3302
    .restart local v8    # "frame":Landroid/graphics/Rect;
    .restart local v9    # "displayFrame":Landroid/graphics/Rect;
    .restart local v10    # "insets":Landroid/graphics/Rect;
    .local v11, "surfaceInsets":Landroid/graphics/Rect;
    .restart local v15    # "displayInfo":Landroid/view/DisplayInfo;
    .restart local v16    # "height":I
    .restart local v17    # "width":I
    .restart local v18    # "win":Lcom/android/server/wm/WindowState;
    .restart local p4    # "enter":Z
    :cond_3
    const/4 v13, 0x0

    .local v13, "freeform":Z
    goto :goto_0

    .line 3311
    .end local v13    # "freeform":Z
    :cond_4
    move-object/from16 v0, v18

    iget-object v2, v0, Lcom/android/server/wm/WindowState;->mContainingFrame:Landroid/graphics/Rect;

    invoke-virtual {v8, v2}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    goto :goto_1

    .line 3337
    .end local v8    # "frame":Landroid/graphics/Rect;
    .end local v9    # "displayFrame":Landroid/graphics/Rect;
    .end local v10    # "insets":Landroid/graphics/Rect;
    .end local v11    # "surfaceInsets":Landroid/graphics/Rect;
    .end local v15    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v16    # "height":I
    .end local v17    # "width":I
    .end local v18    # "win":Lcom/android/server/wm/WindowState;
    :cond_5
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v2}, Lcom/android/server/wm/AppWindowAnimator;->clearAnimation()V

    goto :goto_2

    .line 3341
    .end local p4    # "enter":Z
    :cond_6
    const/4 v2, 0x0

    goto :goto_3
.end method

.method static canBeImeTarget(Lcom/android/server/wm/WindowState;)Z
    .locals 5
    .param p0, "w"    # Lcom/android/server/wm/WindowState;

    .prologue
    const v4, 0x20008

    const/4 v3, 0x0

    .line 1470
    iget-object v2, p0, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v2, v2, Landroid/view/WindowManager$LayoutParams;->flags:I

    and-int v0, v2, v4

    .line 1472
    .local v0, "fl":I
    iget-object v2, p0, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v1, v2, Landroid/view/WindowManager$LayoutParams;->type:I

    .line 1473
    .local v1, "type":I
    if-eqz v0, :cond_0

    if-ne v0, v4, :cond_1

    .line 1490
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowState;->isVisibleOrAdding()Z

    move-result v2

    return v2

    .line 1474
    :cond_1
    const/4 v2, 0x3

    if-eq v1, v2, :cond_0

    .line 1492
    return v3
.end method

.method private checkBootAnimationCompleteLocked()Z
    .locals 4

    .prologue
    const/16 v1, 0x25

    .line 6140
    const-string/jumbo v0, "bootanim"

    invoke-static {v0}, Landroid/os/SystemService;->isRunning(Ljava/lang/String;)Z

    move-result v0

    if-eqz v0, :cond_0

    .line 6141
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 6142
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    .line 6143
    const-wide/16 v2, 0xc8

    .line 6142
    invoke-virtual {v0, v1, v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 6145
    const/4 v0, 0x0

    return v0

    .line 6148
    :cond_0
    const/4 v0, 0x1

    return v0
.end method

.method private checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z
    .locals 5
    .param p1, "permission"    # Ljava/lang/String;
    .param p2, "func"    # Ljava/lang/String;

    .prologue
    const/4 v4, 0x1

    const/4 v3, 0x0

    .line 3414
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v1

    invoke-static {}, Landroid/os/Process;->myPid()I

    move-result v2

    if-ne v1, v2, :cond_0

    .line 3415
    return v4

    .line 3418
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v1, p1}, Landroid/content/Context;->checkCallingPermission(Ljava/lang/String;)I

    move-result v1

    if-nez v1, :cond_1

    .line 3420
    return v4

    .line 3422
    :cond_1
    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "Permission Denial: "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, " from pid="

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    .line 3423
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v2

    .line 3422
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    .line 3424
    const-string/jumbo v2, ", uid="

    .line 3422
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    .line 3424
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v2

    .line 3422
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    .line 3425
    const-string/jumbo v2, " requires "

    .line 3422
    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    .line 3426
    .local v0, "msg":Ljava/lang/String;
    const-string/jumbo v1, "WindowManager"

    invoke-static {v1, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 3427
    return v3
.end method

.method private checkWaitingForWindowsLocked()Z
    .locals 12

    .prologue
    const/4 v11, 0x1

    .line 6009
    const/4 v2, 0x0

    .line 6010
    .local v2, "haveBootMsg":Z
    const/4 v1, 0x0

    .line 6013
    .local v1, "haveApp":Z
    const/4 v4, 0x0

    .line 6014
    .local v4, "haveWallpaper":Z
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v9}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v9

    const v10, #android:bool@config_enableWallpaperService#t

    invoke-virtual {v9, v10}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v9

    if-eqz v9, :cond_3

    iget-boolean v9, p0, Lcom/android/server/wm/WindowManagerService;->mOnlyCore:Z

    if-eqz v9, :cond_2

    const/4 v7, 0x0

    .local v7, "wallpaperEnabled":Z
    :goto_0
    const/4 v3, 0x1

    .local v3, "haveKeyguard":Z
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v8

    .local v8, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v8}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .local v0, "N":I
    const/4 v5, 0x0

    .end local v3    # "haveKeyguard":Z
    .local v5, "i":I
    :goto_1
    if-ge v5, v0, :cond_9

    .line 6022
    invoke-virtual {v8, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/WindowState;

    .line 6023
    .local v6, "w":Lcom/android/server/wm/WindowState;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z

    move-result v9

    if-eqz v9, :cond_0

    iget-boolean v9, v6, Lcom/android/server/wm/WindowState;->mObscured:Z

    if-eqz v9, :cond_4

    .line 6026
    :cond_0
    invoke-virtual {v6}, Lcom/android/server/wm/WindowState;->isDrawnLw()Z

    move-result v9

    if-eqz v9, :cond_1

    .line 6027
    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v10, 0x7e5

    if-ne v9, v10, :cond_5

    .line 6028
    const/4 v2, 0x1

    .line 6021
    :cond_1
    :goto_2
    add-int/lit8 v5, v5, 0x1

    goto :goto_1

    .line 6016
    .end local v0    # "N":I
    .end local v5    # "i":I
    .end local v6    # "w":Lcom/android/server/wm/WindowState;
    .end local v7    # "wallpaperEnabled":Z
    .end local v8    # "windows":Lcom/android/server/wm/WindowList;
    :cond_2
    const/4 v7, 0x1

    .restart local v7    # "wallpaperEnabled":Z
    goto :goto_0

    .line 6014
    .end local v7    # "wallpaperEnabled":Z
    :cond_3
    const/4 v7, 0x0

    .restart local v7    # "wallpaperEnabled":Z
    goto :goto_0

    .line 6023
    .restart local v0    # "N":I
    .restart local v5    # "i":I
    .restart local v6    # "w":Lcom/android/server/wm/WindowState;
    .restart local v8    # "windows":Lcom/android/server/wm/WindowList;
    :cond_4
    invoke-virtual {v6}, Lcom/android/server/wm/WindowState;->isDrawnLw()Z

    move-result v9

    if-nez v9, :cond_0

    .line 6024
    return v11

    .line 6029
    :cond_5
    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v10, 0x2

    if-eq v9, v10, :cond_6

    .line 6030
    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v10, 0x4

    if-ne v9, v10, :cond_7

    .line 6031
    :cond_6
    const/4 v1, 0x1

    .line 6030
    goto :goto_2

    .line 6032
    :cond_7
    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v10, 0x7dd

    if-ne v9, v10, :cond_8

    .line 6033
    const/4 v4, 0x1

    goto :goto_2

    .line 6034
    :cond_8
    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v10, 0x7d0

    if-ne v9, v10, :cond_1

    .line 6035
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v9}, Landroid/view/WindowManagerPolicy;->isKeyguardDrawnLw()Z

    move-result v3

    .local v3, "haveKeyguard":Z
    goto :goto_2

    .line 6049
    .end local v3    # "haveKeyguard":Z
    .end local v6    # "w":Lcom/android/server/wm/WindowState;
    :cond_9
    iget-boolean v9, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    if-nez v9, :cond_a

    if-eqz v2, :cond_d

    .line 6056
    :cond_a
    iget-boolean v9, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    if-eqz v9, :cond_c

    if-nez v1, :cond_b

    if-eqz v3, :cond_e

    .line 6057
    :cond_b
    if-eqz v7, :cond_c

    if-eqz v4, :cond_e

    .line 6061
    :cond_c
    const/4 v9, 0x0

    return v9

    .line 6050
    :cond_d
    return v11

    .line 6058
    :cond_e
    return v11
.end method

.method private computeCompatSmallestWidth(ZILandroid/util/DisplayMetrics;II)I
    .locals 15
    .param p1, "rotated"    # Z
    .param p2, "uiMode"    # I
    .param p3, "dm"    # Landroid/util/DisplayMetrics;
    .param p4, "dw"    # I
    .param p5, "dh"    # I

    .prologue
    .line 7641
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpDisplayMetrics:Landroid/util/DisplayMetrics;

    move-object/from16 v0, p3

    invoke-virtual {v1, v0}, Landroid/util/DisplayMetrics;->setTo(Landroid/util/DisplayMetrics;)V

    .line 7642
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mTmpDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 7644
    .local v5, "tmpDm":Landroid/util/DisplayMetrics;
    if-eqz p1, :cond_0

    .line 7645
    move/from16 v6, p5

    .line 7646
    .local v6, "unrotDw":I
    move/from16 v7, p4

    .line 7651
    .local v7, "unrotDh":I
    :goto_0
    const/4 v2, 0x0

    const/4 v3, 0x0

    move-object v1, p0

    move/from16 v4, p2

    invoke-direct/range {v1 .. v7}, Lcom/android/server/wm/WindowManagerService;->reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;II)I

    move-result v9

    .line 7652
    .local v9, "sw":I
    const/4 v10, 0x1

    move-object v8, p0

    move/from16 v11, p2

    move-object v12, v5

    move v13, v7

    move v14, v6

    invoke-direct/range {v8 .. v14}, Lcom/android/server/wm/WindowManagerService;->reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;II)I

    move-result v9

    .line 7653
    const/4 v3, 0x2

    move-object v1, p0

    move v2, v9

    move/from16 v4, p2

    invoke-direct/range {v1 .. v7}, Lcom/android/server/wm/WindowManagerService;->reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;II)I

    move-result v9

    .line 7654
    const/4 v10, 0x3

    move-object v8, p0

    move/from16 v11, p2

    move-object v12, v5

    move v13, v7

    move v14, v6

    invoke-direct/range {v8 .. v14}, Lcom/android/server/wm/WindowManagerService;->reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;II)I

    move-result v9

    .line 7655
    return v9

    .line 7648
    .end local v6    # "unrotDw":I
    .end local v7    # "unrotDh":I
    .end local v9    # "sw":I
    :cond_0
    move/from16 v6, p4

    .line 7649
    .restart local v6    # "unrotDw":I
    move/from16 v7, p5

    .restart local v7    # "unrotDh":I
    goto :goto_0
.end method

.method private computeFocusedWindowLocked()Lcom/android/server/wm/WindowState;
    .locals 6

    .prologue
    const/4 v5, 0x0

    .line 10025
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v4}, Landroid/util/SparseArray;->size()I

    move-result v1

    .line 10026
    .local v1, "displayCount":I
    const/4 v2, 0x0

    .local v2, "i":I
    :goto_0
    if-ge v2, v1, :cond_1

    .line 10027
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v4, v2}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 10028
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->findFocusedWindowLocked(Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowState;

    move-result-object v3

    .line 10029
    .local v3, "win":Lcom/android/server/wm/WindowState;
    if-eqz v3, :cond_0

    .line 10030
    return-object v3

    .line 10026
    :cond_0
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .line 10033
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v3    # "win":Lcom/android/server/wm/WindowState;
    :cond_1
    return-object v5
.end method

.method private computeNewConfigurationLocked()Landroid/content/res/Configuration;
    .locals 2

    .prologue
    .line 7545
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-nez v1, :cond_0

    .line 7546
    const/4 v1, 0x0

    return-object v1

    .line 7548
    :cond_0
    new-instance v0, Landroid/content/res/Configuration;

    invoke-direct {v0}, Landroid/content/res/Configuration;-><init>()V

    .line 7549
    .local v0, "config":Landroid/content/res/Configuration;
    const/4 v1, 0x0

    iput v1, v0, Landroid/content/res/Configuration;->fontScale:F

    .line 7550
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->computeScreenConfigurationLocked(Landroid/content/res/Configuration;)V

    .line 7551
    return-object v0
.end method

.method private computeSizeRangesAndScreenLayout(Landroid/view/DisplayInfo;ZIIIFLandroid/content/res/Configuration;)V
    .locals 14
    .param p1, "displayInfo"    # Landroid/view/DisplayInfo;
    .param p2, "rotated"    # Z
    .param p3, "uiMode"    # I
    .param p4, "dw"    # I
    .param p5, "dh"    # I
    .param p6, "density"    # F
    .param p7, "outConfig"    # Landroid/content/res/Configuration;

    .prologue
    .line 7602
    if-eqz p2, :cond_0

    .line 7603
    move/from16 v5, p5

    .line 7604
    .local v5, "unrotDw":I
    move/from16 v6, p4

    .line 7609
    .local v6, "unrotDh":I
    :goto_0
    const/high16 v1, 0x40000000    # 2.0f

    iput v1, p1, Landroid/view/DisplayInfo;->smallestNominalAppWidth:I

    .line 7610
    const/high16 v1, 0x40000000    # 2.0f

    iput v1, p1, Landroid/view/DisplayInfo;->smallestNominalAppHeight:I

    .line 7611
    const/4 v1, 0x0

    iput v1, p1, Landroid/view/DisplayInfo;->largestNominalAppWidth:I

    .line 7612
    const/4 v1, 0x0

    iput v1, p1, Landroid/view/DisplayInfo;->largestNominalAppHeight:I

    .line 7613
    const/4 v3, 0x0

    move-object v1, p0

    move-object v2, p1

    move/from16 v4, p3

    invoke-direct/range {v1 .. v6}, Lcom/android/server/wm/WindowManagerService;->adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V

    .line 7614
    const/4 v9, 0x1

    move-object v7, p0

    move-object v8, p1

    move/from16 v10, p3

    move v11, v6

    move v12, v5

    invoke-direct/range {v7 .. v12}, Lcom/android/server/wm/WindowManagerService;->adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V

    .line 7615
    const/4 v3, 0x2

    move-object v1, p0

    move-object v2, p1

    move/from16 v4, p3

    invoke-direct/range {v1 .. v6}, Lcom/android/server/wm/WindowManagerService;->adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V

    .line 7616
    const/4 v9, 0x3

    move-object v7, p0

    move-object v8, p1

    move/from16 v10, p3

    move v11, v6

    move v12, v5

    invoke-direct/range {v7 .. v12}, Lcom/android/server/wm/WindowManagerService;->adjustDisplaySizeRanges(Landroid/view/DisplayInfo;IIII)V

    .line 7617
    move-object/from16 v0, p7

    iget v1, v0, Landroid/content/res/Configuration;->screenLayout:I

    invoke-static {v1}, Landroid/content/res/Configuration;->resetScreenLayout(I)I

    move-result v2

    .line 7618
    .local v2, "sl":I
    const/4 v3, 0x0

    move-object v1, p0

    move/from16 v4, p6

    move/from16 v7, p3

    invoke-direct/range {v1 .. v7}, Lcom/android/server/wm/WindowManagerService;->reduceConfigLayout(IIFIII)I

    move-result v2

    .line 7619
    const/4 v9, 0x1

    move-object v7, p0

    move v8, v2

    move/from16 v10, p6

    move v11, v6

    move v12, v5

    move/from16 v13, p3

    invoke-direct/range {v7 .. v13}, Lcom/android/server/wm/WindowManagerService;->reduceConfigLayout(IIFIII)I

    move-result v2

    .line 7620
    const/4 v3, 0x2

    move-object v1, p0

    move/from16 v4, p6

    move/from16 v7, p3

    invoke-direct/range {v1 .. v7}, Lcom/android/server/wm/WindowManagerService;->reduceConfigLayout(IIFIII)I

    move-result v2

    .line 7621
    const/4 v9, 0x3

    move-object v7, p0

    move v8, v2

    move/from16 v10, p6

    move v11, v6

    move v12, v5

    move/from16 v13, p3

    invoke-direct/range {v7 .. v13}, Lcom/android/server/wm/WindowManagerService;->reduceConfigLayout(IIFIII)I

    move-result v2

    .line 7622
    iget v1, p1, Landroid/view/DisplayInfo;->smallestNominalAppWidth:I

    int-to-float v1, v1

    div-float v1, v1, p6

    float-to-int v1, v1

    move-object/from16 v0, p7

    iput v1, v0, Landroid/content/res/Configuration;->smallestScreenWidthDp:I

    .line 7623
    move-object/from16 v0, p7

    iput v2, v0, Landroid/content/res/Configuration;->screenLayout:I

    .line 7594
    return-void

    .line 7606
    .end local v2    # "sl":I
    .end local v5    # "unrotDw":I
    .end local v6    # "unrotDh":I
    :cond_0
    move/from16 v5, p4

    .line 7607
    .restart local v5    # "unrotDw":I
    move/from16 v6, p5

    .restart local v6    # "unrotDh":I
    goto :goto_0
.end method

.method private configureDisplayPolicyLocked(Lcom/android/server/wm/DisplayContent;)V
    .locals 7
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    .line 9407
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v1

    .line 9408
    iget v2, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    .line 9409
    iget v3, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    .line 9410
    iget v4, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayDensity:I

    .line 9407
    invoke-interface {v0, v1, v2, v3, v4}, Landroid/view/WindowManagerPolicy;->setInitialDisplaySize(Landroid/view/Display;III)V

    .line 9412
    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v6

    .line 9413
    .local v6, "displayInfo":Landroid/view/DisplayInfo;
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v1

    .line 9414
    iget v2, v6, Landroid/view/DisplayInfo;->overscanLeft:I

    iget v3, v6, Landroid/view/DisplayInfo;->overscanTop:I

    .line 9415
    iget v4, v6, Landroid/view/DisplayInfo;->overscanRight:I

    iget v5, v6, Landroid/view/DisplayInfo;->overscanBottom:I

    .line 9413
    invoke-interface/range {v0 .. v5}, Landroid/view/WindowManagerPolicy;->setDisplayOverscan(Landroid/view/Display;IIII)V

    .line 9406
    return-void
.end method

.method private static convertCropForSurfaceFlinger(Landroid/graphics/Rect;III)V
    .locals 2
    .param p0, "crop"    # Landroid/graphics/Rect;
    .param p1, "rot"    # I
    .param p2, "dw"    # I
    .param p3, "dh"    # I

    .prologue
    .line 6351
    const/4 v1, 0x1

    if-ne p1, v1, :cond_1

    .line 6352
    iget v0, p0, Landroid/graphics/Rect;->top:I

    .line 6353
    .local v0, "tmp":I
    iget v1, p0, Landroid/graphics/Rect;->right:I

    sub-int v1, p2, v1

    iput v1, p0, Landroid/graphics/Rect;->top:I

    .line 6354
    iget v1, p0, Landroid/graphics/Rect;->bottom:I

    iput v1, p0, Landroid/graphics/Rect;->right:I

    .line 6355
    iget v1, p0, Landroid/graphics/Rect;->left:I

    sub-int v1, p2, v1

    iput v1, p0, Landroid/graphics/Rect;->bottom:I

    .line 6356
    iput v0, p0, Landroid/graphics/Rect;->left:I

    .line 6350
    .end local v0    # "tmp":I
    :cond_0
    :goto_0
    return-void

    .line 6357
    :cond_1
    const/4 v1, 0x2

    if-ne p1, v1, :cond_2

    .line 6358
    iget v0, p0, Landroid/graphics/Rect;->top:I

    .line 6359
    .restart local v0    # "tmp":I
    iget v1, p0, Landroid/graphics/Rect;->bottom:I

    sub-int v1, p3, v1

    iput v1, p0, Landroid/graphics/Rect;->top:I

    .line 6360
    sub-int v1, p3, v0

    iput v1, p0, Landroid/graphics/Rect;->bottom:I

    .line 6361
    iget v0, p0, Landroid/graphics/Rect;->right:I

    .line 6362
    iget v1, p0, Landroid/graphics/Rect;->left:I

    sub-int v1, p2, v1

    iput v1, p0, Landroid/graphics/Rect;->right:I

    .line 6363
    sub-int v1, p2, v0

    iput v1, p0, Landroid/graphics/Rect;->left:I

    goto :goto_0

    .line 6364
    .end local v0    # "tmp":I
    :cond_2
    const/4 v1, 0x3

    if-ne p1, v1, :cond_0

    .line 6365
    iget v0, p0, Landroid/graphics/Rect;->top:I

    .line 6366
    .restart local v0    # "tmp":I
    iget v1, p0, Landroid/graphics/Rect;->left:I

    iput v1, p0, Landroid/graphics/Rect;->top:I

    .line 6367
    iget v1, p0, Landroid/graphics/Rect;->bottom:I

    sub-int v1, p3, v1

    iput v1, p0, Landroid/graphics/Rect;->left:I

    .line 6368
    iget v1, p0, Landroid/graphics/Rect;->right:I

    iput v1, p0, Landroid/graphics/Rect;->bottom:I

    .line 6369
    sub-int v1, p3, v0

    iput v1, p0, Landroid/graphics/Rect;->right:I

    goto :goto_0
.end method

.method private createSurfaceControl(Landroid/view/Surface;ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;)I
    .locals 4
    .param p1, "outSurface"    # Landroid/view/Surface;
    .param p2, "result"    # I
    .param p3, "win"    # Lcom/android/server/wm/WindowState;
    .param p4, "winAnimator"    # Lcom/android/server/wm/WindowStateAnimator;

    .prologue
    .line 3148
    iget-boolean v1, p3, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-nez v1, :cond_0

    .line 3149
    or-int/lit8 p2, p2, 0x4

    .line 3151
    :cond_0
    invoke-virtual {p4}, Lcom/android/server/wm/WindowStateAnimator;->createSurfaceLocked()Lcom/android/server/wm/WindowSurfaceController;

    move-result-object v0

    .line 3152
    .local v0, "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    if-eqz v0, :cond_1

    .line 3153
    invoke-virtual {v0, p1}, Lcom/android/server/wm/WindowSurfaceController;->getSurface(Landroid/view/Surface;)V

    .line 3161
    :goto_0
    return p2

    .line 3158
    :cond_1
    const-string/jumbo v1, "WindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Failed to create surface control for "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 3159
    invoke-virtual {p1}, Landroid/view/Surface;->release()V

    goto :goto_0
.end method

.method private createTaskLocked(IIILcom/android/server/wm/AppWindowToken;Landroid/graphics/Rect;Landroid/content/res/Configuration;)Lcom/android/server/wm/Task;
    .locals 9
    .param p1, "taskId"    # I
    .param p2, "stackId"    # I
    .param p3, "userId"    # I
    .param p4, "atoken"    # Lcom/android/server/wm/AppWindowToken;
    .param p5, "bounds"    # Landroid/graphics/Rect;
    .param p6, "config"    # Landroid/content/res/Configuration;

    .prologue
    const/4 v8, 0x1

    const/4 v7, 0x0

    .line 3532
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/TaskStack;

    .line 3533
    .local v2, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v2, :cond_0

    .line 3534
    new-instance v1, Ljava/lang/IllegalArgumentException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "addAppToken: invalid stackId="

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 3536
    :cond_0
    const/4 v1, 0x2

    new-array v1, v1, [Ljava/lang/Object;

    invoke-static {p1}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v3

    aput-object v3, v1, v7

    invoke-static {p2}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v3

    aput-object v3, v1, v8

    const/16 v3, 0x7919

    invoke-static {v3, v1}, Landroid/util/EventLog;->writeEvent(I[Ljava/lang/Object;)I

    .line 3537
    new-instance v0, Lcom/android/server/wm/Task;

    move v1, p1

    move v3, p3

    move-object v4, p0

    move-object v5, p5

    move-object v6, p6

    invoke-direct/range {v0 .. v6}, Lcom/android/server/wm/Task;-><init>(ILcom/android/server/wm/TaskStack;ILcom/android/server/wm/WindowManagerService;Landroid/graphics/Rect;Landroid/content/res/Configuration;)V

    .line 3538
    .local v0, "task":Lcom/android/server/wm/Task;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1, v0}, Landroid/util/SparseArray;->put(ILjava/lang/Object;)V

    .line 3539
    iget-boolean v1, p4, Lcom/android/server/wm/AppWindowToken;->mLaunchTaskBehind:Z

    if-eqz v1, :cond_1

    move v1, v7

    :goto_0
    iget-boolean v3, p4, Lcom/android/server/wm/AppWindowToken;->showForAllUsers:Z

    invoke-virtual {v2, v0, v1, v3}, Lcom/android/server/wm/TaskStack;->addTask(Lcom/android/server/wm/Task;ZZ)V

    .line 3540
    return-object v0

    :cond_1
    move v1, v8

    .line 3539
    goto :goto_0
.end method

.method static dipToPixel(ILandroid/util/DisplayMetrics;)I
    .locals 2
    .param p0, "dip"    # I
    .param p1, "displayMetrics"    # Landroid/util/DisplayMetrics;

    .prologue
    .line 11392
    int-to-float v0, p0

    const/4 v1, 0x1

    invoke-static {v1, v0, p1}, Landroid/util/TypedValue;->applyDimension(IFLandroid/util/DisplayMetrics;)F

    move-result v0

    float-to-int v0, v0

    return v0
.end method

.method private displayReady(I)V
    .locals 3
    .param p1, "displayId"    # I

    .prologue
    .line 8247
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 8248
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 8249
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    .line 8250
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {v1, p1}, Lcom/android/server/wm/WindowAnimator;->addDisplayLocked(I)V

    .line 8251
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->initializeDisplayBaseInfo()V

    .line 8252
    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mTapDetector:Lcom/android/server/wm/TaskTapPointerEventListener;

    if-eqz v1, :cond_0

    .line 8253
    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mTapDetector:Lcom/android/server/wm/TaskTapPointerEventListener;

    invoke-virtual {v1}, Lcom/android/server/wm/TaskTapPointerEventListener;->init()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 8246
    return-void

    .line 8247
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method private doesAddToastWindowRequireToken(Ljava/lang/String;ILcom/android/server/wm/WindowState;)Z
    .locals 8
    .param p1, "packageName"    # Ljava/lang/String;
    .param p2, "callingUid"    # I
    .param p3, "attachedWindow"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/16 v7, 0x19

    const/4 v2, 0x1

    const/4 v3, 0x0

    .line 2274
    if-eqz p3, :cond_2

    .line 2275
    iget-object v4, p3, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_1

    .line 2276
    iget-object v4, p3, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget v4, v4, Lcom/android/server/wm/AppWindowToken;->targetSdk:I

    if-le v4, v7, :cond_0

    .line 2275
    :goto_0
    return v2

    :cond_0
    move v2, v3

    .line 2276
    goto :goto_0

    :cond_1
    move v2, v3

    .line 2275
    goto :goto_0

    .line 2280
    :cond_2
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v4}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v4

    .line 2282
    invoke-static {p2}, Landroid/os/UserHandle;->getUserId(I)I

    move-result v5

    .line 2281
    const/4 v6, 0x0

    .line 2280
    invoke-virtual {v4, p1, v6, v5}, Landroid/content/pm/PackageManager;->getApplicationInfoAsUser(Ljava/lang/String;II)Landroid/content/pm/ApplicationInfo;

    move-result-object v0

    .line 2283
    .local v0, "appInfo":Landroid/content/pm/ApplicationInfo;
    iget v4, v0, Landroid/content/pm/ApplicationInfo;->uid:I

    if-eq v4, p2, :cond_4

    .line 2284
    new-instance v2, Ljava/lang/SecurityException;

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Package "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string/jumbo v5, " not in UID "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-direct {v2, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 2290
    .end local v0    # "appInfo":Landroid/content/pm/ApplicationInfo;
    :catch_0
    move-exception v1

    .line 2294
    :cond_3
    return v3

    .line 2287
    .restart local v0    # "appInfo":Landroid/content/pm/ApplicationInfo;
    :cond_4
    iget v4, v0, Landroid/content/pm/ApplicationInfo;->targetSdkVersion:I
    :try_end_0
    .catch Landroid/content/pm/PackageManager$NameNotFoundException; {:try_start_0 .. :try_end_0} :catch_0

    if-le v4, v7, :cond_3

    .line 2288
    return v2
.end method

.method private static excludeWindowTypeFromTapOutTask(I)Z
    .locals 1
    .param p0, "windowType"    # I

    .prologue
    .line 1870
    sparse-switch p0, :sswitch_data_0

    .line 1876
    const/4 v0, 0x0

    return v0

    .line 1874
    :sswitch_0
    const/4 v0, 0x1

    return v0

    .line 1870
    nop

    :sswitch_data_0
    .sparse-switch
        0x7d0 -> :sswitch_0
        0x7dc -> :sswitch_0
        0x7e3 -> :sswitch_0
    .end sparse-switch
.end method

.method private findIdxBasedOnAppTokens(Lcom/android/server/wm/WindowState;)I
    .locals 5
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1128
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v2

    .line 1129
    .local v2, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v2}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    add-int/lit8 v0, v3, -0x1

    .local v0, "j":I
    :goto_0
    if-ltz v0, :cond_1

    .line 1130
    invoke-virtual {v2, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 1131
    .local v1, "wentry":Lcom/android/server/wm/WindowState;
    iget-object v3, v1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-ne v3, v4, :cond_0

    .line 1132
    return v0

    .line 1129
    :cond_0
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 1135
    .end local v1    # "wentry":Lcom/android/server/wm/WindowState;
    :cond_1
    const/4 v3, -0x1

    return v3
.end method

.method private findWindow(I)Lcom/android/server/wm/WindowState;
    .locals 8
    .param p1, "hashCode"    # I

    .prologue
    .line 7505
    const/4 v6, -0x1

    if-ne p1, v6, :cond_0

    .line 7507
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindow()Lcom/android/server/wm/WindowState;

    move-result-object v6

    return-object v6

    .line 7510
    :cond_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v7

    .line 7511
    :try_start_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v6}, Landroid/util/SparseArray;->size()I

    move-result v1

    .line 7512
    .local v1, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_0
    if-ge v0, v1, :cond_3

    .line 7513
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v6, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v6}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v5

    .line 7514
    .local v5, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v5}, Lcom/android/server/wm/WindowList;->size()I

    move-result v2

    .line 7515
    .local v2, "numWindows":I
    const/4 v4, 0x0

    .local v4, "winNdx":I
    :goto_1
    if-ge v4, v2, :cond_2

    .line 7516
    invoke-virtual {v5, v4}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 7517
    .local v3, "w":Lcom/android/server/wm/WindowState;
    invoke-static {v3}, Ljava/lang/System;->identityHashCode(Ljava/lang/Object;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v6

    if-ne v6, p1, :cond_1

    monitor-exit v7

    .line 7518
    return-object v3

    .line 7515
    :cond_1
    add-int/lit8 v4, v4, 0x1

    goto :goto_1

    .line 7512
    .end local v3    # "w":Lcom/android/server/wm/WindowState;
    :cond_2
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .end local v2    # "numWindows":I
    .end local v4    # "winNdx":I
    .end local v5    # "windows":Lcom/android/server/wm/WindowList;
    :cond_3
    monitor-exit v7

    .line 7524
    const/4 v6, 0x0

    return-object v6

    .line 7510
    .end local v0    # "displayNdx":I
    .end local v1    # "numDisplays":I
    :catchall_0
    move-exception v6

    monitor-exit v7

    throw v6
.end method

.method private finishPositioning()V
    .locals 3

    .prologue
    .line 7937
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 7938
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    if-eqz v0, :cond_0

    .line 7939
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    invoke-virtual {v0}, Lcom/android/server/wm/TaskPositioner;->unregister()V

    .line 7940
    const/4 v0, 0x0

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    .line 7941
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v2, 0x1

    invoke-virtual {v0, v2}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v1

    .line 7933
    return-void

    .line 7937
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method static fixScale(F)F
    .locals 1
    .param p0, "scale"    # F

    .prologue
    .line 5706
    const/4 v0, 0x0

    cmpg-float v0, p0, v0

    if-gez v0, :cond_1

    const/4 p0, 0x0

    .line 5708
    :cond_0
    :goto_0
    invoke-static {p0}, Ljava/lang/Math;->abs(F)F

    move-result v0

    return v0

    .line 5707
    :cond_1
    const/high16 v0, 0x41a00000    # 20.0f

    cmpl-float v0, p0, v0

    if-lez v0, :cond_0

    const/high16 p0, 0x41a00000    # 20.0f

    goto :goto_0
.end method

.method private getAppSpecifiedOrientation()I
    .locals 14

    .prologue
    .line 3703
    const/4 v7, -0x1

    .line 3704
    .local v7, "lastOrientation":I
    const/4 v3, 0x0

    .line 3705
    .local v3, "findingBehind":Z
    const/4 v6, 0x0

    .line 3706
    .local v6, "lastFullscreen":Z
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    .line 3707
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v1}, Lcom/android/server/wm/DisplayContent;->getTasks()Ljava/util/ArrayList;

    move-result-object v10

    .line 3708
    .local v10, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    const/4 v13, 0x3

    invoke-virtual {p0, v13}, Lcom/android/server/wm/WindowManagerService;->isStackVisibleLocked(I)Z

    move-result v13

    if-nez v13, :cond_1

    .line 3709
    const/4 v13, 0x2

    invoke-virtual {p0, v13}, Lcom/android/server/wm/WindowManagerService;->isStackVisibleLocked(I)Z

    move-result v5

    .line 3711
    :goto_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v13

    iget-object v13, v13, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v13}, Lcom/android/server/wm/DockedStackDividerController;->isMinimizedDock()Z

    move-result v2

    .line 3712
    .local v2, "dockMinimized":Z
    invoke-virtual {v10}, Ljava/util/ArrayList;->size()I

    move-result v13

    add-int/lit8 v9, v13, -0x1

    .end local v3    # "findingBehind":Z
    .end local v6    # "lastFullscreen":Z
    .local v9, "taskNdx":I
    :goto_1
    if-ltz v9, :cond_b

    .line 3713
    invoke-virtual {v10, v9}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v13

    check-cast v13, Lcom/android/server/wm/Task;

    iget-object v12, v13, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 3714
    .local v12, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual {v12}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v13

    add-int/lit8 v4, v13, -0x1

    .line 3715
    .local v4, "firstToken":I
    move v11, v4

    .local v11, "tokenNdx":I
    :goto_2
    if-ltz v11, :cond_a

    .line 3716
    invoke-virtual {v12, v11}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/AppWindowToken;

    .line 3722
    .local v0, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v3, :cond_0

    iget-boolean v13, v0, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    if-eqz v13, :cond_2

    .line 3728
    :cond_0
    if-ne v11, v4, :cond_4

    .line 3732
    const/4 v13, 0x3

    if-eq v7, v13, :cond_4

    if-eqz v6, :cond_4

    .line 3735
    return v7

    .line 3708
    .end local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .end local v2    # "dockMinimized":Z
    .end local v4    # "firstToken":I
    .end local v9    # "taskNdx":I
    .end local v11    # "tokenNdx":I
    .end local v12    # "tokens":Lcom/android/server/wm/AppTokenList;
    .restart local v3    # "findingBehind":Z
    .restart local v6    # "lastFullscreen":Z
    :cond_1
    const/4 v5, 0x1

    .local v5, "inMultiWindow":Z
    goto :goto_0

    .line 3722
    .end local v3    # "findingBehind":Z
    .end local v5    # "inMultiWindow":Z
    .end local v6    # "lastFullscreen":Z
    .restart local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .restart local v2    # "dockMinimized":Z
    .restart local v4    # "firstToken":I
    .restart local v9    # "taskNdx":I
    .restart local v11    # "tokenNdx":I
    .restart local v12    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_2
    iget-boolean v13, v0, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    if-eqz v13, :cond_0

    .line 3715
    :cond_3
    :goto_3
    add-int/lit8 v11, v11, -0x1

    goto :goto_2

    .line 3740
    :cond_4
    iget-boolean v13, v0, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    if-nez v13, :cond_3

    .line 3749
    if-eqz v5, :cond_5

    iget-object v13, v0, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    invoke-virtual {v13}, Lcom/android/server/wm/Task;->isHomeTask()Z

    move-result v13

    if-eqz v13, :cond_3

    if-eqz v2, :cond_3

    .line 3753
    :cond_5
    if-nez v11, :cond_6

    .line 3755
    iget v7, v0, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I

    .line 3758
    :cond_6
    iget v8, v0, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I

    .line 3762
    .local v8, "or":I
    iget-boolean v6, v0, Lcom/android/server/wm/AppWindowToken;->appFullscreen:Z

    .line 3763
    .local v6, "lastFullscreen":Z
    if-eqz v6, :cond_7

    const/4 v13, 0x3

    if-eq v8, v13, :cond_7

    .line 3766
    return v8

    .line 3769
    :cond_7
    const/4 v13, -0x1

    if-eq v8, v13, :cond_8

    const/4 v13, 0x3

    if-eq v8, v13, :cond_8

    .line 3772
    return v8

    .line 3774
    :cond_8
    const/4 v13, 0x3

    if-ne v8, v13, :cond_9

    const/4 v13, 0x1

    :goto_4
    or-int/2addr v3, v13

    .local v3, "findingBehind":Z
    goto :goto_3

    .end local v3    # "findingBehind":Z
    :cond_9
    const/4 v13, 0x0

    goto :goto_4

    .line 3712
    .end local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .end local v6    # "lastFullscreen":Z
    .end local v8    # "or":I
    :cond_a
    add-int/lit8 v9, v9, -0x1

    goto :goto_1

    .line 3783
    .end local v4    # "firstToken":I
    .end local v11    # "tokenNdx":I
    .end local v12    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_b
    if-eqz v5, :cond_c

    const/4 v13, -0x1

    :goto_5
    return v13

    :cond_c
    iget v13, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    goto :goto_5
.end method

.method private getFocusedWindow()Lcom/android/server/wm/WindowState;
    .locals 2

    .prologue
    .line 8111
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 8112
    :try_start_0
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindowLocked()Lcom/android/server/wm/WindowState;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v1

    monitor-exit v0

    return-object v1

    .line 8111
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method private getFocusedWindowLocked()Lcom/android/server/wm/WindowState;
    .locals 1

    .prologue
    .line 8117
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    return-object v0
.end method

.method private getForcedDisplayDensityForUserLocked(I)I
    .locals 6
    .param p1, "userId"    # I

    .prologue
    const/4 v5, 0x0

    const/4 v4, 0x0

    .line 9353
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v2}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v2

    .line 9354
    const-string/jumbo v3, "display_density_forced"

    .line 9353
    invoke-static {v2, v3, p1}, Landroid/provider/Settings$Secure;->getStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;I)Ljava/lang/String;

    move-result-object v0

    .line 9355
    .local v0, "densityStr":Ljava/lang/String;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Ljava/lang/String;->length()I

    move-result v2

    if-nez v2, :cond_1

    .line 9356
    :cond_0
    const-string/jumbo v2, "ro.config.density_override"

    invoke-static {v2, v5}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    .line 9358
    :cond_1
    if-eqz v0, :cond_2

    invoke-virtual {v0}, Ljava/lang/String;->length()I

    move-result v2

    if-lez v2, :cond_2

    .line 9360
    :try_start_0
    invoke-static {v0}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I
    :try_end_0
    .catch Ljava/lang/NumberFormatException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v2

    return v2

    .line 9361
    :catch_0
    move-exception v1

    .line 9364
    :cond_2
    return v4
.end method

.method private getNonDecorInsetsLocked(Landroid/graphics/Rect;)V
    .locals 5
    .param p1, "outInsets"    # Landroid/graphics/Rect;

    .prologue
    .line 11430
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v0

    .line 11431
    .local v0, "di":Landroid/view/DisplayInfo;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v2, v0, Landroid/view/DisplayInfo;->rotation:I

    iget v3, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v4, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    invoke-interface {v1, v2, v3, v4, p1}, Landroid/view/WindowManagerPolicy;->getNonDecorInsetsLw(IIILandroid/graphics/Rect;)V

    .line 11429
    return-void
.end method

.method static getPropertyInt([Ljava/lang/String;IIILandroid/util/DisplayMetrics;)I
    .locals 4
    .param p0, "tokens"    # [Ljava/lang/String;
    .param p1, "index"    # I
    .param p2, "defUnits"    # I
    .param p3, "defDps"    # I
    .param p4, "dm"    # Landroid/util/DisplayMetrics;

    .prologue
    .line 10266
    array-length v3, p0

    if-ge p1, v3, :cond_0

    .line 10267
    aget-object v1, p0, p1

    .line 10268
    .local v1, "str":Ljava/lang/String;
    if-eqz v1, :cond_0

    invoke-virtual {v1}, Ljava/lang/String;->length()I

    move-result v3

    if-lez v3, :cond_0

    .line 10270
    :try_start_0
    invoke-static {v1}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_0

    move-result v2

    .line 10271
    .local v2, "val":I
    return v2

    .line 10272
    .end local v2    # "val":I
    :catch_0
    move-exception v0

    .line 10276
    .end local v1    # "str":Ljava/lang/String;
    :cond_0
    if-nez p2, :cond_1

    .line 10277
    return p3

    .line 10279
    :cond_1
    int-to-float v3, p3

    invoke-static {p2, v3, p4}, Landroid/util/TypedValue;->applyDimension(IFLandroid/util/DisplayMetrics;)F

    move-result v3

    float-to-int v2, v3

    .line 10280
    .restart local v2    # "val":I
    return v2
.end method

.method private getTokenWindowsOnDisplay(Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowList;
    .locals 5
    .param p1, "token"    # Lcom/android/server/wm/WindowToken;
    .param p2, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    .line 1145
    new-instance v3, Lcom/android/server/wm/WindowList;

    invoke-direct {v3}, Lcom/android/server/wm/WindowList;-><init>()V

    .line 1146
    .local v3, "windowList":Lcom/android/server/wm/WindowList;
    iget-object v4, p1, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 1147
    .local v0, "count":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_1

    .line 1148
    iget-object v4, p1, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 1149
    .local v2, "win":Lcom/android/server/wm/WindowState;
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v4

    if-ne v4, p2, :cond_0

    .line 1150
    invoke-virtual {v3, v2}, Lcom/android/server/wm/WindowList;->add(Ljava/lang/Object;)Z

    .line 1147
    :cond_0
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 1153
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    :cond_1
    return-object v3
.end method

.method private handleDisplayChangedLocked(I)V
    .locals 2
    .param p1, "displayId"    # I

    .prologue
    .line 11228
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 11229
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    .line 11230
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->updateDisplayInfo()V

    .line 11232
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V

    .line 11227
    return-void
.end method

.method private handleDisplayRemovedLocked(I)V
    .locals 2
    .param p1, "displayId"    # I

    .prologue
    .line 11205
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 11206
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_1

    .line 11207
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->isAnimating()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 11208
    const/4 v1, 0x1

    iput-boolean v1, v0, Lcom/android/server/wm/DisplayContent;->mDeferredRemoval:Z

    .line 11209
    return-void

    .line 11212
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->delete(I)V

    .line 11213
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->close()V

    .line 11214
    if-nez p1, :cond_1

    .line 11215
    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mTapDetector:Lcom/android/server/wm/TaskTapPointerEventListener;

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->unregisterPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 11216
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->unregisterPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 11219
    :cond_1
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {v1, p1}, Lcom/android/server/wm/WindowAnimator;->removeDisplayLocked(I)V

    .line 11220
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V

    .line 11204
    return-void
.end method

.method private handleTapOutsideTask(Lcom/android/server/wm/DisplayContent;II)V
    .locals 8
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "x"    # I
    .param p3, "y"    # I

    .prologue
    .line 7865
    const/4 v2, -0x1

    .line 7866
    .local v2, "taskId":I
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 7867
    :try_start_0
    invoke-virtual {p1, p2, p3}, Lcom/android/server/wm/DisplayContent;->findTaskForControlPoint(II)Lcom/android/server/wm/Task;

    move-result-object v1

    .line 7868
    .local v1, "task":Lcom/android/server/wm/Task;
    if-eqz v1, :cond_2

    .line 7870
    invoke-virtual {v1}, Lcom/android/server/wm/Task;->getTopVisibleAppMainWindow()Lcom/android/server/wm/WindowState;

    move-result-object v3

    int-to-float v5, p2

    int-to-float v6, p3

    const/4 v7, 0x1

    .line 7869
    invoke-direct {p0, v3, v7, v5, v6}, Lcom/android/server/wm/WindowManagerService;->startPositioningLocked(Lcom/android/server/wm/WindowState;ZFF)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    if-nez v3, :cond_0

    monitor-exit v4

    .line 7871
    return-void

    .line 7873
    :cond_0
    :try_start_1
    iget v2, v1, Lcom/android/server/wm/Task;->mTaskId:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :goto_0
    monitor-exit v4

    .line 7878
    if-ltz v2, :cond_1

    .line 7880
    :try_start_2
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    invoke-interface {v3, v2}, Landroid/app/IActivityManager;->setFocusedTask(I)V
    :try_end_2
    .catch Landroid/os/RemoteException; {:try_start_2 .. :try_end_2} :catch_0

    .line 7864
    :cond_1
    :goto_1
    return-void

    .line 7875
    :cond_2
    :try_start_3
    invoke-virtual {p1, p2, p3}, Lcom/android/server/wm/DisplayContent;->taskIdFromPoint(II)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    move-result v2

    goto :goto_0

    .line 7866
    .end local v1    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 7881
    .restart local v1    # "task":Lcom/android/server/wm/Task;
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_1
.end method

.method private indexOfWinInWindowList(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowList;)I
    .locals 3
    .param p1, "targetWin"    # Lcom/android/server/wm/WindowState;
    .param p2, "windows"    # Lcom/android/server/wm/WindowList;

    .prologue
    .line 1163
    invoke-virtual {p2}, Lcom/android/server/wm/WindowList;->size()I

    move-result v2

    add-int/lit8 v0, v2, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_2

    .line 1164
    invoke-virtual {p2, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 1165
    .local v1, "w":Lcom/android/server/wm/WindowState;
    if-ne v1, p1, :cond_0

    .line 1166
    return v0

    .line 1168
    :cond_0
    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowList;->isEmpty()Z

    move-result v2

    if-nez v2, :cond_1

    .line 1169
    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-direct {p0, p1, v2}, Lcom/android/server/wm/WindowManagerService;->indexOfWinInWindowList(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowList;)I

    move-result v2

    if-ltz v2, :cond_1

    .line 1170
    return v0

    .line 1163
    :cond_1
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 1174
    .end local v1    # "w":Lcom/android/server/wm/WindowState;
    :cond_2
    const/4 v2, -0x1

    return v2
.end method

.method private initPolicy()V
    .locals 4

    .prologue
    .line 952
    invoke-static {}, Lcom/android/server/UiThread;->getHandler()Landroid/os/Handler;

    move-result-object v0

    new-instance v1, Lcom/android/server/wm/WindowManagerService$4;

    invoke-direct {v1, p0}, Lcom/android/server/wm/WindowManagerService$4;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    .line 959
    const-wide/16 v2, 0x0

    .line 952
    invoke-virtual {v0, v1, v2, v3}, Landroid/os/Handler;->runWithScissors(Ljava/lang/Runnable;J)Z

    .line 951
    return-void
.end method

.method private isSystemSecure()Z
    .locals 3

    .prologue
    .line 7213
    const-string/jumbo v0, "1"

    const-string/jumbo v1, "ro.secure"

    const-string/jumbo v2, "1"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7214
    const-string/jumbo v0, "0"

    const-string/jumbo v1, "ro.debuggable"

    const-string/jumbo v2, "0"

    invoke-static {v1, v2}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v0, v1}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    .line 7213
    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method private judgeSingleHandSwitchBySize()Z
    .locals 2

    .prologue
    .line 11901
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    const v1, #android:bool@single_hand_mode#t

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v0

    return v0
.end method

.method static logSurface(Landroid/view/SurfaceControl;Ljava/lang/String;Ljava/lang/String;)V
    .locals 3
    .param p0, "s"    # Landroid/view/SurfaceControl;
    .param p1, "title"    # Ljava/lang/String;
    .param p2, "msg"    # Ljava/lang/String;

    .prologue
    .line 2693
    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "  SURFACE "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, ": "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, " / "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    .line 2694
    .local v0, "str":Ljava/lang/String;
    const-string/jumbo v1, "WindowManager"

    invoke-static {v1, v0}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 2692
    return-void
.end method

.method static logSurface(Lcom/android/server/wm/WindowState;Ljava/lang/String;Z)V
    .locals 3
    .param p0, "w"    # Lcom/android/server/wm/WindowState;
    .param p1, "msg"    # Ljava/lang/String;
    .param p2, "withStackTrace"    # Z

    .prologue
    .line 2684
    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "  SURFACE "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, ": "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    .line 2685
    .local v0, "str":Ljava/lang/String;
    if-eqz p2, :cond_0

    .line 2686
    sget-object v1, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    invoke-static {v1, v0}, Lcom/android/server/wm/WindowManagerService;->logWithStack(Ljava/lang/String;Ljava/lang/String;)V

    .line 2683
    :goto_0
    return-void

    .line 2688
    :cond_0
    const-string/jumbo v1, "WindowManager"

    invoke-static {v1, v0}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method static logWithStack(Ljava/lang/String;Ljava/lang/String;)V
    .locals 1
    .param p0, "tag"    # Ljava/lang/String;
    .param p1, "s"    # Ljava/lang/String;

    .prologue
    .line 2698
    const/4 v0, 0x0

    .line 2703
    .local v0, "e":Ljava/lang/RuntimeException;
    invoke-static {p0, p1, v0}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 2697
    return-void
.end method

.method public static main(Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZZ)Lcom/android/server/wm/WindowManagerService;
    .locals 8
    .param p0, "context"    # Landroid/content/Context;
    .param p1, "im"    # Lcom/android/server/input/InputManagerService;
    .param p2, "haveInputMethods"    # Z
    .param p3, "showBootMsgs"    # Z
    .param p4, "onlyCore"    # Z

    .prologue
    .line 940
    const/4 v0, 0x1

    new-array v1, v0, [Lcom/android/server/wm/WindowManagerService;

    .line 941
    .local v1, "holder":[Lcom/android/server/wm/WindowManagerService;
    invoke-static {}, Lcom/android/server/DisplayThread;->getHandler()Landroid/os/Handler;

    move-result-object v7

    new-instance v0, Lcom/android/server/wm/WindowManagerService$3;

    move-object v2, p0

    move-object v3, p1

    move v4, p2

    move v5, p3

    move v6, p4

    invoke-direct/range {v0 .. v6}, Lcom/android/server/wm/WindowManagerService$3;-><init>([Lcom/android/server/wm/WindowManagerService;Landroid/content/Context;Lcom/android/server/input/InputManagerService;ZZZ)V

    .line 947
    const-wide/16 v2, 0x0

    .line 941
    invoke-virtual {v7, v0, v2, v3}, Landroid/os/Handler;->runWithScissors(Ljava/lang/Runnable;J)Z

    .line 948
    const/4 v0, 0x0

    aget-object v0, v1, v0

    return-object v0
.end method

.method private newDisplayContentLocked(Landroid/view/Display;)Lcom/android/server/wm/DisplayContent;
    .locals 7
    .param p1, "display"    # Landroid/view/Display;

    .prologue
    .line 11104
    new-instance v0, Lcom/android/server/wm/DisplayContent;

    invoke-direct {v0, p1, p0}, Lcom/android/server/wm/DisplayContent;-><init>(Landroid/view/Display;Lcom/android/server/wm/WindowManagerService;)V

    .line 11105
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {p1}, Landroid/view/Display;->getDisplayId()I

    move-result v1

    .line 11107
    .local v1, "displayId":I
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v4, v1, v0}, Landroid/util/SparseArray;->put(ILjava/lang/Object;)V

    .line 11109
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v2

    .line 11110
    .local v2, "displayInfo":Landroid/view/DisplayInfo;
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    .line 11111
    .local v3, "rect":Landroid/graphics/Rect;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

    iget-object v5, v2, Landroid/view/DisplayInfo;->name:Ljava/lang/String;

    iget-object v6, v2, Landroid/view/DisplayInfo;->uniqueId:Ljava/lang/String;

    invoke-virtual {v4, v5, v6, v3}, Lcom/android/server/wm/DisplaySettings;->getOverscanLocked(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;)V

    .line 11112
    iget v4, v3, Landroid/graphics/Rect;->left:I

    iput v4, v2, Landroid/view/DisplayInfo;->overscanLeft:I

    .line 11113
    iget v4, v3, Landroid/graphics/Rect;->top:I

    iput v4, v2, Landroid/view/DisplayInfo;->overscanTop:I

    .line 11114
    iget v4, v3, Landroid/graphics/Rect;->right:I

    iput v4, v2, Landroid/view/DisplayInfo;->overscanRight:I

    .line 11115
    iget v4, v3, Landroid/graphics/Rect;->bottom:I

    iput v4, v2, Landroid/view/DisplayInfo;->overscanBottom:I

    .line 11116
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManagerInternal:Landroid/hardware/display/DisplayManagerInternal;

    invoke-virtual {v4, v1, v2}, Landroid/hardware/display/DisplayManagerInternal;->setDisplayInfoOverrideFromWindowManager(ILandroid/view/DisplayInfo;)V

    .line 11117
    invoke-direct {p0, v0}, Lcom/android/server/wm/WindowManagerService;->configureDisplayPolicyLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 11120
    if-nez v1, :cond_0

    .line 11121
    new-instance v4, Lcom/android/server/wm/TaskTapPointerEventListener;

    invoke-direct {v4, p0, v0}, Lcom/android/server/wm/TaskTapPointerEventListener;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V

    iput-object v4, v0, Lcom/android/server/wm/DisplayContent;->mTapDetector:Lcom/android/server/wm/TaskTapPointerEventListener;

    .line 11122
    iget-object v4, v0, Lcom/android/server/wm/DisplayContent;->mTapDetector:Lcom/android/server/wm/TaskTapPointerEventListener;

    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->registerPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 11123
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->registerPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 11126
    :cond_0
    return-object v0
.end method

.method private notifyFocusChanged()V
    .locals 5

    .prologue
    .line 7491
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 7492
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->isEmpty()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    if-eqz v3, :cond_0

    monitor-exit v4

    .line 7493
    return-void

    .line 7495
    :cond_0
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->size()I

    move-result v3

    new-array v2, v3, [Lcom/android/server/wm/WindowManagerService$WindowChangeListener;

    .line 7496
    .local v2, "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->toArray([Ljava/lang/Object;)[Ljava/lang/Object;

    move-result-object v2

    .end local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    check-cast v2, [Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .restart local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    monitor-exit v4

    .line 7498
    array-length v0, v2

    .line 7499
    .local v0, "N":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_1

    .line 7500
    aget-object v3, v2, v1

    invoke-interface {v3}, Lcom/android/server/wm/WindowManagerService$WindowChangeListener;->focusChanged()V

    .line 7499
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 7491
    .end local v0    # "N":I
    .end local v1    # "i":I
    .end local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 7489
    .restart local v0    # "N":I
    .restart local v1    # "i":I
    .restart local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :cond_1
    return-void
.end method

.method private notifyWindowsChanged()V
    .locals 5

    .prologue
    .line 7476
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 7477
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->isEmpty()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    if-eqz v3, :cond_0

    monitor-exit v4

    .line 7478
    return-void

    .line 7480
    :cond_0
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->size()I

    move-result v3

    new-array v2, v3, [Lcom/android/server/wm/WindowManagerService$WindowChangeListener;

    .line 7481
    .local v2, "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->toArray([Ljava/lang/Object;)[Ljava/lang/Object;

    move-result-object v2

    .end local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    check-cast v2, [Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .restart local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    monitor-exit v4

    .line 7483
    array-length v0, v2

    .line 7484
    .local v0, "N":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_1

    .line 7485
    aget-object v3, v2, v1

    invoke-interface {v3}, Lcom/android/server/wm/WindowManagerService$WindowChangeListener;->windowsChanged()V

    .line 7484
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 7476
    .end local v0    # "N":I
    .end local v1    # "i":I
    .end local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 7474
    .restart local v0    # "N":I
    .restart local v1    # "i":I
    .restart local v2    # "windowChangeListeners":[Lcom/android/server/wm/WindowManagerService$WindowChangeListener;
    :cond_1
    return-void
.end method

.method private onConfigurationChanged()[I
    .locals 6

    .prologue
    .line 3943
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy;->onConfigurationChanged()V

    .line 3945
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 3946
    .local v0, "defaultDisplayContent":Lcom/android/server/wm/DisplayContent;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v4, v0}, Lcom/android/server/wm/DisplayContentList;->contains(Ljava/lang/Object;)Z

    move-result v4

    if-nez v4, :cond_0

    .line 3950
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v4, v0}, Lcom/android/server/wm/DisplayContentList;->add(Ljava/lang/Object;)Z

    .line 3952
    :cond_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v4}, Lcom/android/server/wm/DisplayContentList;->size()I

    move-result v4

    add-int/lit8 v1, v4, -0x1

    .local v1, "i":I
    :goto_0
    if-ltz v1, :cond_1

    .line 3953
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v4, v1}, Lcom/android/server/wm/DisplayContentList;->remove(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/DisplayContent;

    invoke-direct {p0, v4}, Lcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 3952
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .line 3956
    :cond_1
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v4

    invoke-virtual {v4}, Lcom/android/server/wm/DockedStackDividerController;->onConfigurationChanged()V

    .line 3957
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mChangedStackList:Ljava/util/ArrayList;

    invoke-virtual {v4}, Ljava/util/ArrayList;->clear()V

    .line 3958
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v4}, Landroid/util/SparseArray;->size()I

    move-result v4

    add-int/lit8 v3, v4, -0x1

    .local v3, "stackNdx":I
    :goto_1
    if-ltz v3, :cond_3

    .line 3959
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v4, v3}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/TaskStack;

    .line 3960
    .local v2, "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual {v2}, Lcom/android/server/wm/TaskStack;->onConfigurationChanged()Z

    move-result v4

    if-eqz v4, :cond_2

    .line 3961
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mChangedStackList:Ljava/util/ArrayList;

    iget v5, v2, Lcom/android/server/wm/TaskStack;->mStackId:I

    invoke-static {v5}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v5

    invoke-virtual {v4, v5}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 3958
    :cond_2
    add-int/lit8 v3, v3, -0x1

    goto :goto_1

    .line 3964
    .end local v2    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_3
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mChangedStackList:Ljava/util/ArrayList;

    invoke-virtual {v4}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v4

    if-eqz v4, :cond_4

    .line 3965
    const/4 v4, 0x0

    .line 3964
    :goto_2
    return-object v4

    .line 3965
    :cond_4
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mChangedStackList:Ljava/util/ArrayList;

    invoke-static {v4}, Lcom/android/internal/util/ArrayUtils;->convertToIntArray(Ljava/util/List;)[I

    move-result-object v4

    goto :goto_2
.end method

.method private placeWindowAfter(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V
    .locals 3
    .param p1, "pos"    # Lcom/android/server/wm/WindowState;
    .param p2, "window"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1102
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v1

    .line 1103
    .local v1, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v1, p1}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v0

    .line 1107
    .local v0, "i":I
    add-int/lit8 v2, v0, 0x1

    invoke-virtual {v1, v2, p2}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1108
    const/4 v2, 0x1

    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1101
    return-void
.end method

.method private placeWindowBefore(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V
    .locals 5
    .param p1, "pos"    # Lcom/android/server/wm/WindowState;
    .param p2, "window"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1112
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v1

    .line 1113
    .local v1, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v1, p1}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v0

    .line 1117
    .local v0, "i":I
    if-gez v0, :cond_0

    .line 1118
    const-string/jumbo v2, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "placeWindowBefore: Unable to find "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string/jumbo v4, " in "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 1119
    const/4 v0, 0x0

    .line 1121
    :cond_0
    invoke-virtual {v1, v0, p2}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1122
    const/4 v2, 0x1

    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1111
    return-void
.end method

.method private prepareFreezingAllTaskBounds()V
    .locals 5

    .prologue
    .line 3933
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v4}, Landroid/util/SparseArray;->size()I

    move-result v4

    add-int/lit8 v0, v4, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_1

    .line 3934
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v4, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v4}, Lcom/android/server/wm/DisplayContent;->getStacks()Ljava/util/ArrayList;

    move-result-object v3

    .line 3935
    .local v3, "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    invoke-virtual {v3}, Ljava/util/ArrayList;->size()I

    move-result v4

    add-int/lit8 v2, v4, -0x1

    .local v2, "stackNdx":I
    :goto_1
    if-ltz v2, :cond_0

    .line 3936
    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;

    .line 3937
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->prepareFreezingTaskBounds()V

    .line 3935
    add-int/lit8 v2, v2, -0x1

    goto :goto_1

    .line 3933
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_0
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 3932
    .end local v2    # "stackNdx":I
    .end local v3    # "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    :cond_1
    return-void
.end method

.method private prepareNoneTransitionForRelaunching(Lcom/android/server/wm/AppWindowToken;)V
    .locals 2
    .param p1, "atoken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/4 v1, 0x0

    .line 2333
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, p1}, Landroid/util/ArraySet;->contains(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_1

    .line 2328
    :cond_0
    :goto_0
    return-void

    .line 2333
    :cond_1
    invoke-virtual {p1}, Lcom/android/server/wm/AppWindowToken;->isRelaunching()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 2334
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, p1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 2335
    invoke-virtual {p0, v1, v1}, Lcom/android/server/wm/WindowManagerService;->prepareAppTransition(IZ)V

    .line 2336
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->executeAppTransition()V

    goto :goto_0
.end method

.method private prepareWindowReplacementTransition(Lcom/android/server/wm/AppWindowToken;)Z
    .locals 10
    .param p1, "atoken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/4 v9, 0x1

    const/4 v5, 0x0

    .line 2301
    invoke-virtual {p1}, Lcom/android/server/wm/AppWindowToken;->clearAllDrawn()V

    .line 2302
    const/4 v3, 0x0

    .line 2303
    .local v3, "replacedWindow":Lcom/android/server/wm/WindowState;
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v4

    add-int/lit8 v2, v4, -0x1

    .end local v3    # "replacedWindow":Lcom/android/server/wm/WindowState;
    .local v2, "i":I
    :goto_0
    if-ltz v2, :cond_1

    if-nez v3, :cond_1

    .line 2304
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4, v2}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowState;

    .line 2305
    .local v0, "candidate":Lcom/android/server/wm/WindowState;
    iget-boolean v4, v0, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    if-eqz v4, :cond_0

    iget-boolean v4, v0, Lcom/android/server/wm/WindowState;->mWillReplaceWindow:Z

    if-eqz v4, :cond_0

    .line 2306
    iget-boolean v4, v0, Lcom/android/server/wm/WindowState;->mAnimateReplacingWindow:Z

    .line 2305
    if-eqz v4, :cond_0

    .line 2307
    move-object v3, v0

    .line 2303
    :cond_0
    add-int/lit8 v2, v2, -0x1

    goto :goto_0

    .line 2310
    .end local v0    # "candidate":Lcom/android/server/wm/WindowState;
    :cond_1
    if-nez v3, :cond_2

    .line 2313
    return v5

    .line 2317
    :cond_2
    iget-object v1, v3, Lcom/android/server/wm/WindowState;->mVisibleFrame:Landroid/graphics/Rect;

    .line 2320
    .local v1, "frame":Landroid/graphics/Rect;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v4, p1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 2321
    const/16 v4, 0x12

    invoke-virtual {p0, v4, v9}, Lcom/android/server/wm/WindowManagerService;->prepareAppTransition(IZ)V

    .line 2322
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    iget v5, v1, Landroid/graphics/Rect;->left:I

    iget v6, v1, Landroid/graphics/Rect;->top:I

    .line 2323
    invoke-virtual {v1}, Landroid/graphics/Rect;->width()I

    move-result v7

    invoke-virtual {v1}, Landroid/graphics/Rect;->height()I

    move-result v8

    .line 2322
    invoke-virtual {v4, v5, v6, v7, v8}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionClipReveal(IIII)V

    .line 2324
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->executeAppTransition()V

    .line 2325
    return v9
.end method

.method private final reAddAppWindowsLocked(Lcom/android/server/wm/DisplayContent;ILcom/android/server/wm/WindowToken;)I
    .locals 5
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "index"    # I
    .param p3, "token"    # Lcom/android/server/wm/WindowToken;

    .prologue
    .line 5040
    iget-object v4, p3, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 5041
    .local v0, "NW":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_2

    .line 5042
    iget-object v4, p3, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 5043
    .local v2, "win":Lcom/android/server/wm/WindowState;
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 5044
    .local v3, "winDisplayContent":Lcom/android/server/wm/DisplayContent;
    if-eq v3, p1, :cond_0

    if-nez v3, :cond_1

    .line 5045
    :cond_0
    iput-object p1, v2, Lcom/android/server/wm/WindowState;->mDisplayContent:Lcom/android/server/wm/DisplayContent;

    .line 5046
    invoke-direct {p0, p2, v2}, Lcom/android/server/wm/WindowManagerService;->reAddWindowLocked(ILcom/android/server/wm/WindowState;)I

    move-result p2

    .line 5041
    :cond_1
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 5049
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    .end local v3    # "winDisplayContent":Lcom/android/server/wm/DisplayContent;
    :cond_2
    return p2
.end method

.method private final reAddWindowLocked(ILcom/android/server/wm/WindowState;)I
    .locals 7
    .param p1, "index"    # I
    .param p2, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v6, 0x0

    .line 5007
    invoke-virtual {p2}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v4

    .line 5009
    .local v4, "windows":Lcom/android/server/wm/WindowList;
    iget-object v5, p2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 5010
    .local v0, "NCW":I
    const/4 v3, 0x0

    .line 5011
    .local v3, "winAdded":Z
    const/4 v2, 0x0

    .local v2, "j":I
    :goto_0
    if-ge v2, v0, :cond_1

    .line 5012
    iget-object v5, p2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v5, v2}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 5013
    .local v1, "cwin":Lcom/android/server/wm/WindowState;
    if-nez v3, :cond_0

    iget v5, v1, Lcom/android/server/wm/WindowState;->mSubLayer:I

    if-ltz v5, :cond_0

    .line 5016
    iput-boolean v6, p2, Lcom/android/server/wm/WindowState;->mRebuilding:Z

    .line 5017
    invoke-virtual {v4, p1, p2}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 5018
    add-int/lit8 p1, p1, 0x1

    .line 5019
    const/4 v3, 0x1

    .line 5023
    :cond_0
    iput-boolean v6, v1, Lcom/android/server/wm/WindowState;->mRebuilding:Z

    .line 5024
    invoke-virtual {v4, p1, v1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 5025
    add-int/lit8 p1, p1, 0x1

    .line 5011
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .line 5027
    .end local v1    # "cwin":Lcom/android/server/wm/WindowState;
    :cond_1
    if-nez v3, :cond_2

    .line 5030
    iput-boolean v6, p2, Lcom/android/server/wm/WindowState;->mRebuilding:Z

    .line 5031
    invoke-virtual {v4, p1, p2}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 5032
    add-int/lit8 p1, p1, 0x1

    .line 5034
    :cond_2
    const/4 v5, 0x1

    iput-boolean v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 5035
    return p1
.end method

.method private reAddWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;)V
    .locals 3
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v2, 0x0

    .line 1690
    invoke-direct {p0, p1, v2}, Lcom/android/server/wm/WindowManagerService;->addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 1694
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v0

    .line 1695
    .local v0, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v0, p1}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v1

    .line 1696
    .local v1, "wpos":I
    if-ltz v1, :cond_0

    .line 1698
    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->remove(I)Ljava/lang/Object;

    .line 1699
    const/4 v2, 0x1

    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1700
    invoke-direct {p0, v1, p1}, Lcom/android/server/wm/WindowManagerService;->reAddWindowLocked(ILcom/android/server/wm/WindowState;)I

    .line 1689
    :cond_0
    return-void
.end method

.method private readForcedDisplayPropertiesLocked(Lcom/android/server/wm/DisplayContent;)V
    .locals 12
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    const/16 v11, 0x2c

    const/4 v9, 0x0

    const/4 v10, 0x0

    .line 9190
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v7}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v7

    .line 9191
    const-string/jumbo v8, "display_size_forced"

    .line 9190
    invoke-static {v7, v8}, Landroid/provider/Settings$Global;->getString(Landroid/content/ContentResolver;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .line 9192
    .local v5, "sizeStr":Ljava/lang/String;
    if-eqz v5, :cond_0

    invoke-virtual {v5}, Ljava/lang/String;->length()I

    move-result v7

    if-nez v7, :cond_1

    .line 9193
    :cond_0
    const-string/jumbo v7, "ro.config.size_override"

    invoke-static {v7, v9}, Landroid/os/SystemProperties;->get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;

    move-result-object v5

    .line 9195
    :cond_1
    if-eqz v5, :cond_3

    invoke-virtual {v5}, Ljava/lang/String;->length()I

    move-result v7

    if-lez v7, :cond_3

    .line 9196
    invoke-virtual {v5, v11}, Ljava/lang/String;->indexOf(I)I

    move-result v4

    .line 9197
    .local v4, "pos":I
    if-lez v4, :cond_3

    invoke-virtual {v5, v11}, Ljava/lang/String;->lastIndexOf(I)I

    move-result v7

    if-ne v7, v4, :cond_3

    .line 9200
    const/4 v7, 0x0

    :try_start_0
    invoke-virtual {v5, v7, v4}, Ljava/lang/String;->substring(II)Ljava/lang/String;

    move-result-object v7

    invoke-static {v7}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I

    move-result v6

    .line 9201
    .local v6, "width":I
    add-int/lit8 v7, v4, 0x1

    invoke-virtual {v5, v7}, Ljava/lang/String;->substring(I)Ljava/lang/String;

    move-result-object v7

    invoke-static {v7}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;)I

    move-result v2

    .line 9202
    .local v2, "height":I
    iget v7, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    if-ne v7, v6, :cond_2

    .line 9203
    iget v7, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    if-eq v7, v2, :cond_3

    .line 9204
    :cond_2
    const-string/jumbo v7, "WindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v9, "FORCED DISPLAY SIZE: "

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v6}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v8

    const-string/jumbo v9, "x"

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9205
    iput v6, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    .line 9206
    iput v2, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I
    :try_end_0
    .catch Ljava/lang/NumberFormatException; {:try_start_0 .. :try_end_0} :catch_0

    .line 9214
    .end local v2    # "height":I
    .end local v4    # "pos":I
    .end local v6    # "width":I
    :cond_3
    :goto_0
    iget v7, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    invoke-direct {p0, v7}, Lcom/android/server/wm/WindowManagerService;->getForcedDisplayDensityForUserLocked(I)I

    move-result v0

    .line 9215
    .local v0, "density":I
    if-eqz v0, :cond_4

    .line 9216
    iput v0, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayDensity:I

    .line 9220
    :cond_4
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v7}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v7

    .line 9221
    const-string/jumbo v8, "display_scaling_force"

    .line 9220
    invoke-static {v7, v8, v10}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v3

    .line 9222
    .local v3, "mode":I
    if-eqz v3, :cond_5

    .line 9223
    const-string/jumbo v7, "WindowManager"

    const-string/jumbo v8, "FORCED DISPLAY SCALING DISABLED"

    invoke-static {v7, v8}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9224
    const/4 v7, 0x1

    iput-boolean v7, p1, Lcom/android/server/wm/DisplayContent;->mDisplayScalingDisabled:Z

    .line 9188
    :cond_5
    return-void

    .line 9208
    .end local v0    # "density":I
    .end local v3    # "mode":I
    .restart local v4    # "pos":I
    :catch_0
    move-exception v1

    .local v1, "ex":Ljava/lang/NumberFormatException;
    goto :goto_0
.end method

.method private rebuildAppWindowListLocked(Lcom/android/server/wm/DisplayContent;)V
    .locals 29
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    .line 9496
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v23

    .line 9497
    .local v23, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual/range {v23 .. v23}, Lcom/android/server/wm/WindowList;->size()I

    move-result v4

    .line 9499
    .local v4, "NW":I
    const/4 v8, -0x1

    .line 9500
    .local v8, "lastBelow":I
    const/4 v9, 0x0

    .line 9502
    .local v9, "numRemoved":I
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    move-object/from16 v26, v0

    move-object/from16 v0, v26

    array-length v0, v0

    move/from16 v26, v0

    move/from16 v0, v26

    if-ge v0, v4, :cond_0

    .line 9503
    add-int/lit8 v26, v4, 0xa

    move/from16 v0, v26

    new-array v0, v0, [Lcom/android/server/wm/WindowState;

    move-object/from16 v26, v0

    move-object/from16 v0, v26

    move-object/from16 v1, p0

    iput-object v0, v1, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    .line 9507
    :cond_0
    const/4 v6, 0x0

    .line 9508
    .local v6, "i":I
    :goto_0
    if-ge v6, v4, :cond_3

    .line 9509
    move-object/from16 v0, v23

    invoke-virtual {v0, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v21

    check-cast v21, Lcom/android/server/wm/WindowState;

    .line 9510
    .local v21, "w":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v21

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v26, v0

    if-eqz v26, :cond_1

    .line 9511
    move-object/from16 v0, v23

    invoke-virtual {v0, v6}, Lcom/android/server/wm/WindowList;->remove(I)Ljava/lang/Object;

    move-result-object v22

    check-cast v22, Lcom/android/server/wm/WindowState;

    .line 9512
    .local v22, "win":Lcom/android/server/wm/WindowState;
    const/16 v26, 0x1

    move/from16 v0, v26

    move-object/from16 v1, v22

    iput-boolean v0, v1, Lcom/android/server/wm/WindowState;->mRebuilding:Z

    .line 9513
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    move-object/from16 v26, v0

    aput-object v22, v26, v9

    .line 9514
    const/16 v26, 0x1

    move/from16 v0, v26

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 9516
    add-int/lit8 v4, v4, -0x1

    .line 9517
    add-int/lit8 v9, v9, 0x1

    .line 9518
    goto :goto_0

    .line 9519
    .end local v22    # "win":Lcom/android/server/wm/WindowState;
    :cond_1
    add-int/lit8 v26, v6, -0x1

    move/from16 v0, v26

    if-ne v8, v0, :cond_2

    .line 9520
    move-object/from16 v0, v21

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    move-object/from16 v26, v0

    move-object/from16 v0, v26

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    move/from16 v26, v0

    const/16 v27, 0x7dd

    move/from16 v0, v26

    move/from16 v1, v27

    if-ne v0, v1, :cond_2

    .line 9521
    move v8, v6

    .line 9524
    :cond_2
    add-int/lit8 v6, v6, 0x1

    goto :goto_0

    .line 9529
    .end local v21    # "w":Lcom/android/server/wm/WindowState;
    :cond_3
    add-int/lit8 v8, v8, 0x1

    .line 9530
    move v6, v8

    .line 9536
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/DisplayContent;->getStacks()Ljava/util/ArrayList;

    move-result-object v15

    .line 9537
    .local v15, "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    invoke-virtual {v15}, Ljava/util/ArrayList;->size()I

    move-result v10

    .line 9538
    .local v10, "numStacks":I
    const/4 v14, 0x0

    .local v14, "stackNdx":I
    :goto_1
    if-ge v14, v10, :cond_5

    .line 9539
    invoke-virtual {v15, v14}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v26

    check-cast v26, Lcom/android/server/wm/TaskStack;

    move-object/from16 v0, v26

    iget-object v5, v0, Lcom/android/server/wm/TaskStack;->mExitingAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 9540
    .local v5, "exitingAppTokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual {v5}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v3

    .line 9541
    .local v3, "NT":I
    const/4 v7, 0x0

    .local v7, "j":I
    :goto_2
    if-ge v7, v3, :cond_4

    .line 9542
    invoke-virtual {v5, v7}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v26

    check-cast v26, Lcom/android/server/wm/WindowToken;

    move-object/from16 v0, p0

    move-object/from16 v1, p1

    move-object/from16 v2, v26

    invoke-direct {v0, v1, v6, v2}, Lcom/android/server/wm/WindowManagerService;->reAddAppWindowsLocked(Lcom/android/server/wm/DisplayContent;ILcom/android/server/wm/WindowToken;)I

    move-result v6

    .line 9541
    add-int/lit8 v7, v7, 0x1

    goto :goto_2

    .line 9538
    :cond_4
    add-int/lit8 v14, v14, 0x1

    goto :goto_1

    .line 9547
    .end local v3    # "NT":I
    .end local v5    # "exitingAppTokens":Lcom/android/server/wm/AppTokenList;
    .end local v7    # "j":I
    :cond_5
    const/4 v14, 0x0

    :goto_3
    if-ge v14, v10, :cond_a

    .line 9548
    invoke-virtual {v15, v14}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v26

    check-cast v26, Lcom/android/server/wm/TaskStack;

    invoke-virtual/range {v26 .. v26}, Lcom/android/server/wm/TaskStack;->getTasks()Ljava/util/ArrayList;

    move-result-object v18

    .line 9549
    .local v18, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    invoke-virtual/range {v18 .. v18}, Ljava/util/ArrayList;->size()I

    move-result v11

    .line 9550
    .local v11, "numTasks":I
    const/16 v17, 0x0

    .local v17, "taskNdx":I
    :goto_4
    move/from16 v0, v17

    if-ge v0, v11, :cond_9

    .line 9551
    move-object/from16 v0, v18

    move/from16 v1, v17

    invoke-virtual {v0, v1}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v26

    check-cast v26, Lcom/android/server/wm/Task;

    move-object/from16 v0, v26

    iget-object v0, v0, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    move-object/from16 v20, v0

    .line 9552
    .local v20, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual/range {v20 .. v20}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v12

    .line 9553
    .local v12, "numTokens":I
    const/16 v19, 0x0

    .local v19, "tokenNdx":I
    :goto_5
    move/from16 v0, v19

    if-ge v0, v12, :cond_8

    .line 9554
    move-object/from16 v0, v20

    move/from16 v1, v19

    invoke-virtual {v0, v1}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v25

    check-cast v25, Lcom/android/server/wm/AppWindowToken;

    .line 9555
    .local v25, "wtoken":Lcom/android/server/wm/AppWindowToken;
    move-object/from16 v0, v25

    iget-boolean v0, v0, Lcom/android/server/wm/AppWindowToken;->mIsExiting:Z

    move/from16 v26, v0

    if-eqz v26, :cond_6

    invoke-virtual/range {v25 .. v25}, Lcom/android/server/wm/AppWindowToken;->waitingForReplacement()Z

    move-result v26

    if-eqz v26, :cond_7

    .line 9558
    :cond_6
    move-object/from16 v0, p0

    move-object/from16 v1, p1

    move-object/from16 v2, v25

    invoke-direct {v0, v1, v6, v2}, Lcom/android/server/wm/WindowManagerService;->reAddAppWindowsLocked(Lcom/android/server/wm/DisplayContent;ILcom/android/server/wm/WindowToken;)I

    move-result v6

    .line 9553
    :cond_7
    add-int/lit8 v19, v19, 0x1

    goto :goto_5

    .line 9550
    .end local v25    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :cond_8
    add-int/lit8 v17, v17, 0x1

    goto :goto_4

    .line 9547
    .end local v12    # "numTokens":I
    .end local v19    # "tokenNdx":I
    .end local v20    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_9
    add-int/lit8 v14, v14, 0x1

    goto :goto_3

    .line 9563
    .end local v11    # "numTasks":I
    .end local v17    # "taskNdx":I
    .end local v18    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    :cond_a
    sub-int/2addr v6, v8

    .line 9564
    if-eq v6, v9, :cond_d

    .line 9565
    const/16 v26, 0x1

    move/from16 v0, v26

    move-object/from16 v1, p1

    iput-boolean v0, v1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 9566
    const-string/jumbo v26, "WindowManager"

    new-instance v27, Ljava/lang/StringBuilder;

    invoke-direct/range {v27 .. v27}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v28, "On display="

    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v28

    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v27

    const-string/jumbo v28, " Rebuild removed "

    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    move-object/from16 v0, v27

    invoke-virtual {v0, v9}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v27

    .line 9567
    const-string/jumbo v28, " windows but added "

    .line 9566
    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    move-object/from16 v0, v27

    invoke-virtual {v0, v6}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v27

    .line 9567
    const-string/jumbo v28, " rebuildAppWindowListLocked() "

    .line 9566
    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    .line 9568
    const-string/jumbo v28, " callers="

    .line 9566
    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    .line 9568
    const/16 v28, 0xa

    invoke-static/range {v28 .. v28}, Landroid/os/Debug;->getCallers(I)Ljava/lang/String;

    move-result-object v28

    .line 9566
    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    invoke-virtual/range {v27 .. v27}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v27

    invoke-static/range {v26 .. v27}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9569
    const/4 v6, 0x0

    :goto_6
    if-ge v6, v9, :cond_c

    .line 9570
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    move-object/from16 v26, v0

    aget-object v24, v26, v6

    .line 9571
    .local v24, "ws":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v24

    iget-boolean v0, v0, Lcom/android/server/wm/WindowState;->mRebuilding:Z

    move/from16 v26, v0

    if-eqz v26, :cond_b

    .line 9572
    new-instance v16, Ljava/io/StringWriter;

    invoke-direct/range {v16 .. v16}, Ljava/io/StringWriter;-><init>()V

    .line 9573
    .local v16, "sw":Ljava/io/StringWriter;
    new-instance v13, Lcom/android/internal/util/FastPrintWriter;

    const/16 v26, 0x0

    const/16 v27, 0x400

    move-object/from16 v0, v16

    move/from16 v1, v26

    move/from16 v2, v27

    invoke-direct {v13, v0, v1, v2}, Lcom/android/internal/util/FastPrintWriter;-><init>(Ljava/io/Writer;ZI)V

    .line 9574
    .local v13, "pw":Ljava/io/PrintWriter;
    const-string/jumbo v26, ""

    const/16 v27, 0x1

    move-object/from16 v0, v24

    move-object/from16 v1, v26

    move/from16 v2, v27

    invoke-virtual {v0, v13, v1, v2}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 9575
    invoke-virtual {v13}, Ljava/io/PrintWriter;->flush()V

    .line 9576
    const-string/jumbo v26, "WindowManager"

    new-instance v27, Ljava/lang/StringBuilder;

    invoke-direct/range {v27 .. v27}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v28, "This window was lost: "

    invoke-virtual/range {v27 .. v28}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v27

    move-object/from16 v0, v27

    move-object/from16 v1, v24

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v27

    invoke-virtual/range {v27 .. v27}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v27

    invoke-static/range {v26 .. v27}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9577
    const-string/jumbo v26, "WindowManager"

    invoke-virtual/range {v16 .. v16}, Ljava/io/StringWriter;->toString()Ljava/lang/String;

    move-result-object v27

    invoke-static/range {v26 .. v27}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9578
    move-object/from16 v0, v24

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v26, v0

    invoke-virtual/range {v26 .. v26}, Lcom/android/server/wm/WindowStateAnimator;->destroySurfaceLocked()V

    .line 9569
    .end local v13    # "pw":Ljava/io/PrintWriter;
    .end local v16    # "sw":Ljava/io/StringWriter;
    :cond_b
    add-int/lit8 v6, v6, 0x1

    goto :goto_6

    .line 9581
    .end local v24    # "ws":Lcom/android/server/wm/WindowState;
    :cond_c
    const-string/jumbo v26, "WindowManager"

    const-string/jumbo v27, "Current app token list:"

    invoke-static/range {v26 .. v27}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9582
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->dumpAppTokensLocked()V

    .line 9583
    const-string/jumbo v26, "WindowManager"

    const-string/jumbo v27, "Final window list:"

    invoke-static/range {v26 .. v27}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9584
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsLocked()V

    .line 9586
    :cond_d
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mRebuildTmp:[Lcom/android/server/wm/WindowState;

    move-object/from16 v26, v0

    const/16 v27, 0x0

    invoke-static/range {v26 .. v27}, Ljava/util/Arrays;->fill([Ljava/lang/Object;Ljava/lang/Object;)V

    .line 9495
    return-void
.end method

.method private reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V
    .locals 5
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    const/4 v2, 0x1

    const/4 v3, 0x0

    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-nez v1, :cond_0

    return-void

    :cond_0
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->configureDisplayPolicyLocked(Lcom/android/server/wm/DisplayContent;)V

    iput-boolean v2, p1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    invoke-virtual {p0, v3}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z

    move-result v0

    .local v0, "configChanged":Z
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v1}, Landroid/content/res/Configuration;->setToDefaults()V

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v1, v4}, Landroid/content/res/Configuration;->updateFrom(Landroid/content/res/Configuration;)I

    invoke-static/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->setFlymeConfigurationExt(Lcom/android/server/wm/WindowManagerService;)V

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->computeScreenConfigurationLocked(Landroid/content/res/Configuration;)V

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v1, v4}, Landroid/content/res/Configuration;->diff(Landroid/content/res/Configuration;)I

    move-result v1

    if-eqz v1, :cond_2

    move v1, v2

    :goto_0
    or-int/2addr v0, v1

    .line 9394
    if-eqz v0, :cond_1

    .line 9395
    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    .line 9396
    invoke-direct {p0, v3, v3, v3}, Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(ZII)V

    .line 9397
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x12

    invoke-virtual {v1, v2}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 9398
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v1, p1}, Lcom/android/server/wm/DisplayContentList;->contains(Ljava/lang/Object;)Z

    move-result v1

    if-nez v1, :cond_1

    .line 9399
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mReconfigureOnConfigurationChanged:Lcom/android/server/wm/DisplayContentList;

    invoke-virtual {v1, p1}, Lcom/android/server/wm/DisplayContentList;->add(Ljava/lang/Object;)Z

    .line 9403
    :cond_1
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 9380
    return-void

    :cond_2
    move v1, v3

    .line 9392
    goto :goto_0
.end method

.method private reduceCompatConfigWidthSize(IIILandroid/util/DisplayMetrics;II)I
    .locals 4
    .param p1, "curSize"    # I
    .param p2, "rotation"    # I
    .param p3, "uiMode"    # I
    .param p4, "dm"    # Landroid/util/DisplayMetrics;
    .param p5, "dw"    # I
    .param p6, "dh"    # I

    .prologue
    .line 7629
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2, p5, p6, p2, p3}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayWidth(IIII)I

    move-result v2

    iput v2, p4, Landroid/util/DisplayMetrics;->noncompatWidthPixels:I

    .line 7630
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2, p5, p6, p2, p3}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayHeight(IIII)I

    move-result v2

    iput v2, p4, Landroid/util/DisplayMetrics;->noncompatHeightPixels:I

    .line 7631
    const/4 v2, 0x0

    invoke-static {p4, v2}, Landroid/content/res/CompatibilityInfo;->computeCompatibleScaling(Landroid/util/DisplayMetrics;Landroid/util/DisplayMetrics;)F

    move-result v0

    .line 7632
    .local v0, "scale":F
    iget v2, p4, Landroid/util/DisplayMetrics;->noncompatWidthPixels:I

    int-to-float v2, v2

    div-float/2addr v2, v0

    iget v3, p4, Landroid/util/DisplayMetrics;->density:F

    div-float/2addr v2, v3

    const/high16 v3, 0x3f000000    # 0.5f

    add-float/2addr v2, v3

    float-to-int v1, v2

    .line 7633
    .local v1, "size":I
    if-eqz p1, :cond_0

    if-ge v1, p1, :cond_1

    .line 7634
    :cond_0
    move p1, v1

    .line 7636
    :cond_1
    return p1
.end method

.method private reduceConfigLayout(IIFIII)I
    .locals 6
    .param p1, "curLayout"    # I
    .param p2, "rotation"    # I
    .param p3, "density"    # F
    .param p4, "dw"    # I
    .param p5, "dh"    # I
    .param p6, "uiMode"    # I

    .prologue
    .line 7577
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v5, p4, p5, p2, p6}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayWidth(IIII)I

    move-result v4

    .line 7578
    .local v4, "w":I
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v5, p4, p5, p2, p6}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayHeight(IIII)I

    move-result v0

    .line 7581
    .local v0, "h":I
    move v1, v4

    .line 7582
    .local v1, "longSize":I
    move v2, v0

    .line 7583
    .local v2, "shortSize":I
    if-ge v4, v0, :cond_0

    .line 7584
    move v3, v4

    .line 7585
    .local v3, "tmp":I
    move v1, v0

    .line 7586
    move v2, v4

    .line 7588
    .end local v3    # "tmp":I
    :cond_0
    int-to-float v5, v1

    div-float/2addr v5, p3

    float-to-int v1, v5

    .line 7589
    int-to-float v5, v2

    div-float/2addr v5, p3

    float-to-int v2, v5

    .line 7590
    invoke-static {p1, v1, v2}, Landroid/content/res/Configuration;->reduceScreenLayout(III)I

    move-result v5

    return v5
.end method

.method private relayoutVisibleWindow(Landroid/content/res/Configuration;ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;II)I
    .locals 8
    .param p1, "outConfig"    # Landroid/content/res/Configuration;
    .param p2, "result"    # I
    .param p3, "win"    # Lcom/android/server/wm/WindowState;
    .param p4, "winAnimator"    # Lcom/android/server/wm/WindowStateAnimator;
    .param p5, "attrChanges"    # I
    .param p6, "oldVisibility"    # I

    .prologue
    const/16 v4, 0x8

    const/4 v7, 0x1

    const/4 v3, 0x0

    .line 3166
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z

    move-result v2

    if-nez v2, :cond_9

    const/4 v2, 0x2

    :goto_0
    or-int/2addr p2, v2

    .line 3167
    iget-boolean v2, p3, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    if-eqz v2, :cond_0

    .line 3168
    sget-object v2, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v6, "relayoutVisibleWindow: "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, p3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    const-string/jumbo v6, " mAnimatingExit=true, mRemoveOnExit="

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 3169
    iget-boolean v6, p3, Lcom/android/server/wm/WindowState;->mRemoveOnExit:Z

    .line 3168
    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 3169
    const-string/jumbo v6, ", mDestroying="

    .line 3168
    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 3169
    iget-boolean v6, p3, Lcom/android/server/wm/WindowState;->mDestroying:Z

    .line 3168
    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v2, v5}, Landroid/util/Slog;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 3171
    invoke-virtual {p4}, Lcom/android/server/wm/WindowStateAnimator;->cancelExitAnimationForNextAnimationLocked()V

    .line 3172
    iput-boolean v3, p3, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 3174
    :cond_0
    iget-boolean v2, p3, Lcom/android/server/wm/WindowState;->mDestroying:Z

    if-eqz v2, :cond_1

    .line 3175
    iput-boolean v3, p3, Lcom/android/server/wm/WindowState;->mDestroying:Z

    .line 3176
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDestroySurface:Ljava/util/ArrayList;

    invoke-virtual {v2, p3}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 3178
    :cond_1
    if-ne p6, v4, :cond_2

    .line 3179
    iput-boolean v7, p4, Lcom/android/server/wm/WindowStateAnimator;->mEnterAnimationPending:Z

    .line 3182
    :cond_2
    iget v2, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    iput v2, p3, Lcom/android/server/wm/WindowState;->mLastVisibleLayoutRotation:I

    .line 3184
    iput-boolean v7, p4, Lcom/android/server/wm/WindowStateAnimator;->mEnteringAnimation:Z

    .line 3185
    and-int/lit8 v2, p2, 0x2

    if-eqz v2, :cond_3

    .line 3186
    invoke-virtual {p3, p1}, Lcom/android/server/wm/WindowState;->prepareWindowToDisplayDuringRelayout(Landroid/content/res/Configuration;)V

    .line 3188
    :cond_3
    and-int/lit8 v2, p5, 0x8

    if-eqz v2, :cond_4

    .line 3192
    invoke-virtual {p4}, Lcom/android/server/wm/WindowStateAnimator;->tryChangeFormatInPlaceLocked()Z

    move-result v2

    if-nez v2, :cond_4

    .line 3193
    invoke-virtual {p4}, Lcom/android/server/wm/WindowStateAnimator;->preserveSurfaceLocked()V

    .line 3194
    or-int/lit8 p2, p2, 0x6

    .line 3201
    :cond_4
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isDragResizeChanged()Z

    move-result v2

    if-nez v2, :cond_5

    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isResizedWhileNotDragResizing()Z

    move-result v2

    if-eqz v2, :cond_6

    .line 3202
    :cond_5
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->setDragResizing()V

    .line 3203
    invoke-virtual {p3, v3}, Lcom/android/server/wm/WindowState;->setResizedWhileNotDragResizing(Z)V

    .line 3208
    iget-boolean v2, p3, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v2, :cond_6

    iget-object v2, p3, Lcom/android/server/wm/WindowState;->mAttachedWindow:Lcom/android/server/wm/WindowState;

    if-nez v2, :cond_6

    .line 3209
    invoke-virtual {p4}, Lcom/android/server/wm/WindowStateAnimator;->preserveSurfaceLocked()V

    .line 3210
    or-int/lit8 p2, p2, 0x2

    .line 3213
    :cond_6
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isDragResizing()Z

    move-result v2

    if-eqz v2, :cond_b

    .line 3214
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->getResizeMode()I

    move-result v2

    if-nez v2, :cond_a

    const/4 v1, 0x1

    .line 3215
    .local v1, "freeformResizing":Z
    :goto_1
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isDragResizing()Z

    move-result v2

    if-eqz v2, :cond_d

    .line 3216
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->getResizeMode()I

    move-result v2

    if-ne v2, v7, :cond_c

    const/4 v0, 0x1

    .line 3217
    .local v0, "dockedResizing":Z
    :goto_2
    if-eqz v1, :cond_e

    const/16 v2, 0x10

    :goto_3
    or-int/2addr p2, v2

    .line 3218
    if-eqz v0, :cond_7

    move v3, v4

    :cond_7
    or-int/2addr p2, v3

    .line 3219
    invoke-virtual {p3}, Lcom/android/server/wm/WindowState;->isAnimatingWithSavedSurface()Z

    move-result v2

    if-eqz v2, :cond_8

    .line 3222
    or-int/lit8 p2, p2, 0x2

    .line 3224
    :cond_8
    return p2

    .end local v0    # "dockedResizing":Z
    .end local v1    # "freeformResizing":Z
    :cond_9
    move v2, v3

    .line 3166
    goto/16 :goto_0

    .line 3214
    :cond_a
    const/4 v1, 0x0

    .restart local v1    # "freeformResizing":Z
    goto :goto_1

    .line 3213
    .end local v1    # "freeformResizing":Z
    :cond_b
    const/4 v1, 0x0

    .restart local v1    # "freeformResizing":Z
    goto :goto_1

    .line 3216
    :cond_c
    const/4 v0, 0x0

    .restart local v0    # "dockedResizing":Z
    goto :goto_2

    .line 3215
    .end local v0    # "dockedResizing":Z
    :cond_d
    const/4 v0, 0x0

    .restart local v0    # "dockedResizing":Z
    goto :goto_2

    :cond_e
    move v2, v3

    .line 3217
    goto :goto_3
.end method

.method private setAnimatorDurationScale(F)V
    .locals 0
    .param p1, "scale"    # F

    .prologue
    .line 5754
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    .line 5755
    invoke-static {p1}, Landroid/animation/ValueAnimator;->setDurationScale(F)V

    .line 5753
    return-void
.end method

.method private setForcedDisplayDensityLocked(Lcom/android/server/wm/DisplayContent;I)V
    .locals 0
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "density"    # I

    .prologue
    .line 9375
    iput p2, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayDensity:I

    .line 9376
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 9374
    return-void
.end method

.method private setForcedDisplayScalingModeLocked(Lcom/android/server/wm/DisplayContent;I)V
    .locals 4
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "mode"    # I

    .prologue
    const/4 v1, 0x0

    .line 9183
    const-string/jumbo v2, "WindowManager"

    new-instance v0, Ljava/lang/StringBuilder;

    invoke-direct {v0}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Using display scaling mode: "

    invoke-virtual {v0, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    if-nez p2, :cond_0

    const-string/jumbo v0, "auto"

    :goto_0
    invoke-virtual {v3, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-static {v2, v0}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9184
    if-eqz p2, :cond_1

    const/4 v0, 0x1

    :goto_1
    iput-boolean v0, p1, Lcom/android/server/wm/DisplayContent;->mDisplayScalingDisabled:Z

    .line 9185
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 9182
    return-void

    .line 9183
    :cond_0
    const-string/jumbo v0, "off"

    goto :goto_0

    :cond_1
    move v0, v1

    .line 9184
    goto :goto_1
.end method

.method private setForcedDisplaySizeLocked(Lcom/android/server/wm/DisplayContent;II)V
    .locals 3
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "width"    # I
    .param p3, "height"    # I

    .prologue
    .line 9230
    const-string/jumbo v0, "WindowManager"

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "Using new display size: "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, "x"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9231
    iput p2, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    .line 9232
    iput p3, p1, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    .line 9233
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 9229
    return-void
.end method

.method private setOverscanLocked(Lcom/android/server/wm/DisplayContent;IIII)V
    .locals 8
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "left"    # I
    .param p3, "top"    # I
    .param p4, "right"    # I
    .param p5, "bottom"    # I

    .prologue
    .line 9441
    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v7

    .line 9442
    .local v7, "displayInfo":Landroid/view/DisplayInfo;
    iput p2, v7, Landroid/view/DisplayInfo;->overscanLeft:I

    .line 9443
    iput p3, v7, Landroid/view/DisplayInfo;->overscanTop:I

    .line 9444
    iput p4, v7, Landroid/view/DisplayInfo;->overscanRight:I

    .line 9445
    iput p5, v7, Landroid/view/DisplayInfo;->overscanBottom:I

    .line 9447
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

    iget-object v1, v7, Landroid/view/DisplayInfo;->uniqueId:Ljava/lang/String;

    iget-object v2, v7, Landroid/view/DisplayInfo;->name:Ljava/lang/String;

    move v3, p2

    move v4, p3

    move v5, p4

    move v6, p5

    invoke-virtual/range {v0 .. v6}, Lcom/android/server/wm/DisplaySettings;->setOverscanLocked(Ljava/lang/String;Ljava/lang/String;IIII)V

    .line 9449
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplaySettings:Lcom/android/server/wm/DisplaySettings;

    invoke-virtual {v0}, Lcom/android/server/wm/DisplaySettings;->writeSettingsLocked()V

    .line 9451
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->reconfigureDisplayLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 9440
    return-void
.end method

.method private setupWindowForRemoveOnExit(Lcom/android/server/wm/WindowState;)V
    .locals 3
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v2, 0x0

    .line 2387
    const/4 v1, 0x1

    iput-boolean v1, p1, Lcom/android/server/wm/WindowState;->mRemoveOnExit:Z

    .line 2388
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 2392
    const/4 v1, 0x3

    .line 2391
    invoke-virtual {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    move-result v0

    .line 2393
    .local v0, "focusChanged":Z
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 2394
    if-eqz v0, :cond_0

    .line 2395
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v1, v2}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 2386
    :cond_0
    return-void
.end method

.method private showAuditSafeModeNotification()V
    .locals 11

    .prologue
    const v10, #android:string@audit_safemode_notification#t

    const/4 v9, 0x0

    const/4 v8, 0x1

    .line 8130
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 8131
    new-instance v5, Landroid/content/Intent;

    const-string/jumbo v6, "android.intent.action.VIEW"

    .line 8132
    const-string/jumbo v7, "https://support.google.com/nexus/answer/2852139"

    invoke-static {v7}, Landroid/net/Uri;->parse(Ljava/lang/String;)Landroid/net/Uri;

    move-result-object v7

    .line 8131
    invoke-direct {v5, v6, v7}, Landroid/content/Intent;-><init>(Ljava/lang/String;Landroid/net/Uri;)V

    .line 8130
    invoke-static {v4, v9, v5, v9}, Landroid/app/PendingIntent;->getActivity(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;

    move-result-object v2

    .line 8134
    .local v2, "pendingIntent":Landroid/app/PendingIntent;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v4, v10}, Landroid/content/Context;->getString(I)Ljava/lang/String;

    move-result-object v3

    .line 8136
    .local v3, "title":Ljava/lang/String;
    new-instance v4, Landroid/app/Notification$Builder;

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-direct {v4, v5}, Landroid/app/Notification$Builder;-><init>(Landroid/content/Context;)V

    const v5, #android:drawable@stat_sys_warning#t

    invoke-virtual {v4, v5}, Landroid/app/Notification$Builder;->setSmallIcon(I)Landroid/app/Notification$Builder;

    move-result-object v4

    const-wide/16 v6, 0x0

    invoke-virtual {v4, v6, v7}, Landroid/app/Notification$Builder;->setWhen(J)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v8}, Landroid/app/Notification$Builder;->setOngoing(Z)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v3}, Landroid/app/Notification$Builder;->setTicker(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v8}, Landroid/app/Notification$Builder;->setLocalOnly(Z)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v8}, Landroid/app/Notification$Builder;->setPriority(I)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v8}, Landroid/app/Notification$Builder;->setVisibility(I)Landroid/app/Notification$Builder;

    move-result-object v4

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const v6, #android:color@system_notification_accent_color#t

    invoke-virtual {v5, v6}, Landroid/content/Context;->getColor(I)I

    move-result v5

    invoke-virtual {v4, v5}, Landroid/app/Notification$Builder;->setColor(I)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v3}, Landroid/app/Notification$Builder;->setContentTitle(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;

    move-result-object v4

    .line 8147
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const v6, #android:string@audit_safemode_notification_details#t

    invoke-virtual {v5, v6}, Landroid/content/Context;->getString(I)Ljava/lang/String;

    move-result-object v5

    .line 8136
    invoke-virtual {v4, v5}, Landroid/app/Notification$Builder;->setContentText(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4, v2}, Landroid/app/Notification$Builder;->setContentIntent(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;

    move-result-object v4

    invoke-virtual {v4}, Landroid/app/Notification$Builder;->build()Landroid/app/Notification;

    move-result-object v0

    .line 8151
    .local v0, "notification":Landroid/app/Notification;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 8152
    const-string/jumbo v5, "notification"

    .line 8151
    invoke-virtual {v4, v5}, Landroid/content/Context;->getSystemService(Ljava/lang/String;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Landroid/app/NotificationManager;

    .line 8155
    .local v1, "notificationManager":Landroid/app/NotificationManager;
    sget-object v4, Landroid/os/UserHandle;->ALL:Landroid/os/UserHandle;

    .line 8154
    const/4 v5, 0x0

    invoke-virtual {v1, v5, v10, v0, v4}, Landroid/app/NotificationManager;->notifyAsUser(Ljava/lang/String;ILandroid/app/Notification;Landroid/os/UserHandle;)V

    .line 8129
    return-void
.end method

.method private showStrictModeViolation(II)V
    .locals 12
    .param p1, "arg"    # I
    .param p2, "pid"    # I

    .prologue
    .line 6303
    if-eqz p1, :cond_1

    const/4 v4, 0x1

    .line 6304
    .local v4, "on":Z
    :goto_0
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v9

    .line 6308
    if-eqz v4, :cond_4

    .line 6309
    const/4 v1, 0x0

    .line 6310
    .local v1, "isVisible":Z
    :try_start_0
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 6311
    .local v2, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_1
    if-ge v0, v2, :cond_3

    .line 6312
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v8}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v6

    .line 6313
    .local v6, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    .line 6314
    .local v3, "numWindows":I
    const/4 v5, 0x0

    .local v5, "winNdx":I
    :goto_2
    if-ge v5, v3, :cond_0

    .line 6315
    invoke-virtual {v6, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowState;

    .line 6316
    .local v7, "ws":Lcom/android/server/wm/WindowState;
    iget-object v8, v7, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    iget v8, v8, Lcom/android/server/wm/Session;->mPid:I

    if-ne v8, p2, :cond_2

    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    move-result v8

    if-eqz v8, :cond_2

    .line 6317
    const/4 v1, 0x1

    .line 6311
    .end local v7    # "ws":Lcom/android/server/wm/WindowState;
    :cond_0
    add-int/lit8 v0, v0, 0x1

    goto :goto_1

    .line 6303
    .end local v0    # "displayNdx":I
    .end local v1    # "isVisible":Z
    .end local v2    # "numDisplays":I
    .end local v3    # "numWindows":I
    .end local v4    # "on":Z
    .end local v5    # "winNdx":I
    .end local v6    # "windows":Lcom/android/server/wm/WindowList;
    :cond_1
    const/4 v4, 0x0

    .restart local v4    # "on":Z
    goto :goto_0

    .line 6314
    .restart local v0    # "displayNdx":I
    .restart local v1    # "isVisible":Z
    .restart local v2    # "numDisplays":I
    .restart local v3    # "numWindows":I
    .restart local v5    # "winNdx":I
    .restart local v6    # "windows":Lcom/android/server/wm/WindowList;
    .restart local v7    # "ws":Lcom/android/server/wm/WindowState;
    :cond_2
    add-int/lit8 v5, v5, 0x1

    goto :goto_2

    .line 6322
    .end local v3    # "numWindows":I
    .end local v5    # "winNdx":I
    .end local v6    # "windows":Lcom/android/server/wm/WindowList;
    .end local v7    # "ws":Lcom/android/server/wm/WindowState;
    :cond_3
    if-nez v1, :cond_4

    monitor-exit v9

    .line 6323
    return-void

    .line 6329
    .end local v0    # "displayNdx":I
    .end local v1    # "isVisible":Z
    .end local v2    # "numDisplays":I
    :cond_4
    :try_start_1
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 6332
    :try_start_2
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mStrictModeFlash:Lcom/android/server/wm/StrictModeFlash;

    if-nez v8, :cond_5

    .line 6333
    new-instance v8, Lcom/android/server/wm/StrictModeFlash;

    .line 6334
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v10

    invoke-virtual {v10}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v10

    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 6333
    invoke-direct {v8, v10, v11}, Lcom/android/server/wm/StrictModeFlash;-><init>(Landroid/view/Display;Landroid/view/SurfaceSession;)V

    iput-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mStrictModeFlash:Lcom/android/server/wm/StrictModeFlash;

    .line 6336
    :cond_5
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mStrictModeFlash:Lcom/android/server/wm/StrictModeFlash;

    invoke-virtual {v8, v4}, Lcom/android/server/wm/StrictModeFlash;->setVisibility(Z)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    .line 6338
    :try_start_3
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    monitor-exit v9

    .line 6302
    return-void

    .line 6337
    :catchall_0
    move-exception v8

    .line 6338
    :try_start_4
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 6337
    throw v8
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 6304
    :catchall_1
    move-exception v8

    monitor-exit v9

    throw v8
.end method

.method private startAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;)V
    .locals 8
    .param p1, "wtoken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/16 v7, 0x11

    const/4 v6, 0x1

    const/4 v4, 0x0

    .line 4810
    iget-boolean v3, p1, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    if-nez v3, :cond_1

    .line 4811
    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-boolean v3, v3, Lcom/android/server/wm/AppWindowAnimator;->freezingScreen:Z

    if-nez v3, :cond_0

    .line 4812
    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iput-boolean v6, v3, Lcom/android/server/wm/AppWindowAnimator;->freezingScreen:Z

    .line 4813
    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iput v4, v3, Lcom/android/server/wm/AppWindowAnimator;->lastFreezeDuration:I

    .line 4814
    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    add-int/lit8 v3, v3, 0x1

    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    .line 4815
    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    if-ne v3, v6, :cond_0

    .line 4816
    invoke-direct {p0, v4, v4, v4}, Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(ZII)V

    .line 4817
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v3, v7}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 4818
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v4, 0x7d0

    invoke-virtual {v3, v7, v4, v5}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 4821
    :cond_0
    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 4822
    .local v0, "N":I
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_1

    .line 4823
    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v3, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 4824
    .local v2, "w":Lcom/android/server/wm/WindowState;
    iput-boolean v6, v2, Lcom/android/server/wm/WindowState;->mAppFreezing:Z

    .line 4822
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 4807
    .end local v0    # "N":I
    .end local v1    # "i":I
    .end local v2    # "w":Lcom/android/server/wm/WindowState;
    :cond_1
    return-void
.end method

.method private startFreezingDisplayLocked(ZII)V
    .locals 12
    .param p1, "inTransaction"    # Z
    .param p2, "exitAnim"    # I
    .param p3, "enterAnim"    # I

    .prologue
    const/4 v3, 0x0

    .line 10098
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-eqz v1, :cond_0

    .line 10099
    return-void

    .line 10102
    :cond_0
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-eqz v1, :cond_4

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy;->isScreenOn()Z

    move-result v1

    if-eqz v1, :cond_4

    .line 10112
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mScreenFrozenLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v1}, Landroid/os/PowerManager$WakeLock;->acquire()V

    .line 10114
    const/4 v1, 0x1

    iput-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    .line 10115
    invoke-static {}, Landroid/os/SystemClock;->elapsedRealtime()J

    move-result-wide v4

    iput-wide v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFreezeTime:J

    .line 10116
    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    .line 10118
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v1}, Lcom/android/server/wm/InputMonitor;->freezeInputDispatchingLw()V

    .line 10123
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1, v3, v3}, Landroid/view/WindowManagerPolicy;->setLastInputMethodWindowLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)V

    .line 10125
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v1}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 10126
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v1}, Lcom/android/server/wm/AppTransition;->freeze()V

    .line 10135
    :cond_1
    iput p2, p0, Lcom/android/server/wm/WindowManagerService;->mExitAnimId:I

    .line 10136
    iput p3, p0, Lcom/android/server/wm/WindowManagerService;->mEnterAnimId:I

    .line 10137
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v2

    .line 10138
    .local v2, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v2}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v8

    .line 10140
    .local v8, "displayId":I
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {v1, v8}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v0

    .line 10141
    .local v0, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    if-eqz v0, :cond_2

    .line 10142
    invoke-virtual {v0}, Lcom/android/server/wm/ScreenRotationAnimation;->kill()V

    .line 10146
    :cond_2
    const/4 v6, 0x0

    .line 10147
    .local v6, "isSecure":Z
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v10

    .line 10148
    .local v10, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v10}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    .line 10149
    .local v7, "N":I
    const/4 v9, 0x0

    .local v9, "i":I
    :goto_0
    if-ge v9, v7, :cond_3

    .line 10150
    invoke-virtual {v10, v9}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/WindowState;

    .line 10151
    .local v11, "ws":Lcom/android/server/wm/WindowState;
    invoke-virtual {v11}, Lcom/android/server/wm/WindowState;->isOnScreen()Z

    move-result v1

    if-eqz v1, :cond_5

    iget-object v1, v11, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->flags:I

    and-int/lit16 v1, v1, 0x2000

    if-eqz v1, :cond_5

    .line 10152
    const/4 v6, 0x1

    .line 10158
    .end local v11    # "ws":Lcom/android/server/wm/WindowState;
    :cond_3
    invoke-virtual {v2}, Lcom/android/server/wm/DisplayContent;->updateDisplayInfo()V

    .line 10159
    new-instance v0, Lcom/android/server/wm/ScreenRotationAnimation;

    .end local v0    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 10160
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v4}, Landroid/view/WindowManagerPolicy;->isDefaultOrientationForced()Z

    move-result v5

    move v4, p1

    invoke-direct/range {v0 .. v6}, Lcom/android/server/wm/ScreenRotationAnimation;-><init>(Landroid/content/Context;Lcom/android/server/wm/DisplayContent;Landroid/view/SurfaceSession;ZZZ)V

    .restart local v0    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {v1, v8, v0}, Lcom/android/server/wm/WindowAnimator;->setScreenRotationAnimationLocked(ILcom/android/server/wm/ScreenRotationAnimation;)V

    invoke-static {p0, v2}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->adjustOnOrientationChanged(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/DisplayContent;)V

    return-void

    .end local v0    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .end local v2    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v6    # "isSecure":Z
    .end local v7    # "N":I
    .end local v8    # "displayId":I
    .end local v9    # "i":I
    .end local v10    # "windows":Lcom/android/server/wm/WindowList;
    :cond_4
    return-void

    .line 10149
    .restart local v0    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .restart local v2    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .restart local v6    # "isSecure":Z
    .restart local v7    # "N":I
    .restart local v8    # "displayId":I
    .restart local v9    # "i":I
    .restart local v10    # "windows":Lcom/android/server/wm/WindowList;
    .restart local v11    # "ws":Lcom/android/server/wm/WindowState;
    :cond_5
    add-int/lit8 v9, v9, 0x1

    goto :goto_0
.end method

.method private startPositioningLocked(Lcom/android/server/wm/WindowState;ZFF)Z
    .locals 9
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "resize"    # Z
    .param p3, "startX"    # F
    .param p4, "startY"    # F

    .prologue
    const/4 v8, 0x1

    const/4 v7, 0x0

    const/4 v6, 0x0

    .line 7890
    if-eqz p1, :cond_0

    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getAppToken()Landroid/view/IApplicationToken;

    move-result-object v3

    if-nez v3, :cond_1

    .line 7891
    :cond_0
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "startPositioningLocked: Bad window "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 7892
    return v7

    .line 7894
    :cond_1
    iget-object v3, p1, Lcom/android/server/wm/WindowState;->mInputChannel:Landroid/view/InputChannel;

    if-nez v3, :cond_2

    .line 7895
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "startPositioningLocked: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string/jumbo v5, " has no input channel, "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 7896
    const-string/jumbo v5, " probably being removed"

    .line 7895
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->wtf(Ljava/lang/String;Ljava/lang/String;)I

    .line 7897
    return v7

    .line 7900
    :cond_2
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    .line 7901
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v1, :cond_3

    .line 7902
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "startPositioningLocked: Invalid display content "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 7903
    return v7

    .line 7906
    :cond_3
    invoke-virtual {v1}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v0

    .line 7907
    .local v0, "display":Landroid/view/Display;
    new-instance v3, Lcom/android/server/wm/TaskPositioner;

    invoke-direct {v3, p0}, Lcom/android/server/wm/TaskPositioner;-><init>(Lcom/android/server/wm/WindowManagerService;)V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    .line 7908
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    invoke-virtual {v3, v0}, Lcom/android/server/wm/TaskPositioner;->register(Landroid/view/Display;)V

    .line 7909
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v3, v8}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 7915
    move-object v2, p1

    .line 7916
    .local v2, "transferFocusFromWin":Lcom/android/server/wm/WindowState;
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eqz v3, :cond_4

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eq v3, p1, :cond_4

    .line 7917
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    iget-object v3, v3, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-ne v3, v4, :cond_4

    .line 7918
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    .line 7920
    :cond_4
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    .line 7921
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mInputChannel:Landroid/view/InputChannel;

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    iget-object v5, v5, Lcom/android/server/wm/TaskPositioner;->mServerChannel:Landroid/view/InputChannel;

    .line 7920
    invoke-virtual {v3, v4, v5}, Lcom/android/server/input/InputManagerService;->transferTouchFocus(Landroid/view/InputChannel;Landroid/view/InputChannel;)Z

    move-result v3

    if-nez v3, :cond_5

    .line 7922
    const-string/jumbo v3, "WindowManager"

    const-string/jumbo v4, "startPositioningLocked: Unable to transfer touch focus"

    invoke-static {v3, v4}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I

    .line 7923
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    invoke-virtual {v3}, Lcom/android/server/wm/TaskPositioner;->unregister()V

    .line 7924
    iput-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    .line 7925
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v3, v8}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 7926
    return v7

    .line 7929
    :cond_5
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskPositioner:Lcom/android/server/wm/TaskPositioner;

    invoke-virtual {v3, p1, p2, p3, p4}, Lcom/android/server/wm/TaskPositioner;->startDragLocked(Lcom/android/server/wm/WindowState;ZFF)V

    .line 7930
    return v8
.end method

.method private startScrollingTask(Lcom/android/server/wm/DisplayContent;II)V
    .locals 9
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "startX"    # I
    .param p3, "startY"    # I

    .prologue
    .line 7848
    const/4 v2, 0x0

    .line 7849
    .local v2, "task":Lcom/android/server/wm/Task;
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v5

    .line 7850
    :try_start_0
    invoke-virtual {p1, p2, p3}, Lcom/android/server/wm/DisplayContent;->taskIdFromPoint(II)I

    move-result v3

    .line 7851
    .local v3, "taskId":I
    if-ltz v3, :cond_0

    .line 7852
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v4, v3}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v4

    move-object v0, v4

    check-cast v0, Lcom/android/server/wm/Task;

    move-object v2, v0

    .line 7854
    .end local v2    # "task":Lcom/android/server/wm/Task;
    :cond_0
    if-eqz v2, :cond_1

    invoke-virtual {v2}, Lcom/android/server/wm/Task;->isDockedInEffect()Z

    move-result v4

    if-eqz v4, :cond_1

    .line 7855
    invoke-virtual {v2}, Lcom/android/server/wm/Task;->getTopVisibleAppMainWindow()Lcom/android/server/wm/WindowState;

    move-result-object v4

    int-to-float v6, p2

    int-to-float v7, p3

    const/4 v8, 0x0

    .line 7854
    invoke-direct {p0, v4, v8, v6, v7}, Lcom/android/server/wm/WindowManagerService;->startPositioningLocked(Lcom/android/server/wm/WindowState;ZFF)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v4

    if-eqz v4, :cond_1

    monitor-exit v5

    .line 7860
    :try_start_1
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    iget v5, v2, Lcom/android/server/wm/Task;->mTaskId:I

    invoke-interface {v4, v5}, Landroid/app/IActivityManager;->setFocusedTask(I)V
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0

    .line 7844
    :goto_0
    return-void

    :cond_1
    monitor-exit v5

    .line 7856
    return-void

    .line 7849
    .end local v3    # "taskId":I
    :catchall_0
    move-exception v4

    monitor-exit v5

    throw v4

    .line 7861
    .restart local v3    # "taskId":I
    :catch_0
    move-exception v1

    .local v1, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method private tmpRemoveWindowLocked(ILcom/android/server/wm/WindowState;)I
    .locals 6
    .param p1, "interestingPos"    # I
    .param p2, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 1666
    invoke-virtual {p2}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v3

    .line 1667
    .local v3, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v3, p2}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v4

    .line 1668
    .local v4, "wpos":I
    if-ltz v4, :cond_3

    .line 1669
    if-ge v4, p1, :cond_0

    add-int/lit8 p1, p1, -0x1

    .line 1671
    :cond_0
    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowList;->remove(I)Ljava/lang/Object;

    .line 1672
    const/4 v5, 0x1

    iput-boolean v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1673
    iget-object v5, p2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 1674
    .local v0, "NC":I
    :cond_1
    :goto_0
    if-lez v0, :cond_3

    .line 1675
    add-int/lit8 v0, v0, -0x1

    .line 1676
    iget-object v5, p2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v5, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 1677
    .local v2, "cw":Lcom/android/server/wm/WindowState;
    invoke-virtual {v3, v2}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v1

    .line 1678
    .local v1, "cpos":I
    if-ltz v1, :cond_1

    .line 1679
    if-ge v1, p1, :cond_2

    add-int/lit8 p1, p1, -0x1

    .line 1682
    :cond_2
    invoke-virtual {v3, v1}, Lcom/android/server/wm/WindowList;->remove(I)Ljava/lang/Object;

    goto :goto_0

    .line 1686
    .end local v0    # "NC":I
    .end local v1    # "cpos":I
    .end local v2    # "cw":Lcom/android/server/wm/WindowState;
    :cond_3
    return p1
.end method

.method private transferStartingWindow(Landroid/os/IBinder;Lcom/android/server/wm/AppWindowToken;)Z
    .locals 11
    .param p1, "transferFrom"    # Landroid/os/IBinder;
    .param p2, "wtoken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/4 v9, 0x0

    const/4 v10, 0x1

    const/4 v8, 0x0

    .line 4318
    if-nez p1, :cond_0

    .line 4319
    return v9

    .line 4321
    :cond_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v5

    .line 4322
    .local v5, "ttoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v5, :cond_1

    .line 4323
    return v9

    .line 4325
    :cond_1
    iget-object v1, v5, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    .line 4326
    .local v1, "startingWindow":Lcom/android/server/wm/WindowState;
    if-eqz v1, :cond_6

    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->startingView:Landroid/view/View;

    if-eqz v7, :cond_6

    .line 4329
    iput-boolean v10, p0, Lcom/android/server/wm/WindowManagerService;->mSkipAppTransitionAnimation:Z

    .line 4334
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 4337
    .local v2, "origId":J
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    iput-object v7, p2, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4338
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->startingView:Landroid/view/View;

    iput-object v7, p2, Lcom/android/server/wm/AppWindowToken;->startingView:Landroid/view/View;

    .line 4339
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->startingDisplayed:Z

    iput-boolean v7, p2, Lcom/android/server/wm/AppWindowToken;->startingDisplayed:Z

    .line 4340
    iput-boolean v9, v5, Lcom/android/server/wm/AppWindowToken;->startingDisplayed:Z

    .line 4341
    iput-object v1, p2, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    .line 4342
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->reportedVisible:Z

    iput-boolean v7, p2, Lcom/android/server/wm/AppWindowToken;->reportedVisible:Z

    .line 4343
    iput-object v8, v5, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4344
    iput-object v8, v5, Lcom/android/server/wm/AppWindowToken;->startingView:Landroid/view/View;

    .line 4345
    iput-object v8, v5, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    .line 4346
    iput-boolean v10, v5, Lcom/android/server/wm/AppWindowToken;->startingMoved:Z

    .line 4347
    iput-object p2, v1, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    .line 4348
    iput-object p2, v1, Lcom/android/server/wm/WindowState;->mRootToken:Lcom/android/server/wm/WindowToken;

    .line 4349
    iput-object p2, v1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 4354
    invoke-virtual {v1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v7

    invoke-virtual {v7, v1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 4355
    iput-boolean v10, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 4358
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7, v1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 4359
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7, v1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 4360
    invoke-direct {p0, v1, v10}, Lcom/android/server/wm/WindowManagerService;->addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 4367
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->allDrawn:Z

    if-eqz v7, :cond_2

    .line 4368
    iput-boolean v10, p2, Lcom/android/server/wm/AppWindowToken;->allDrawn:Z

    .line 4369
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->deferClearAllDrawn:Z

    iput-boolean v7, p2, Lcom/android/server/wm/AppWindowToken;->deferClearAllDrawn:Z

    .line 4371
    :cond_2
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->firstWindowDrawn:Z

    if-eqz v7, :cond_3

    .line 4372
    iput-boolean v10, p2, Lcom/android/server/wm/AppWindowToken;->firstWindowDrawn:Z

    .line 4374
    :cond_3
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    if-nez v7, :cond_4

    .line 4375
    iput-boolean v9, p2, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    .line 4376
    iput-boolean v9, p2, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    .line 4378
    :cond_4
    iget-boolean v7, p2, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    iget-boolean v8, v5, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    if-eq v7, v8, :cond_5

    .line 4379
    iget-boolean v7, v5, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    iput-boolean v7, p2, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    .line 4380
    invoke-virtual {p2}, Lcom/android/server/wm/AppWindowToken;->sendAppVisibilityToClients()V

    .line 4382
    :cond_5
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    .line 4383
    iget-object v8, p2, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v9, v1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .line 4382
    invoke-virtual {v7, v8, v9}, Lcom/android/server/wm/AppWindowAnimator;->transferCurrentAnimation(Lcom/android/server/wm/AppWindowAnimator;Lcom/android/server/wm/WindowStateAnimator;)V

    .line 4385
    const/4 v7, 0x3

    invoke-virtual {p0, v7, v10}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 4387
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v7

    iput-boolean v10, v7, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 4388
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 4389
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 4390
    return v10

    .line 4391
    .end local v2    # "origId":J
    :cond_6
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    if-eqz v7, :cond_7

    .line 4396
    iget-object v7, v5, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    iput-object v7, p2, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4397
    iput-object v8, v5, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4398
    iput-boolean v10, v5, Lcom/android/server/wm/AppWindowToken;->startingMoved:Z

    .line 4399
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/4 v8, 0x5

    invoke-virtual {v7, v8, p2}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v0

    .line 4403
    .local v0, "m":Landroid/os/Message;
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v7, v0}, Lcom/android/server/wm/WindowManagerService$H;->sendMessageAtFrontOfQueue(Landroid/os/Message;)Z

    .line 4404
    return v10

    .line 4406
    .end local v0    # "m":Landroid/os/Message;
    :cond_7
    iget-object v4, v5, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    .line 4407
    .local v4, "tAppAnimator":Lcom/android/server/wm/AppWindowAnimator;
    iget-object v6, p2, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    .line 4408
    .local v6, "wAppAnimator":Lcom/android/server/wm/AppWindowAnimator;
    iget-object v7, v4, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    if-eqz v7, :cond_9

    .line 4410
    iget-object v7, v6, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    if-eqz v7, :cond_8

    .line 4411
    iget-object v7, v6, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    invoke-virtual {v7}, Landroid/view/SurfaceControl;->destroy()V

    .line 4413
    :cond_8
    iget-object v7, v4, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    iput-object v7, v6, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    .line 4414
    iget v7, v4, Lcom/android/server/wm/AppWindowAnimator;->thumbnailLayer:I

    iput v7, v6, Lcom/android/server/wm/AppWindowAnimator;->thumbnailLayer:I

    .line 4415
    iget-object v7, v4, Lcom/android/server/wm/AppWindowAnimator;->thumbnailAnimation:Landroid/view/animation/Animation;

    iput-object v7, v6, Lcom/android/server/wm/AppWindowAnimator;->thumbnailAnimation:Landroid/view/animation/Animation;

    .line 4416
    iput-object v8, v4, Lcom/android/server/wm/AppWindowAnimator;->thumbnail:Landroid/view/SurfaceControl;

    .line 4418
    :cond_9
    return v9
.end method

.method private tryStartExitingAnimation(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;ZZ)Z
    .locals 6
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "winAnimator"    # Lcom/android/server/wm/WindowStateAnimator;
    .param p3, "isDefaultDisplay"    # Z
    .param p4, "focusMayChange"    # Z

    .prologue
    const/4 v5, 0x0

    const/4 v4, 0x0

    const/4 v3, 0x1

    .line 3113
    const/4 v0, 0x2

    .line 3114
    .local v0, "transit":I
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v1, v1, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v2, 0x3

    if-ne v1, v2, :cond_0

    .line 3115
    const/4 v0, 0x5

    .line 3117
    :cond_0
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isWinVisibleLw()Z

    move-result v1

    if-eqz v1, :cond_2

    invoke-virtual {p2, v0, v4}, Lcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z

    move-result v1

    if-eqz v1, :cond_2

    .line 3118
    move p4, p3

    .line 3119
    iput-boolean v3, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 3120
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iput-boolean v3, v1, Lcom/android/server/wm/WindowStateAnimator;->mAnimating:Z

    .line 3139
    :goto_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v1, :cond_1

    .line 3140
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v1

    if-nez v1, :cond_1

    .line 3141
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    invoke-virtual {v1, p1, v0}, Lcom/android/server/wm/AccessibilityController;->onWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 3143
    :cond_1
    return p4

    .line 3121
    :cond_2
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowStateAnimator;->isAnimationSet()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 3124
    iput-boolean v3, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 3125
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iput-boolean v3, v1, Lcom/android/server/wm/WindowStateAnimator;->mAnimating:Z

    goto :goto_0

    .line 3126
    :cond_3
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v1, p1}, Lcom/android/server/wm/WallpaperController;->isWallpaperTarget(Lcom/android/server/wm/WindowState;)Z

    move-result v1

    if-eqz v1, :cond_4

    .line 3130
    iput-boolean v3, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 3131
    iget-object v1, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iput-boolean v3, v1, Lcom/android/server/wm/WindowStateAnimator;->mAnimating:Z

    goto :goto_0

    .line 3133
    :cond_4
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-ne v1, p1, :cond_5

    .line 3134
    iput-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 3136
    :cond_5
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->destroyOrSaveSurface()V

    goto :goto_0
.end method

.method private updateCircularDisplayMaskIfNeeded()V
    .locals 7

    .prologue
    .line 6206
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v4}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v4

    invoke-virtual {v4}, Landroid/content/res/Resources;->getConfiguration()Landroid/content/res/Configuration;

    move-result-object v4

    invoke-virtual {v4}, Landroid/content/res/Configuration;->isScreenRound()Z

    move-result v4

    if-eqz v4, :cond_0

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v4}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v4

    const v5, #android:bool@config_windowShowCircularMask#t

    invoke-virtual {v4, v5}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v4

    if-eqz v4, :cond_0

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    :try_start_0
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .local v0, "currentUserId":I
    monitor-exit v4

    .line 6216
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v4}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v4

    .line 6217
    const-string/jumbo v5, "accessibility_display_inversion_enabled"

    const/4 v6, 0x0

    .line 6216
    invoke-static {v4, v5, v6, v0}, Landroid/provider/Settings$Secure;->getIntForUser(Landroid/content/ContentResolver;Ljava/lang/String;II)I

    move-result v1

    .line 6218
    .local v1, "inversionState":I
    const/4 v4, 0x1

    if-ne v1, v4, :cond_1

    const/4 v3, 0x0

    .line 6219
    .local v3, "showMask":I
    :goto_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v5, 0x23

    invoke-virtual {v4, v5}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(I)Landroid/os/Message;

    move-result-object v2

    .line 6220
    .local v2, "m":Landroid/os/Message;
    iput v3, v2, Landroid/os/Message;->arg1:I

    .line 6221
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v4, v2}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 6204
    .end local v0    # "currentUserId":I
    .end local v1    # "inversionState":I
    .end local v2    # "m":Landroid/os/Message;
    .end local v3    # "showMask":I
    :cond_0
    return-void

    .line 6210
    :catchall_0
    move-exception v5

    monitor-exit v4

    throw v5

    .line 6218
    .restart local v0    # "currentUserId":I
    .restart local v1    # "inversionState":I
    :cond_1
    const/4 v3, 0x1

    .restart local v3    # "showMask":I
    goto :goto_0
.end method

.method private updateOrientationFromAppTokensLocked(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
    .locals 8
    .param p1, "currentConfig"    # Landroid/content/res/Configuration;
    .param p2, "freezeThisOneIfNeeded"    # Landroid/os/IBinder;

    .prologue
    const/4 v7, 0x0

    const/4 v5, 0x1

    const/4 v6, 0x0

    .line 3808
    iget-boolean v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-nez v4, :cond_0

    .line 3809
    return-object v7

    .line 3811
    :cond_0
    const/4 v2, 0x0

    .line 3813
    .local v2, "config":Landroid/content/res/Configuration;
    invoke-virtual {p0, v6}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z

    move-result v4

    if-eqz v4, :cond_4

    if-eqz p2, :cond_1

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iget-boolean v4, v4, Lcom/android/server/wm/WindowSurfacePlacer;->mOrientationChangeComplete:Z

    if-eqz v4, :cond_3

    :cond_1
    :goto_0
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->computeNewConfigurationLocked()Landroid/content/res/Configuration;

    move-result-object v2

    .end local v2    # "config":Landroid/content/res/Configuration;
    :cond_2
    :goto_1
    return-object v2

    .restart local v2    # "config":Landroid/content/res/Configuration;
    :cond_3
    invoke-virtual {p0, p2}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v1

    .local v1, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v1, :cond_1

    invoke-direct {p0, v1}, Lcom/android/server/wm/WindowManagerService;->startAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;)V

    goto :goto_0

    .end local v1    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_4
    if-eqz p1, :cond_2

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v4}, Landroid/content/res/Configuration;->setToDefaults()V

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v4, p1}, Landroid/content/res/Configuration;->updateFrom(Landroid/content/res/Configuration;)I

    invoke-static/range {p0 .. p1}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->setFlymeConfigurationExt(Lcom/android/server/wm/WindowManagerService;Landroid/content/res/Configuration;)V

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->computeScreenConfigurationLocked(Landroid/content/res/Configuration;)V

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {p1, v4}, Landroid/content/res/Configuration;->diff(Landroid/content/res/Configuration;)I

    move-result v4

    if-eqz v4, :cond_2

    .line 3835
    iput-boolean v5, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    .line 3836
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 3837
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    iput-boolean v5, v3, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 3838
    const/4 v4, 0x2

    new-array v0, v4, [I

    .line 3839
    .local v0, "anim":[I
    invoke-virtual {v3}, Lcom/android/server/wm/DisplayContent;->isDimming()Z

    move-result v4

    if-eqz v4, :cond_5

    .line 3840
    aput v6, v0, v5

    aput v6, v0, v6

    .line 3844
    :goto_2
    aget v4, v0, v6

    aget v5, v0, v5

    invoke-direct {p0, v6, v4, v5}, Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(ZII)V

    .line 3845
    new-instance v2, Landroid/content/res/Configuration;

    .end local v2    # "config":Landroid/content/res/Configuration;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTempConfiguration:Landroid/content/res/Configuration;

    invoke-direct {v2, v4}, Landroid/content/res/Configuration;-><init>(Landroid/content/res/Configuration;)V

    .local v2, "config":Landroid/content/res/Configuration;
    goto :goto_1

    .line 3842
    .local v2, "config":Landroid/content/res/Configuration;
    :cond_5
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v4, v0}, Landroid/view/WindowManagerPolicy;->selectRotationAnimationLw([I)V

    goto :goto_2
.end method


# virtual methods
.method public addAppToken(ILandroid/view/IApplicationToken;IIIZZIIZZLandroid/graphics/Rect;Landroid/content/res/Configuration;IZZII)V
    .locals 14
    .param p1, "addPos"    # I
    .param p2, "token"    # Landroid/view/IApplicationToken;
    .param p3, "taskId"    # I
    .param p4, "stackId"    # I
    .param p5, "requestedOrientation"    # I
    .param p6, "fullscreen"    # Z
    .param p7, "showForAllUsers"    # Z
    .param p8, "userId"    # I
    .param p9, "configChanges"    # I
    .param p10, "voiceInteraction"    # Z
    .param p11, "launchTaskBehind"    # Z
    .param p12, "taskBounds"    # Landroid/graphics/Rect;
    .param p13, "config"    # Landroid/content/res/Configuration;
    .param p14, "taskResizeMode"    # I
    .param p15, "alwaysFocusable"    # Z
    .param p16, "homeTask"    # Z
    .param p17, "targetSdkVersion"    # I
    .param p18, "rotationAnimationHint"    # I

    .prologue
    .line 3549
    const-string/jumbo v2, "android.permission.MANAGE_APP_TOKENS"

    .line 3550
    const-string/jumbo v3, "addAppToken()"

    .line 3549
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 3551
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 3562
    :cond_0
    :try_start_0
    invoke-interface/range {p2 .. p2}, Landroid/view/IApplicationToken;->getKeyDispatchingTimeout()J
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    move-result-wide v2

    const-wide/32 v4, 0xf4240

    mul-long v10, v2, v4

    .line 3568
    .local v10, "inputDispatchingTimeoutNanos":J
    :goto_0
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v13

    .line 3569
    :try_start_1
    invoke-interface/range {p2 .. p2}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v2

    invoke-virtual {p0, v2}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v6

    .line 3570
    .local v6, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v6, :cond_1

    .line 3571
    const-string/jumbo v2, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to add existing app token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    move-object/from16 v0, p2

    invoke-virtual {v3, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v13

    .line 3572
    return-void

    .line 3563
    .end local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .end local v10    # "inputDispatchingTimeoutNanos":J
    :catch_0
    move-exception v9

    .line 3564
    .local v9, "ex":Landroid/os/RemoteException;
    const-string/jumbo v2, "WindowManager"

    const-string/jumbo v3, "Could not get dispatching timeout."

    invoke-static {v2, v3, v9}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 3565
    const-wide v10, 0x12a05f200L

    .restart local v10    # "inputDispatchingTimeoutNanos":J
    goto :goto_0

    .line 3574
    .end local v9    # "ex":Landroid/os/RemoteException;
    .restart local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_1
    :try_start_2
    new-instance v6, Lcom/android/server/wm/AppWindowToken;

    .end local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    move-object/from16 v0, p2

    move/from16 v1, p10

    invoke-direct {v6, p0, v0, v1}, Lcom/android/server/wm/AppWindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IApplicationToken;Z)V

    .line 3575
    .restart local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    iput-wide v10, v6, Lcom/android/server/wm/AppWindowToken;->inputDispatchingTimeoutNanos:J

    .line 3576
    move/from16 v0, p6

    iput-boolean v0, v6, Lcom/android/server/wm/AppWindowToken;->appFullscreen:Z

    .line 3577
    move/from16 v0, p7

    iput-boolean v0, v6, Lcom/android/server/wm/AppWindowToken;->showForAllUsers:Z

    .line 3578
    move/from16 v0, p17

    iput v0, v6, Lcom/android/server/wm/AppWindowToken;->targetSdk:I

    .line 3579
    move/from16 v0, p5

    iput v0, v6, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I

    .line 3580
    move/from16 v0, p9

    and-int/lit16 v2, v0, 0x480

    if-eqz v2, :cond_3

    const/4 v2, 0x1

    :goto_1
    iput-boolean v2, v6, Lcom/android/server/wm/AppWindowToken;->layoutConfigChanges:Z

    .line 3582
    move/from16 v0, p11

    iput-boolean v0, v6, Lcom/android/server/wm/AppWindowToken;->mLaunchTaskBehind:Z

    .line 3583
    move/from16 v0, p15

    iput-boolean v0, v6, Lcom/android/server/wm/AppWindowToken;->mAlwaysFocusable:Z

    .line 3586
    move/from16 v0, p18

    iput v0, v6, Lcom/android/server/wm/AppWindowToken;->mRotationAnimationHint:I

    .line 3588
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    move/from16 v0, p3

    invoke-virtual {v2, v0}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v12

    check-cast v12, Lcom/android/server/wm/Task;

    .line 3589
    .local v12, "task":Lcom/android/server/wm/Task;
    if-nez v12, :cond_2

    move-object v2, p0

    move/from16 v3, p3

    move/from16 v4, p4

    move/from16 v5, p8

    move-object/from16 v7, p12

    move-object/from16 v8, p13

    .line 3590
    invoke-direct/range {v2 .. v8}, Lcom/android/server/wm/WindowManagerService;->createTaskLocked(IIILcom/android/server/wm/AppWindowToken;Landroid/graphics/Rect;Landroid/content/res/Configuration;)Lcom/android/server/wm/Task;

    move-result-object v12

    .line 3592
    :cond_2
    move/from16 v0, p14

    move/from16 v1, p16

    invoke-virtual {v12, p1, v6, v0, v1}, Lcom/android/server/wm/Task;->addAppToken(ILcom/android/server/wm/AppWindowToken;IZ)V

    .line 3594
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-interface/range {p2 .. p2}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v3

    invoke-virtual {v2, v3, v6}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 3597
    const/4 v2, 0x1

    iput-boolean v2, v6, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    .line 3598
    const/4 v2, 0x1

    iput-boolean v2, v6, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v13

    .line 3548
    return-void

    .line 3580
    .end local v12    # "task":Lcom/android/server/wm/Task;
    :cond_3
    const/4 v2, 0x0

    goto :goto_1

    .line 3568
    .end local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v2

    monitor-exit v13

    throw v2
.end method

.method public addInputConsumer(Landroid/os/Looper;Landroid/view/InputEventReceiver$Factory;)Landroid/view/WindowManagerPolicy$InputConsumer;
    .locals 4
    .param p1, "looper"    # Landroid/os/Looper;
    .param p2, "inputEventReceiverFactory"    # Landroid/view/InputEventReceiver$Factory;

    .prologue
    .line 10432
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 10433
    :try_start_0
    new-instance v0, Lcom/android/server/wm/WindowManagerService$HideNavInputConsumer;

    invoke-direct {v0, p0, p1, p2}, Lcom/android/server/wm/WindowManagerService$HideNavInputConsumer;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/Looper;Landroid/view/InputEventReceiver$Factory;)V

    .line 10435
    .local v0, "inputConsumerImpl":Lcom/android/server/wm/WindowManagerService$HideNavInputConsumer;
    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    .line 10436
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v3, 0x1

    invoke-virtual {v1, v3}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 10437
    return-object v0

    .line 10432
    .end local v0    # "inputConsumerImpl":Lcom/android/server/wm/WindowManagerService$HideNavInputConsumer;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method addInputMethodWindowToListLocked(Lcom/android/server/wm/WindowState;)V
    .locals 3
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v2, 0x1

    .line 1649
    invoke-virtual {p0, v2}, Lcom/android/server/wm/WindowManagerService;->findDesiredInputMethodWindowIndexLocked(Z)I

    move-result v0

    .line 1650
    .local v0, "pos":I
    if-ltz v0, :cond_0

    .line 1651
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v1, v1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iput-object v1, p1, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1655
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v1

    invoke-virtual {v1, v0, p1}, Lcom/android/server/wm/WindowList;->add(ILjava/lang/Object;)V

    .line 1656
    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 1657
    add-int/lit8 v1, v0, 0x1

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    .line 1658
    return-void

    .line 1660
    :cond_0
    const/4 v1, 0x0

    iput-object v1, p1, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1661
    invoke-direct {p0, p1, v2}, Lcom/android/server/wm/WindowManagerService;->addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 1662
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    .line 1648
    return-void
.end method

.method public addSystemUIVisibilityFlag(I)V
    .locals 1
    .param p1, "flags"    # I

    .prologue
    .line 5805
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    or-int/2addr v0, p1

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    .line 5804
    return-void
.end method

.method public addTask(IIZ)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "stackId"    # I
    .param p3, "toTop"    # Z

    .prologue
    .line 5284
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 5287
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v3, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/Task;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5288
    .local v2, "task":Lcom/android/server/wm/Task;
    if-nez v2, :cond_0

    monitor-exit v4

    .line 5290
    return-void

    .line 5292
    :cond_0
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v3, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;

    .line 5293
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual {v1, v2, p3}, Lcom/android/server/wm/TaskStack;->addTask(Lcom/android/server/wm/Task;Z)V

    .line 5294
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5295
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const/4 v3, 0x1

    iput-boolean v3, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5296
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v4

    .line 5283
    return-void

    .line 5284
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v2    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public addWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/view/InputChannel;)I
    .locals 40
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "seq"    # I
    .param p4, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p5, "viewVisibility"    # I
    .param p6, "displayId"    # I
    .param p7, "outContentInsets"    # Landroid/graphics/Rect;
    .param p8, "outStableInsets"    # Landroid/graphics/Rect;
    .param p9, "outOutsets"    # Landroid/graphics/Rect;
    .param p10, "outInputChannel"    # Landroid/view/InputChannel;

    .prologue
    .line 1883
    const/4 v3, 0x1

    new-array v0, v3, [I

    move-object/from16 v24, v0

    .line 1884
    .local v24, "appOp":[I
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p4

    move-object/from16 v1, v24

    invoke-interface {v3, v0, v1}, Landroid/view/WindowManagerPolicy;->checkAddPermission(Landroid/view/WindowManager$LayoutParams;[I)I

    move-result v35

    .line 1885
    .local v35, "res":I
    if-eqz v35, :cond_0

    .line 1886
    return v35

    .line 1889
    :cond_0
    const/16 v34, 0x0

    .line 1890
    .local v34, "reportNewConfig":Z
    const/4 v7, 0x0

    .line 1892
    .local v7, "attachedWindow":Lcom/android/server/wm/WindowState;
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v26

    .line 1893
    .local v26, "callingUid":I
    move-object/from16 v0, p4

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    move/from16 v37, v0

    .line 1895
    .local v37, "type":I
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v39, v0

    monitor-enter v39

    .line 1896
    :try_start_0
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-nez v3, :cond_1

    .line 1897
    new-instance v3, Ljava/lang/IllegalStateException;

    const-string/jumbo v4, "Display has not been initialialized"

    invoke-direct {v3, v4}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v3
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 1895
    .end local v7    # "attachedWindow":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    monitor-exit v39

    throw v3

    .line 1900
    .restart local v7    # "attachedWindow":Lcom/android/server/wm/WindowState;
    :cond_1
    :try_start_1
    move-object/from16 v0, p0

    move/from16 v1, p6

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v12

    .line 1901
    .local v12, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v12, :cond_2

    .line 1902
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window to a display that does not exist: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move/from16 v0, p6

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1903
    const-string/jumbo v5, ".  Aborting."

    .line 1902
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 1904
    const/16 v3, -0x9

    monitor-exit v39

    return v3

    .line 1906
    :cond_2
    :try_start_2
    move-object/from16 v0, p1

    iget v3, v0, Lcom/android/server/wm/Session;->mUid:I

    invoke-virtual {v12, v3}, Lcom/android/server/wm/DisplayContent;->hasAccess(I)Z

    move-result v3

    if-nez v3, :cond_3

    .line 1907
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window to a display for which the application does not have access: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move/from16 v0, p6

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1908
    const-string/jumbo v5, ".  Aborting."

    .line 1907
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    .line 1909
    const/16 v3, -0x9

    monitor-exit v39

    return v3

    .line 1912
    :cond_3
    :try_start_3
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-interface/range {p2 .. p2}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v4

    invoke-virtual {v3, v4}, Ljava/util/HashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v3

    if-eqz v3, :cond_4

    .line 1913
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Window "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move-object/from16 v0, p2

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string/jumbo v5, " is already added"

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 1914
    const/4 v3, -0x5

    monitor-exit v39

    return v3

    .line 1917
    :cond_4
    const/16 v3, 0x3e8

    move/from16 v0, v37

    if-lt v0, v3, :cond_6

    const/16 v3, 0x7cf

    move/from16 v0, v37

    if-gt v0, v3, :cond_6

    .line 1918
    :try_start_4
    move-object/from16 v0, p4

    iget-object v3, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    const/4 v4, 0x0

    const/4 v5, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v4, v3, v5}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/os/IBinder;Z)Lcom/android/server/wm/WindowState;

    move-result-object v7

    .line 1919
    .local v7, "attachedWindow":Lcom/android/server/wm/WindowState;
    if-nez v7, :cond_5

    .line 1920
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window with token that is not a window: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1921
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1920
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1921
    const-string/jumbo v5, ".  Aborting."

    .line 1920
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    .line 1922
    const/4 v3, -0x2

    monitor-exit v39

    return v3

    .line 1924
    :cond_5
    :try_start_5
    iget-object v3, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v3, v3, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v4, 0x3e8

    if-lt v3, v4, :cond_6

    .line 1925
    iget-object v3, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v3, v3, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v4, 0x7cf

    if-gt v3, v4, :cond_6

    .line 1926
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window with token that is a sub-window: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1927
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1926
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1927
    const-string/jumbo v5, ".  Aborting."

    .line 1926
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_0

    .line 1928
    const/4 v3, -0x2

    monitor-exit v39

    return v3

    .line 1932
    .end local v7    # "attachedWindow":Lcom/android/server/wm/WindowState;
    :cond_6
    const/16 v3, 0x7ee

    move/from16 v0, v37

    if-ne v0, v3, :cond_7

    :try_start_6
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->isPrivate()Z

    move-result v3

    if-eqz v3, :cond_8

    .line 1937
    :cond_7
    const/16 v23, 0x0

    .line 1938
    .local v23, "addToken":Z
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    move-object/from16 v0, p4

    iget-object v4, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    invoke-virtual {v3, v4}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/WindowToken;

    .line 1939
    .local v6, "token":Lcom/android/server/wm/WindowToken;
    const/16 v25, 0x0

    .line 1940
    .local v25, "atoken":Lcom/android/server/wm/AppWindowToken;
    const/16 v22, 0x0

    .line 1942
    .local v22, "addToastWindowRequiresToken":Z
    if-nez v6, :cond_12

    .line 1943
    const/4 v3, 0x1

    move/from16 v0, v37

    if-lt v0, v3, :cond_9

    const/16 v3, 0x63

    move/from16 v0, v37

    if-gt v0, v3, :cond_9

    .line 1944
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add application window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1945
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1944
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1945
    const-string/jumbo v5, ".  Aborting."

    .line 1944
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_0

    .line 1946
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1933
    .end local v6    # "token":Lcom/android/server/wm/WindowToken;
    .end local v22    # "addToastWindowRequiresToken":Z
    .end local v23    # "addToken":Z
    .end local v25    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_8
    :try_start_7
    const-string/jumbo v3, "WindowManager"

    const-string/jumbo v4, "Attempted to add private presentation window to a non-private display.  Aborting."

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_0

    .line 1934
    const/4 v3, -0x8

    monitor-exit v39

    return v3

    .line 1948
    .restart local v6    # "token":Lcom/android/server/wm/WindowToken;
    .restart local v22    # "addToastWindowRequiresToken":Z
    .restart local v23    # "addToken":Z
    .restart local v25    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_9
    const/16 v3, 0x7db

    move/from16 v0, v37

    if-ne v0, v3, :cond_a

    .line 1949
    :try_start_8
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add input method window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1950
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1949
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1950
    const-string/jumbo v5, ".  Aborting."

    .line 1949
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_8
    .catchall {:try_start_8 .. :try_end_8} :catchall_0

    .line 1951
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1953
    :cond_a
    const/16 v3, 0x7ef

    move/from16 v0, v37

    if-ne v0, v3, :cond_b

    .line 1954
    :try_start_9
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add voice interaction window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1955
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1954
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1955
    const-string/jumbo v5, ".  Aborting."

    .line 1954
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_9
    .catchall {:try_start_9 .. :try_end_9} :catchall_0

    .line 1956
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1958
    :cond_b
    const/16 v3, 0x7dd

    move/from16 v0, v37

    if-ne v0, v3, :cond_c

    .line 1959
    :try_start_a
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add wallpaper window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1960
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1959
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1960
    const-string/jumbo v5, ".  Aborting."

    .line 1959
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_a
    .catchall {:try_start_a .. :try_end_a} :catchall_0

    .line 1961
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1963
    :cond_c
    const/16 v3, 0x7e7

    move/from16 v0, v37

    if-ne v0, v3, :cond_d

    .line 1964
    :try_start_b
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add Dream window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1965
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1964
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1965
    const-string/jumbo v5, ".  Aborting."

    .line 1964
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_b
    .catchall {:try_start_b .. :try_end_b} :catchall_0

    .line 1966
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1968
    :cond_d
    const/16 v3, 0x7f3

    move/from16 v0, v37

    if-ne v0, v3, :cond_e

    .line 1969
    :try_start_c
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add QS dialog window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1970
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1969
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1970
    const-string/jumbo v5, ".  Aborting."

    .line 1969
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_c
    .catchall {:try_start_c .. :try_end_c} :catchall_0

    .line 1971
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1973
    :cond_e
    const/16 v3, 0x7f0

    move/from16 v0, v37

    if-ne v0, v3, :cond_f

    .line 1974
    :try_start_d
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add Accessibility overlay window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1975
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1974
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1975
    const-string/jumbo v5, ".  Aborting."

    .line 1974
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_d
    .catchall {:try_start_d .. :try_end_d} :catchall_0

    .line 1976
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1978
    :cond_f
    const/16 v3, 0x7d5

    move/from16 v0, v37

    if-ne v0, v3, :cond_10

    .line 1980
    :try_start_e
    move-object/from16 v0, p4

    iget-object v3, v0, Landroid/view/WindowManager$LayoutParams;->packageName:Ljava/lang/String;

    move-object/from16 v0, p0

    move/from16 v1, v26

    invoke-direct {v0, v3, v1, v7}, Lcom/android/server/wm/WindowManagerService;->doesAddToastWindowRequireToken(Ljava/lang/String;ILcom/android/server/wm/WindowState;)Z

    move-result v3

    if-eqz v3, :cond_10

    .line 1982
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add a toast window with unknown token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1983
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 1982
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1983
    const-string/jumbo v5, ".  Aborting."

    .line 1982
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_e
    .catchall {:try_start_e .. :try_end_e} :catchall_0

    .line 1984
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 1987
    :cond_10
    :try_start_f
    new-instance v6, Lcom/android/server/wm/WindowToken;

    .end local v6    # "token":Lcom/android/server/wm/WindowToken;
    move-object/from16 v0, p4

    iget-object v3, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    const/4 v4, -0x1

    const/4 v5, 0x0

    move-object/from16 v0, p0

    invoke-direct {v6, v0, v3, v4, v5}, Lcom/android/server/wm/WindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;IZ)V

    .line 1988
    .restart local v6    # "token":Lcom/android/server/wm/WindowToken;
    const/16 v23, 0x1

    .line 2060
    .end local v22    # "addToastWindowRequiresToken":Z
    .end local v25    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_11
    :goto_0
    new-instance v2, Lcom/android/server/wm/WindowState;

    .line 2061
    const/4 v3, 0x0

    aget v8, v24, v3

    move-object/from16 v3, p0

    move-object/from16 v4, p1

    move-object/from16 v5, p2

    move/from16 v9, p3

    move-object/from16 v10, p4

    move/from16 v11, p5

    .line 2060
    invoke-direct/range {v2 .. v12}, Lcom/android/server/wm/WindowState;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/Session;Landroid/view/IWindow;Lcom/android/server/wm/WindowToken;Lcom/android/server/wm/WindowState;IILandroid/view/WindowManager$LayoutParams;ILcom/android/server/wm/DisplayContent;)V

    .line 2062
    .local v2, "win":Lcom/android/server/wm/WindowState;
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mDeathRecipient:Lcom/android/server/wm/WindowState$DeathRecipient;

    if-nez v3, :cond_1d

    .line 2065
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Adding window client "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-interface/range {p2 .. p2}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v5

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2066
    const-string/jumbo v5, " that is dead, aborting."

    .line 2065
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_f
    .catchall {:try_start_f .. :try_end_f} :catchall_0

    .line 2067
    const/4 v3, -0x4

    monitor-exit v39

    return v3

    .line 1989
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    .restart local v22    # "addToastWindowRequiresToken":Z
    .restart local v25    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_12
    const/4 v3, 0x1

    move/from16 v0, v37

    if-lt v0, v3, :cond_15

    const/16 v3, 0x63

    move/from16 v0, v37

    if-gt v0, v3, :cond_15

    .line 1990
    :try_start_10
    iget-object v0, v6, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v25, v0

    .line 1991
    .local v25, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v25, :cond_13

    .line 1992
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window with non-application token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1993
    const-string/jumbo v5, ".  Aborting."

    .line 1992
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_10
    .catchall {:try_start_10 .. :try_end_10} :catchall_0

    .line 1994
    const/4 v3, -0x3

    monitor-exit v39

    return v3

    .line 1995
    :cond_13
    :try_start_11
    move-object/from16 v0, v25

    iget-boolean v3, v0, Lcom/android/server/wm/AppWindowToken;->removed:Z

    if-eqz v3, :cond_14

    .line 1996
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add window with exiting application token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 1997
    const-string/jumbo v5, ".  Aborting."

    .line 1996
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_11
    .catchall {:try_start_11 .. :try_end_11} :catchall_0

    .line 1998
    const/4 v3, -0x4

    monitor-exit v39

    return v3

    .line 2000
    :cond_14
    const/4 v3, 0x3

    move/from16 v0, v37

    if-ne v0, v3, :cond_11

    :try_start_12
    move-object/from16 v0, v25

    iget-boolean v3, v0, Lcom/android/server/wm/AppWindowToken;->firstWindowDrawn:Z
    :try_end_12
    .catchall {:try_start_12 .. :try_end_12} :catchall_0

    if-eqz v3, :cond_11

    .line 2004
    const/4 v3, -0x6

    monitor-exit v39

    return v3

    .line 2006
    .local v25, "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_15
    const/16 v3, 0x7db

    move/from16 v0, v37

    if-ne v0, v3, :cond_16

    .line 2007
    :try_start_13
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7db

    if-eq v3, v4, :cond_11

    .line 2008
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add input method window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2009
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2008
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2009
    const-string/jumbo v5, ".  Aborting."

    .line 2008
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_13
    .catchall {:try_start_13 .. :try_end_13} :catchall_0

    .line 2010
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2012
    :cond_16
    const/16 v3, 0x7ef

    move/from16 v0, v37

    if-ne v0, v3, :cond_17

    .line 2013
    :try_start_14
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7ef

    if-eq v3, v4, :cond_11

    .line 2014
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add voice interaction window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2015
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2014
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2015
    const-string/jumbo v5, ".  Aborting."

    .line 2014
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_14
    .catchall {:try_start_14 .. :try_end_14} :catchall_0

    .line 2016
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2018
    :cond_17
    const/16 v3, 0x7dd

    move/from16 v0, v37

    if-ne v0, v3, :cond_18

    .line 2019
    :try_start_15
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7dd

    if-eq v3, v4, :cond_11

    .line 2020
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add wallpaper window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2021
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2020
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2021
    const-string/jumbo v5, ".  Aborting."

    .line 2020
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_15
    .catchall {:try_start_15 .. :try_end_15} :catchall_0

    .line 2022
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2024
    :cond_18
    const/16 v3, 0x7e7

    move/from16 v0, v37

    if-ne v0, v3, :cond_19

    .line 2025
    :try_start_16
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7e7

    if-eq v3, v4, :cond_11

    .line 2026
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add Dream window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2027
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2026
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2027
    const-string/jumbo v5, ".  Aborting."

    .line 2026
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_16
    .catchall {:try_start_16 .. :try_end_16} :catchall_0

    .line 2028
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2030
    :cond_19
    const/16 v3, 0x7f0

    move/from16 v0, v37

    if-ne v0, v3, :cond_1a

    .line 2031
    :try_start_17
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7f0

    if-eq v3, v4, :cond_11

    .line 2032
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add Accessibility overlay window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2033
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2032
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2033
    const-string/jumbo v5, ".  Aborting."

    .line 2032
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_17
    .catchall {:try_start_17 .. :try_end_17} :catchall_0

    .line 2034
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2036
    :cond_1a
    const/16 v3, 0x7d5

    move/from16 v0, v37

    if-ne v0, v3, :cond_1b

    .line 2038
    :try_start_18
    move-object/from16 v0, p4

    iget-object v3, v0, Landroid/view/WindowManager$LayoutParams;->packageName:Ljava/lang/String;

    move-object/from16 v0, p0

    move/from16 v1, v26

    invoke-direct {v0, v3, v1, v7}, Lcom/android/server/wm/WindowManagerService;->doesAddToastWindowRequireToken(Ljava/lang/String;ILcom/android/server/wm/WindowState;)Z

    move-result v22

    .line 2040
    .local v22, "addToastWindowRequiresToken":Z
    if-eqz v22, :cond_11

    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7d5

    if-eq v3, v4, :cond_11

    .line 2041
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add a toast window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2042
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2041
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2042
    const-string/jumbo v5, ".  Aborting."

    .line 2041
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_18
    .catchall {:try_start_18 .. :try_end_18} :catchall_0

    .line 2043
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2045
    .local v22, "addToastWindowRequiresToken":Z
    :cond_1b
    const/16 v3, 0x7f3

    move/from16 v0, v37

    if-ne v0, v3, :cond_1c

    .line 2046
    :try_start_19
    iget v3, v6, Lcom/android/server/wm/WindowToken;->windowType:I

    const/16 v4, 0x7f3

    if-eq v3, v4, :cond_11

    .line 2047
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to add QS dialog window with bad token "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2048
    move-object/from16 v0, p4

    iget-object v5, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2047
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 2048
    const-string/jumbo v5, ".  Aborting."

    .line 2047
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_19
    .catchall {:try_start_19 .. :try_end_19} :catchall_0

    .line 2049
    const/4 v3, -0x1

    monitor-exit v39

    return v3

    .line 2051
    :cond_1c
    :try_start_1a
    iget-object v3, v6, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v3, :cond_11

    .line 2052
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Non-null appWindowToken for system window of type="

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move/from16 v0, v37

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 2055
    const/4 v3, 0x0

    move-object/from16 v0, p4

    iput-object v3, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    .line 2056
    new-instance v6, Lcom/android/server/wm/WindowToken;

    .end local v6    # "token":Lcom/android/server/wm/WindowToken;
    const/4 v3, 0x0

    const/4 v4, -0x1

    const/4 v5, 0x0

    move-object/from16 v0, p0

    invoke-direct {v6, v0, v3, v4, v5}, Lcom/android/server/wm/WindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;IZ)V

    .line 2057
    .restart local v6    # "token":Lcom/android/server/wm/WindowToken;
    const/16 v23, 0x1

    goto/16 :goto_0

    .line 2070
    .end local v22    # "addToastWindowRequiresToken":Z
    .end local v25    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .restart local v2    # "win":Lcom/android/server/wm/WindowState;
    :cond_1d
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    if-nez v3, :cond_1e

    .line 2071
    const-string/jumbo v3, "WindowManager"

    const-string/jumbo v4, "Adding window to Display that has been removed."

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1a
    .catchall {:try_start_1a .. :try_end_1a} :catchall_0

    .line 2072
    const/16 v3, -0x9

    monitor-exit v39

    return v3

    .line 2075
    :cond_1e
    :try_start_1b
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-interface {v3, v4}, Landroid/view/WindowManagerPolicy;->adjustWindowParamsLw(Landroid/view/WindowManager$LayoutParams;)V

    .line 2076
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p4

    invoke-interface {v3, v0}, Landroid/view/WindowManagerPolicy;->checkShowToOwnerOnly(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v3

    invoke-virtual {v2, v3}, Lcom/android/server/wm/WindowState;->setShowToOwnerOnlyLocked(Z)V

    .line 2078
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p4

    invoke-interface {v3, v2, v0}, Landroid/view/WindowManagerPolicy;->prepareAddWindowLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManager$LayoutParams;)I
    :try_end_1b
    .catchall {:try_start_1b .. :try_end_1b} :catchall_0

    move-result v35

    move-object/from16 v0, p0

    invoke-static {v0, v2}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->isFlymeInterceptWindow(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/WindowState;)Z

    move-result v3

    if-eqz v3, :cond_flyme_0

    move-object/from16 v0, p0

    invoke-static {v0, v2}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->sendFlymeMessage(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/WindowState;)I

    move-result v3

    monitor-exit v39

    return v3

    :cond_flyme_0
    
    if-eqz v35, :cond_1f

    monitor-exit v39

    return v35

    :cond_1f

    move-object/from16 v0, p0

    move-object/from16 v1, p4

    invoke-static {v0, v1, v2}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->adjustFlymeKeyguardFlags(Lcom/android/server/wm/WindowManagerService;Landroid/view/WindowManager$LayoutParams;Lcom/android/server/wm/WindowState;)V

    if-eqz p10, :cond_22

    :try_start_1c
    move-object/from16 v0, p4

    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->inputFeatures:I

    and-int/lit8 v3, v3, 0x2

    if-nez v3, :cond_21

    const/16 v31, 0x1

    .line 2085
    .local v31, "openInputChannels":Z
    :goto_1
    if-eqz v31, :cond_20

    .line 2086
    move-object/from16 v0, p10

    invoke-virtual {v2, v0}, Lcom/android/server/wm/WindowState;->openInputChannel(Landroid/view/InputChannel;)V

    .line 2099
    :cond_20
    const/16 v3, 0x7d5

    move/from16 v0, v37

    if-ne v0, v3, :cond_25

    .line 2100
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    move/from16 v0, v26

    invoke-virtual {v3, v0}, Lcom/android/server/wm/DisplayContent;->canAddToastWindowForUid(I)Z

    move-result v3

    if-nez v3, :cond_23

    .line 2101
    const-string/jumbo v3, "WindowManager"

    const-string/jumbo v4, "Adding more than one toast window for UID at a time."

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1c
    .catchall {:try_start_1c .. :try_end_1c} :catchall_0

    .line 2102
    const/4 v3, -0x5

    monitor-exit v39

    return v3

    .line 2084
    .end local v31    # "openInputChannels":Z
    :cond_21
    const/16 v31, 0x0

    goto :goto_1

    .line 2083
    :cond_22
    const/16 v31, 0x0

    goto :goto_1

    .line 2109
    .restart local v31    # "openInputChannels":Z
    :cond_23
    if-nez v22, :cond_24

    .line 2110
    :try_start_1d
    move-object/from16 v0, p4

    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    and-int/lit8 v3, v3, 0x8

    if-nez v3, :cond_34

    .line 2113
    :cond_24
    :goto_2
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    .line 2114
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v5, 0x34

    invoke-virtual {v4, v5, v2}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v4

    .line 2115
    iget-object v5, v2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-wide v8, v5, Landroid/view/WindowManager$LayoutParams;->hideTimeoutMilliseconds:J

    .line 2113
    invoke-virtual {v3, v4, v8, v9}, Lcom/android/server/wm/WindowManagerService$H;->sendMessageDelayed(Landroid/os/Message;J)Z

    .line 2121
    :cond_25
    const/16 v35, 0x0

    .line 2123
    invoke-static/range {v37 .. v37}, Lcom/android/server/wm/WindowManagerService;->excludeWindowTypeFromTapOutTask(I)Z

    move-result v3

    if-eqz v3, :cond_26

    .line 2124
    iget-object v3, v12, Lcom/android/server/wm/DisplayContent;->mTapExcludedWindows:Ljava/util/ArrayList;

    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 2127
    :cond_26
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v32

    .line 2129
    .local v32, "origId":J
    if-eqz v23, :cond_27

    .line 2130
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    move-object/from16 v0, p4

    iget-object v4, v0, Landroid/view/WindowManager$LayoutParams;->token:Landroid/os/IBinder;

    invoke-virtual {v3, v4, v6}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 2132
    :cond_27
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->attach()V

    .line 2133
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-interface/range {p2 .. p2}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v4

    invoke-virtual {v3, v4, v2}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 2134
    iget v3, v2, Lcom/android/server/wm/WindowState;->mAppOp:I

    const/4 v4, -0x1

    if-eq v3, v4, :cond_28

    .line 2135
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    iget v4, v2, Lcom/android/server/wm/WindowState;->mAppOp:I

    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getOwningUid()I

    move-result v5

    .line 2136
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->getOwningPackage()Ljava/lang/String;

    move-result-object v8

    .line 2135
    invoke-virtual {v3, v4, v5, v8}, Landroid/app/AppOpsManager;->startOpNoThrow(IILjava/lang/String;)I

    move-result v36

    .line 2137
    .local v36, "startOpResult":I
    if-eqz v36, :cond_28

    .line 2138
    const/4 v3, 0x3

    move/from16 v0, v36

    if-eq v0, v3, :cond_28

    .line 2139
    const/4 v3, 0x0

    invoke-virtual {v2, v3}, Lcom/android/server/wm/WindowState;->setAppOpVisibilityLw(Z)V

    .line 2143
    .end local v36    # "startOpResult":I
    :cond_28
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_35

    const/16 v29, 0x0

    .line 2144
    .local v29, "hideSystemAlertWindows":Z
    :goto_3
    move/from16 v0, v29

    invoke-virtual {v2, v0}, Lcom/android/server/wm/WindowState;->setForceHideNonSystemOverlayWindowIfNeeded(Z)V

    .line 2146
    const/4 v3, 0x3

    move/from16 v0, v37

    if-ne v0, v3, :cond_29

    iget-object v3, v6, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v3, :cond_29

    .line 2147
    iget-object v3, v6, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    iput-object v2, v3, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    .line 2152
    :cond_29
    const/16 v30, 0x1

    .line 2154
    .local v30, "imMayMove":Z
    const/16 v3, 0x7db

    move/from16 v0, v37

    if-ne v0, v3, :cond_36

    .line 2155
    const/4 v3, 0x1

    iput-boolean v3, v2, Lcom/android/server/wm/WindowState;->mGivenInsetsPending:Z

    .line 2156
    move-object/from16 v0, p0

    iput-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 2157
    move-object/from16 v0, p0

    invoke-virtual {v0, v2}, Lcom/android/server/wm/WindowManagerService;->addInputMethodWindowToListLocked(Lcom/android/server/wm/WindowState;)V

    .line 2158
    const/16 v30, 0x0

    .line 2183
    :cond_2a
    :goto_4
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->applyScrollIfNeeded()V

    .line 2187
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->applyAdjustForImeIfNeeded()V

    .line 2189
    const/16 v3, 0x7f2

    move/from16 v0, v37

    if-ne v0, v3, :cond_2b

    .line 2190
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    invoke-virtual {v3}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v3

    invoke-virtual {v3, v2}, Lcom/android/server/wm/DockedStackDividerController;->setWindow(Lcom/android/server/wm/WindowState;)V

    .line 2193
    :cond_2b
    iget-object v0, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v38, v0

    .line 2194
    .local v38, "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    const/4 v3, 0x1

    move-object/from16 v0, v38

    iput-boolean v3, v0, Lcom/android/server/wm/WindowStateAnimator;->mEnterAnimationPending:Z

    .line 2195
    const/4 v3, 0x1

    move-object/from16 v0, v38

    iput-boolean v3, v0, Lcom/android/server/wm/WindowStateAnimator;->mEnteringAnimation:Z

    .line 2197
    if-eqz v25, :cond_2c

    move-object/from16 v0, p0

    move-object/from16 v1, v25

    invoke-direct {v0, v1}, Lcom/android/server/wm/WindowManagerService;->prepareWindowReplacementTransition(Lcom/android/server/wm/AppWindowToken;)Z

    move-result v3

    if-eqz v3, :cond_3a

    .line 2204
    :cond_2c
    :goto_5
    iget-boolean v3, v12, Lcom/android/server/wm/DisplayContent;->isDefaultDisplay:Z

    if-eqz v3, :cond_3c

    .line 2205
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v27

    .line 2207
    .local v27, "displayInfo":Landroid/view/DisplayInfo;
    if-eqz v25, :cond_3b

    move-object/from16 v0, v25

    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    if-eqz v3, :cond_3b

    .line 2208
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    .line 2209
    .local v15, "taskBounds":Landroid/graphics/Rect;
    move-object/from16 v0, v25

    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    invoke-virtual {v3, v4}, Lcom/android/server/wm/Task;->getBounds(Landroid/graphics/Rect;)V

    .line 2213
    .end local v15    # "taskBounds":Landroid/graphics/Rect;
    :goto_6
    move-object/from16 v0, p0

    iget-object v13, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget-object v14, v2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    move/from16 v16, v0

    .line 2214
    move-object/from16 v0, v27

    iget v0, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    move/from16 v17, v0

    move-object/from16 v0, v27

    iget v0, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    move/from16 v18, v0

    move-object/from16 v19, p7

    move-object/from16 v20, p8

    move-object/from16 v21, p9

    .line 2213
    invoke-interface/range {v13 .. v21}, Landroid/view/WindowManagerPolicy;->getInsetHintLw(Landroid/view/WindowManager$LayoutParams;Landroid/graphics/Rect;IIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)Z

    move-result v3

    if-eqz v3, :cond_2d

    .line 2216
    const/16 v35, 0x4

    .line 2223
    .end local v27    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_2d
    :goto_7
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mInTouchMode:Z

    if-eqz v3, :cond_2e

    .line 2224
    or-int/lit8 v35, v35, 0x1

    .line 2226
    :cond_2e
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v3, :cond_3d

    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-boolean v3, v3, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    if-eqz v3, :cond_3d

    .line 2230
    :goto_8
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v3}, Lcom/android/server/wm/InputMonitor;->setUpdateInputWindowsNeededLw()V

    .line 2232
    const/16 v28, 0x0

    .line 2233
    .local v28, "focusChanged":Z
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->canReceiveKeys()Z

    move-result v3

    if-eqz v3, :cond_2f

    .line 2234
    const/4 v3, 0x1

    .line 2235
    const/4 v4, 0x0

    .line 2234
    move-object/from16 v0, p0

    invoke-virtual {v0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    move-result v28

    .line 2236
    .local v28, "focusChanged":Z
    if-eqz v28, :cond_2f

    .line 2237
    const/16 v30, 0x0

    .line 2241
    .end local v28    # "focusChanged":Z
    :cond_2f
    if-eqz v30, :cond_30

    .line 2242
    const/4 v3, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodWindowsIfNeededLocked(Z)Z

    .line 2245
    :cond_30
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v4

    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    .line 2249
    if-eqz v28, :cond_31

    .line 2250
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    const/4 v5, 0x0

    invoke-virtual {v3, v4, v5}, Lcom/android/server/wm/InputMonitor;->setInputFocusLw(Lcom/android/server/wm/WindowState;Z)V

    .line 2252
    :cond_31
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v4, 0x0

    invoke-virtual {v3, v4}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 2257
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->isVisibleOrAdding()Z

    move-result v3

    if-eqz v3, :cond_32

    const/4 v3, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z
    :try_end_1d
    .catchall {:try_start_1d .. :try_end_1d} :catchall_0

    move-result v3

    if-eqz v3, :cond_32

    .line 2258
    const/16 v34, 0x1

    :cond_32
    monitor-exit v39

    .line 2262
    if-eqz v34, :cond_33

    .line 2263
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->sendNewConfiguration()V

    .line 2266
    :cond_33
    invoke-static/range {v32 .. v33}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2268
    return v35

    .line 2111
    .end local v29    # "hideSystemAlertWindows":Z
    .end local v30    # "imMayMove":Z
    .end local v32    # "origId":J
    .end local v38    # "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    :cond_34
    :try_start_1e
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eqz v3, :cond_24

    .line 2112
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    iget v3, v3, Lcom/android/server/wm/WindowState;->mOwnerUid:I

    move/from16 v0, v26

    if-eq v3, v0, :cond_25

    goto/16 :goto_2

    .line 2143
    .restart local v32    # "origId":J
    :cond_35
    const/16 v29, 0x1

    goto/16 :goto_3

    .line 2159
    .restart local v29    # "hideSystemAlertWindows":Z
    .restart local v30    # "imMayMove":Z
    :cond_36
    const/16 v3, 0x7dc

    move/from16 v0, v37

    if-ne v0, v3, :cond_37

    .line 2160
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 2161
    const/4 v3, 0x1

    move-object/from16 v0, p0

    invoke-direct {v0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 2162
    const/4 v3, 0x1

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->findDesiredInputMethodWindowIndexLocked(Z)I

    move-result v3

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    .line 2163
    const/16 v30, 0x0

    goto/16 :goto_4

    .line 2165
    :cond_37
    const/4 v3, 0x1

    move-object/from16 v0, p0

    invoke-direct {v0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->addWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 2166
    const/16 v3, 0x7dd

    move/from16 v0, v37

    if-ne v0, v3, :cond_38

    .line 2167
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v3}, Lcom/android/server/wm/WallpaperController;->clearLastWallpaperTimeoutTime()V

    .line 2168
    iget v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v3, v3, 0x4

    iput v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    goto/16 :goto_4

    .line 2169
    :cond_38
    move-object/from16 v0, p4

    iget v3, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v4, 0x100000

    and-int/2addr v3, v4

    if-eqz v3, :cond_39

    .line 2170
    iget v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v3, v3, 0x4

    iput v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    goto/16 :goto_4

    .line 2171
    :cond_39
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v3, v2}, Lcom/android/server/wm/WallpaperController;->isBelowWallpaperTarget(Lcom/android/server/wm/WindowState;)Z

    move-result v3

    if-eqz v3, :cond_2a

    .line 2177
    iget v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v3, v3, 0x4

    iput v3, v12, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    goto/16 :goto_4

    .line 2201
    .restart local v38    # "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    :cond_3a
    move-object/from16 v0, p0

    move-object/from16 v1, v25

    invoke-direct {v0, v1}, Lcom/android/server/wm/WindowManagerService;->prepareNoneTransitionForRelaunching(Lcom/android/server/wm/AppWindowToken;)V

    goto/16 :goto_5

    .line 2211
    .restart local v27    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_3b
    const/4 v15, 0x0

    .local v15, "taskBounds":Landroid/graphics/Rect;
    goto/16 :goto_6

    .line 2219
    .end local v15    # "taskBounds":Landroid/graphics/Rect;
    .end local v27    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_3c
    invoke-virtual/range {p7 .. p7}, Landroid/graphics/Rect;->setEmpty()V

    .line 2220
    invoke-virtual/range {p8 .. p8}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_1e
    .catchall {:try_start_1e .. :try_end_1e} :catchall_0

    goto/16 :goto_7

    .line 2227
    :cond_3d
    or-int/lit8 v35, v35, 0x2

    goto/16 :goto_8
.end method

.method public addWindowChangeListener(Lcom/android/server/wm/WindowManagerService$WindowChangeListener;)V
    .locals 2
    .param p1, "listener"    # Lcom/android/server/wm/WindowManagerService$WindowChangeListener;

    .prologue
    .line 7463
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 7464
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v0, p1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 7462
    return-void

    .line 7463
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public addWindowToken(Landroid/os/IBinder;I)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "type"    # I

    .prologue
    .line 3444
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 3445
    const-string/jumbo v2, "addWindowToken()"

    .line 3444
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 3446
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 3449
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 3450
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowToken;

    .line 3451
    .local v0, "wtoken":Lcom/android/server/wm/WindowToken;
    if-eqz v0, :cond_1

    .line 3452
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to add existing input method token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 3453
    return-void

    .line 3455
    :cond_1
    :try_start_1
    new-instance v0, Lcom/android/server/wm/WindowToken;

    .end local v0    # "wtoken":Lcom/android/server/wm/WindowToken;
    const/4 v1, 0x1

    invoke-direct {v0, p0, p1, p2, v1}, Lcom/android/server/wm/WindowToken;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;IZ)V

    .line 3456
    .restart local v0    # "wtoken":Lcom/android/server/wm/WindowToken;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1, v0}, Ljava/util/HashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    .line 3457
    const/16 v1, 0x7dd

    if-ne p2, v1, :cond_2

    .line 3458
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v1, v0}, Lcom/android/server/wm/WallpaperController;->addWallpaperToken(Lcom/android/server/wm/WindowToken;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_2
    monitor-exit v2

    .line 3443
    return-void

    .line 3449
    .end local v0    # "wtoken":Lcom/android/server/wm/WindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method adjustAnimationBackground(Lcom/android/server/wm/WindowStateAnimator;)I
    .locals 4
    .param p1, "winAnimator"    # Lcom/android/server/wm/WindowStateAnimator;

    .prologue
    .line 9846
    iget-object v3, p1, Lcom/android/server/wm/WindowStateAnimator;->mWin:Lcom/android/server/wm/WindowState;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v2

    .line 9847
    .local v2, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v2}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    add-int/lit8 v0, v3, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_1

    .line 9848
    invoke-virtual {v2, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 9849
    .local v1, "testWin":Lcom/android/server/wm/WindowState;
    iget-boolean v3, v1, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v3, :cond_0

    invoke-virtual {v1}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v3

    if-eqz v3, :cond_0

    .line 9850
    iget-object v3, v1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v3, v3, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    return v3

    .line 9847
    :cond_0
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 9853
    .end local v1    # "testWin":Lcom/android/server/wm/WindowState;
    :cond_1
    iget v3, p1, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    return v3
.end method

.method adjustForImeIfNeeded(Lcom/android/server/wm/DisplayContent;)V
    .locals 23
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    .line 7947
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 7948
    .local v5, "imeWin":Lcom/android/server/wm/WindowState;
    if-eqz v5, :cond_3

    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z

    move-result v1

    if-eqz v1, :cond_3

    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->isDisplayedLw()Z

    move-result v1

    if-eqz v1, :cond_3

    .line 7949
    move-object/from16 v0, p1

    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v1}, Lcom/android/server/wm/DockedStackDividerController;->isImeHideRequested()Z

    move-result v1

    if-eqz v1, :cond_2

    const/16 v19, 0x0

    .line 7950
    .local v19, "imeVisible":Z
    :goto_0
    const/4 v1, 0x3

    move-object/from16 v0, p0

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService;->isStackVisibleLocked(I)Z

    move-result v10

    .line 7951
    .local v10, "dockVisible":Z
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getImeFocusStackLocked()Lcom/android/server/wm/TaskStack;

    move-result-object v18

    .line 7952
    .local v18, "imeTargetStack":Lcom/android/server/wm/TaskStack;
    if-eqz v10, :cond_4

    if-eqz v18, :cond_4

    .line 7953
    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/TaskStack;->getDockSide()I

    move-result v15

    .line 7954
    .local v15, "imeDockSide":I
    :goto_1
    const/4 v1, 0x2

    if-ne v15, v1, :cond_5

    const/16 v17, 0x1

    .line 7955
    .local v17, "imeOnTop":Z
    :goto_2
    const/4 v1, 0x4

    if-ne v15, v1, :cond_6

    const/4 v2, 0x1

    .line 7956
    .local v2, "imeOnBottom":Z
    :goto_3
    move-object/from16 v0, p1

    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v1}, Lcom/android/server/wm/DockedStackDividerController;->isMinimizedDock()Z

    move-result v13

    .line 7957
    .local v13, "dockMinimized":Z
    move-object/from16 v0, p0

    iget-object v1, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy;->getInputMethodWindowVisibleHeightLw()I

    move-result v6

    .line 7958
    .local v6, "imeHeight":I
    if-eqz v19, :cond_8

    .line 7959
    move-object/from16 v0, p1

    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v1}, Lcom/android/server/wm/DockedStackDividerController;->getImeHeightAdjustedFor()I

    move-result v1

    if-eq v6, v1, :cond_7

    const/16 v16, 0x1

    .line 7967
    .local v16, "imeHeightChanged":Z
    :goto_4
    if-eqz v19, :cond_1

    if-eqz v10, :cond_1

    if-nez v17, :cond_0

    if-eqz v2, :cond_1

    :cond_0
    if-eqz v13, :cond_9

    .line 7981
    :cond_1
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/DisplayContent;->getStacks()Ljava/util/ArrayList;

    move-result-object v22

    .line 7982
    .local v22, "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    invoke-virtual/range {v22 .. v22}, Ljava/util/ArrayList;->size()I

    move-result v1

    add-int/lit8 v14, v1, -0x1

    .local v14, "i":I
    :goto_5
    if-ltz v14, :cond_10

    .line 7983
    move-object/from16 v0, v22

    invoke-virtual {v0, v14}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v21

    check-cast v21, Lcom/android/server/wm/TaskStack;

    .line 7984
    .local v21, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v10, :cond_f

    const/4 v1, 0x0

    :goto_6
    move-object/from16 v0, v21

    invoke-virtual {v0, v1}, Lcom/android/server/wm/TaskStack;->resetAdjustedForIme(Z)V

    .line 7982
    add-int/lit8 v14, v14, -0x1

    goto :goto_5

    .line 7949
    .end local v2    # "imeOnBottom":Z
    .end local v6    # "imeHeight":I
    .end local v10    # "dockVisible":Z
    .end local v13    # "dockMinimized":Z
    .end local v14    # "i":I
    .end local v15    # "imeDockSide":I
    .end local v16    # "imeHeightChanged":Z
    .end local v17    # "imeOnTop":Z
    .end local v18    # "imeTargetStack":Lcom/android/server/wm/TaskStack;
    .end local v19    # "imeVisible":Z
    .end local v21    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v22    # "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    :cond_2
    const/16 v19, 0x1

    .restart local v19    # "imeVisible":Z
    goto :goto_0

    .line 7948
    .end local v19    # "imeVisible":Z
    :cond_3
    const/16 v19, 0x0

    .restart local v19    # "imeVisible":Z
    goto :goto_0

    .line 7953
    .restart local v10    # "dockVisible":Z
    .restart local v18    # "imeTargetStack":Lcom/android/server/wm/TaskStack;
    :cond_4
    const/4 v15, -0x1

    goto :goto_1

    .line 7954
    .restart local v15    # "imeDockSide":I
    :cond_5
    const/16 v17, 0x0

    .restart local v17    # "imeOnTop":Z
    goto :goto_2

    .line 7955
    :cond_6
    const/4 v2, 0x0

    .restart local v2    # "imeOnBottom":Z
    goto :goto_3

    .line 7959
    .restart local v6    # "imeHeight":I
    .restart local v13    # "dockMinimized":Z
    :cond_7
    const/16 v16, 0x0

    .restart local v16    # "imeHeightChanged":Z
    goto :goto_4

    .line 7958
    .end local v16    # "imeHeightChanged":Z
    :cond_8
    const/16 v16, 0x0

    .restart local v16    # "imeHeightChanged":Z
    goto :goto_4

    .line 7968
    :cond_9
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/DisplayContent;->getStacks()Ljava/util/ArrayList;

    move-result-object v22

    .line 7969
    .restart local v22    # "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    invoke-virtual/range {v22 .. v22}, Ljava/util/ArrayList;->size()I

    move-result v1

    add-int/lit8 v14, v1, -0x1

    .restart local v14    # "i":I
    :goto_7
    if-ltz v14, :cond_e

    .line 7970
    move-object/from16 v0, v22

    invoke-virtual {v0, v14}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v21

    check-cast v21, Lcom/android/server/wm/TaskStack;

    .line 7971
    .restart local v21    # "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual/range {v21 .. v21}, Lcom/android/server/wm/TaskStack;->getDockSide()I

    move-result v1

    const/4 v3, 0x4

    if-ne v1, v3, :cond_b

    const/16 v20, 0x1

    .line 7972
    .local v20, "isDockedOnBottom":Z
    :goto_8
    invoke-virtual/range {v21 .. v21}, Lcom/android/server/wm/TaskStack;->isVisibleLocked()Z

    move-result v1

    if-eqz v1, :cond_d

    if-nez v2, :cond_a

    if-eqz v20, :cond_d

    .line 7973
    :cond_a
    if-eqz v2, :cond_c

    move/from16 v1, v16

    :goto_9
    move-object/from16 v0, v21

    invoke-virtual {v0, v5, v1}, Lcom/android/server/wm/TaskStack;->setAdjustedForIme(Lcom/android/server/wm/WindowState;Z)V

    .line 7969
    :goto_a
    add-int/lit8 v14, v14, -0x1

    goto :goto_7

    .line 7971
    .end local v20    # "isDockedOnBottom":Z
    :cond_b
    const/16 v20, 0x0

    .restart local v20    # "isDockedOnBottom":Z
    goto :goto_8

    .line 7973
    :cond_c
    const/4 v1, 0x0

    goto :goto_9

    .line 7975
    :cond_d
    const/4 v1, 0x0

    move-object/from16 v0, v21

    invoke-virtual {v0, v1}, Lcom/android/server/wm/TaskStack;->resetAdjustedForIme(Z)V

    goto :goto_a

    .line 7978
    .end local v20    # "isDockedOnBottom":Z
    .end local v21    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_e
    move-object/from16 v0, p1

    iget-object v1, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    .line 7979
    const/4 v3, 0x1

    const/4 v4, 0x1

    .line 7978
    invoke-virtual/range {v1 .. v6}, Lcom/android/server/wm/DockedStackDividerController;->setAdjustedForIme(ZZZLcom/android/server/wm/WindowState;I)V

    .line 7946
    :goto_b
    return-void

    .line 7984
    .restart local v21    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_f
    const/4 v1, 0x1

    goto :goto_6

    .line 7986
    .end local v21    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_10
    move-object/from16 v0, p1

    iget-object v7, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    .line 7987
    const/4 v8, 0x0

    const/4 v9, 0x0

    move-object v11, v5

    move v12, v6

    .line 7986
    invoke-virtual/range {v7 .. v12}, Lcom/android/server/wm/DockedStackDividerController;->setAdjustedForIme(ZZZLcom/android/server/wm/WindowState;I)V

    goto :goto_b
.end method

.method public animateResizePinnedStack(Landroid/graphics/Rect;I)V
    .locals 8
    .param p1, "bounds"    # Landroid/graphics/Rect;
    .param p2, "animationDuration"    # I

    .prologue
    .line 11358
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 11359
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    const/4 v1, 0x4

    invoke-virtual {v0, v1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/TaskStack;

    .line 11360
    .local v2, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v2, :cond_0

    .line 11361
    sget-object v0, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    const-string/jumbo v1, "animateResizePinnedStack: stackId 4 not found."

    invoke-static {v0, v1}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v6

    .line 11362
    return-void

    .line 11364
    :cond_0
    :try_start_1
    new-instance v3, Landroid/graphics/Rect;

    invoke-direct {v3}, Landroid/graphics/Rect;-><init>()V

    .line 11365
    .local v3, "originalBounds":Landroid/graphics/Rect;
    invoke-virtual {v2, v3}, Lcom/android/server/wm/TaskStack;->getBounds(Landroid/graphics/Rect;)V

    .line 11366
    invoke-static {}, Lcom/android/server/UiThread;->getHandler()Landroid/os/Handler;

    move-result-object v7

    new-instance v0, Lcom/android/server/wm/WindowManagerService$10;

    move-object v1, p0

    move-object v4, p1

    move v5, p2

    invoke-direct/range {v0 .. v5}, Lcom/android/server/wm/WindowManagerService$10;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/TaskStack;Landroid/graphics/Rect;Landroid/graphics/Rect;I)V

    invoke-virtual {v7, v0}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v6

    .line 11357
    return-void

    .line 11358
    .end local v2    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v3    # "originalBounds":Landroid/graphics/Rect;
    :catchall_0
    move-exception v0

    monitor-exit v6

    throw v0
.end method

.method public attachStack(IIZ)Landroid/graphics/Rect;
    .locals 10
    .param p1, "stackId"    # I
    .param p2, "displayId"    # I
    .param p3, "onTop"    # Z

    .prologue
    const/4 v9, 0x0

    .line 5176
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v4

    .line 5178
    .local v4, "origId":J
    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v7
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 5179
    :try_start_1
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v6, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/DisplayContent;

    .line 5180
    .local v2, "displayContent":Lcom/android/server/wm/DisplayContent;
    const/4 v0, 0x0

    .line 5181
    .local v0, "attachedToDisplay":Z
    if-eqz v2, :cond_4

    .line 5182
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v6, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/TaskStack;

    .line 5183
    .local v3, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v3, :cond_0

    .line 5186
    invoke-virtual {v2, p1}, Lcom/android/server/wm/DisplayContent;->getStackById(I)Lcom/android/server/wm/TaskStack;

    move-result-object v3

    .line 5187
    if-eqz v3, :cond_2

    .line 5190
    invoke-virtual {v2, v3}, Lcom/android/server/wm/DisplayContent;->detachStack(Lcom/android/server/wm/TaskStack;)V

    .line 5191
    const/4 v6, 0x0

    iput-boolean v6, v3, Lcom/android/server/wm/TaskStack;->mDeferDetach:Z

    .line 5192
    const/4 v0, 0x1

    .line 5197
    :goto_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v6, p1, v3}, Landroid/util/SparseArray;->put(ILjava/lang/Object;)V

    .line 5198
    const/4 v6, 0x3

    if-ne p1, v6, :cond_0

    .line 5199
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v6

    iget-object v6, v6, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    .line 5200
    const/4 v8, 0x1

    .line 5199
    invoke-virtual {v6, v8}, Lcom/android/server/wm/DockedStackDividerController;->notifyDockedStackExistsChanged(Z)V

    .line 5203
    :cond_0
    if-nez v0, :cond_1

    .line 5204
    invoke-virtual {v3, v2}, Lcom/android/server/wm/TaskStack;->attachDisplayContent(Lcom/android/server/wm/DisplayContent;)V

    .line 5206
    :cond_1
    invoke-virtual {v2, v3, p3}, Lcom/android/server/wm/DisplayContent;->attachStack(Lcom/android/server/wm/TaskStack;Z)V

    .line 5207
    invoke-virtual {v3}, Lcom/android/server/wm/TaskStack;->getRawFullscreen()Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v6

    if-eqz v6, :cond_3

    :try_start_2
    monitor-exit v7
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 5216
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5208
    return-object v9

    .line 5194
    :cond_2
    :try_start_3
    new-instance v3, Lcom/android/server/wm/TaskStack;

    .end local v3    # "stack":Lcom/android/server/wm/TaskStack;
    invoke-direct {v3, p0, p1}, Lcom/android/server/wm/TaskStack;-><init>(Lcom/android/server/wm/WindowManagerService;I)V

    .restart local v3    # "stack":Lcom/android/server/wm/TaskStack;
    goto :goto_0

    .line 5210
    :cond_3
    new-instance v1, Landroid/graphics/Rect;

    invoke-direct {v1}, Landroid/graphics/Rect;-><init>()V

    .line 5211
    .local v1, "bounds":Landroid/graphics/Rect;
    invoke-virtual {v3, v1}, Lcom/android/server/wm/TaskStack;->getRawBounds(Landroid/graphics/Rect;)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :try_start_4
    monitor-exit v7
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 5216
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5212
    return-object v1

    .end local v1    # "bounds":Landroid/graphics/Rect;
    .end local v3    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_4
    :try_start_5
    monitor-exit v7
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    .line 5216
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5218
    return-object v9

    .line 5178
    .end local v0    # "attachedToDisplay":Z
    .end local v2    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v6

    :try_start_6
    monitor-exit v7

    throw v6
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_1

    .line 5215
    :catchall_1
    move-exception v6

    .line 5216
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5215
    throw v6
.end method

.method public cancelTaskThumbnailTransition(I)V
    .locals 3
    .param p1, "taskId"    # I

    .prologue
    .line 5275
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5276
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5277
    .local v0, "task":Lcom/android/server/wm/Task;
    if-eqz v0, :cond_0

    .line 5278
    invoke-virtual {v0}, Lcom/android/server/wm/Task;->cancelTaskThumbnailTransition()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 5274
    return-void

    .line 5275
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public cancelTaskWindowTransition(I)V
    .locals 3
    .param p1, "taskId"    # I

    .prologue
    .line 5265
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5266
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5267
    .local v0, "task":Lcom/android/server/wm/Task;
    if-eqz v0, :cond_0

    .line 5268
    invoke-virtual {v0}, Lcom/android/server/wm/Task;->cancelTaskWindowTransition()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 5264
    return-void

    .line 5265
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method checkDrawnWindowsLocked()V
    .locals 4

    .prologue
    .line 9759
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v2

    if-nez v2, :cond_0

    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawnCallback:Ljava/lang/Runnable;

    if-nez v2, :cond_1

    .line 9760
    :cond_0
    return-void

    .line 9762
    :cond_1
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v2

    add-int/lit8 v0, v2, -0x1

    .local v0, "j":I
    :goto_0
    if-ltz v0, :cond_4

    .line 9763
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 9768
    .local v1, "win":Lcom/android/server/wm/WindowState;
    iget-boolean v2, v1, Lcom/android/server/wm/WindowState;->mRemoved:Z

    if-nez v2, :cond_3

    iget-boolean v2, v1, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v2, :cond_3

    iget-boolean v2, v1, Lcom/android/server/wm/WindowState;->mPolicyVisibility:Z

    if-eqz v2, :cond_3

    .line 9772
    invoke-virtual {v1}, Lcom/android/server/wm/WindowState;->hasDrawnLw()Z

    move-result v2

    if-eqz v2, :cond_2

    .line 9775
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2, v1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 9762
    :cond_2
    :goto_1
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 9771
    :cond_3
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2, v1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    goto :goto_1

    .line 9778
    .end local v1    # "win":Lcom/android/server/wm/WindowState;
    :cond_4
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v2

    if-eqz v2, :cond_5

    .line 9780
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v3, 0x18

    invoke-virtual {v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 9781
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v3, 0x21

    invoke-virtual {v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 9758
    :cond_5
    return-void
.end method

.method public clearForcedDisplayDensityForUser(II)V
    .locals 12
    .param p1, "displayId"    # I
    .param p2, "userId"    # I

    .prologue
    const/4 v6, 0x0

    const/4 v3, 0x0

    .line 9318
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9319
    const-string/jumbo v1, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9318
    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 9321
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 9324
    :cond_0
    if-eqz p1, :cond_1

    .line 9325
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "Can only set the default display"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 9328
    :cond_1
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v0

    .line 9329
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    const-string/jumbo v5, "clearForcedDisplayDensityForUser"

    const/4 v4, 0x1

    move v2, p2

    .line 9328
    invoke-static/range {v0 .. v6}, Landroid/app/ActivityManager;->handleIncomingUser(IIIZZLjava/lang/String;Ljava/lang/String;)I

    move-result v7

    .line 9331
    .local v7, "callingUserId":I
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v10

    .line 9333
    .local v10, "ident":J
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9334
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v8

    .line 9335
    .local v8, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v8, :cond_2

    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    if-ne v0, v7, :cond_2

    .line 9337
    iget v0, v8, Lcom/android/server/wm/DisplayContent;->mInitialDisplayDensity:I

    .line 9336
    invoke-direct {p0, v8, v0}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensityLocked(Lcom/android/server/wm/DisplayContent;I)V

    .line 9339
    :cond_2
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    .line 9340
    const-string/jumbo v2, "display_density_forced"

    const-string/jumbo v3, ""

    .line 9339
    invoke-static {v0, v2, v3, v7}, Landroid/provider/Settings$Secure;->putStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;I)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :try_start_2
    monitor-exit v1
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9343
    invoke-static {v10, v11}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9317
    return-void

    .line 9333
    .end local v8    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v0

    :try_start_3
    monitor-exit v1

    throw v0
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9342
    :catchall_1
    move-exception v0

    .line 9343
    invoke-static {v10, v11}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9342
    throw v0
.end method

.method public clearForcedDisplaySize(I)V
    .locals 7
    .param p1, "displayId"    # I

    .prologue
    .line 9238
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9239
    const-string/jumbo v4, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9238
    invoke-virtual {v1, v4}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v1

    if-eqz v1, :cond_0

    .line 9241
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v1, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9244
    :cond_0
    if-eqz p1, :cond_1

    .line 9245
    new-instance v1, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v4, "Can only set the default display"

    invoke-direct {v1, v4}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9247
    :cond_1
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 9249
    .local v2, "ident":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9250
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9251
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_2

    .line 9252
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayWidth:I

    .line 9253
    iget v5, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayHeight:I

    .line 9252
    invoke-direct {p0, v0, v1, v5}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplaySizeLocked(Lcom/android/server/wm/DisplayContent;II)V

    .line 9254
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    .line 9255
    const-string/jumbo v5, "display_size_forced"

    const-string/jumbo v6, ""

    .line 9254
    invoke-static {v1, v5, v6}, Landroid/provider/Settings$Global;->putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_2
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9259
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9237
    return-void

    .line 9249
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    :try_start_3
    monitor-exit v4

    throw v1
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9258
    :catchall_1
    move-exception v1

    .line 9259
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9258
    throw v1
.end method

.method public clearWindowContentFrameStats(Landroid/os/IBinder;)Z
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    const/4 v4, 0x0

    .line 10498
    const-string/jumbo v2, "android.permission.FRAME_STATS"

    .line 10499
    const-string/jumbo v3, "clearWindowContentFrameStats()"

    .line 10498
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 10500
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires FRAME_STATS permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 10502
    :cond_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 10503
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v2, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 10504
    .local v1, "windowState":Lcom/android/server/wm/WindowState;
    if-nez v1, :cond_1

    monitor-exit v3

    .line 10505
    return v4

    .line 10507
    :cond_1
    :try_start_1
    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget-object v0, v2, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 10508
    .local v0, "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    if-nez v0, :cond_2

    monitor-exit v3

    .line 10509
    return v4

    .line 10511
    :cond_2
    :try_start_2
    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfaceController;->clearWindowContentFrameStats()Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    move-result v2

    monitor-exit v3

    return v2

    .line 10502
    .end local v0    # "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    .end local v1    # "windowState":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method public closeSystemDialogs(Ljava/lang/String;)V
    .locals 9
    .param p1, "reason"    # Ljava/lang/String;

    .prologue
    .line 5687
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v8

    .line 5688
    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 5689
    .local v2, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_0
    if-ge v0, v2, :cond_2

    .line 5690
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v7}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v6

    .line 5691
    .local v6, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    .line 5692
    .local v3, "numWindows":I
    const/4 v5, 0x0

    .local v5, "winNdx":I
    :goto_1
    if-ge v5, v3, :cond_1

    .line 5693
    invoke-virtual {v6, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 5694
    .local v4, "w":Lcom/android/server/wm/WindowState;
    iget-boolean v7, v4, Lcom/android/server/wm/WindowState;->mHasSurface:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v7, :cond_0

    .line 5696
    :try_start_1
    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    invoke-interface {v7, p1}, Landroid/view/IWindow;->closeSystemDialogs(Ljava/lang/String;)V
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5692
    :cond_0
    :goto_2
    add-int/lit8 v5, v5, 0x1

    goto :goto_1

    .line 5689
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_1
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .end local v3    # "numWindows":I
    .end local v5    # "winNdx":I
    .end local v6    # "windows":Lcom/android/server/wm/WindowList;
    :cond_2
    monitor-exit v8

    .line 5686
    return-void

    .line 5687
    .end local v0    # "displayNdx":I
    .end local v2    # "numDisplays":I
    :catchall_0
    move-exception v7

    monitor-exit v8

    throw v7

    .line 5697
    .restart local v0    # "displayNdx":I
    .restart local v2    # "numDisplays":I
    .restart local v3    # "numWindows":I
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    .restart local v5    # "winNdx":I
    .restart local v6    # "windows":Lcom/android/server/wm/WindowList;
    :catch_0
    move-exception v1

    .local v1, "e":Landroid/os/RemoteException;
    goto :goto_2
.end method

.method public computeNewConfiguration()Landroid/content/res/Configuration;
    .locals 2

    .prologue
    .line 7539
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 7540
    :try_start_0
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->computeNewConfigurationLocked()Landroid/content/res/Configuration;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v1

    monitor-exit v0

    return-object v1

    .line 7539
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method computeScreenConfigurationLocked(Landroid/content/res/Configuration;)V
    .locals 24
    .param p1, "config"    # Landroid/content/res/Configuration;

    .prologue
    .line 7724
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->uiMode:I

    .line 7723
    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->updateDisplayAndOrientationLocked(I)Landroid/view/DisplayInfo;

    move-result-object v4

    .line 7726
    .local v4, "displayInfo":Landroid/view/DisplayInfo;
    iget v7, v4, Landroid/view/DisplayInfo;->logicalWidth:I

    .line 7727
    .local v7, "dw":I
    iget v8, v4, Landroid/view/DisplayInfo;->logicalHeight:I

    .line 7728
    .local v8, "dh":I
    if-gt v7, v8, :cond_3

    const/4 v3, 0x1

    :goto_0
    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->orientation:I

    .line 7731
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    move-object/from16 v0, p1

    iget v9, v0, Landroid/content/res/Configuration;->uiMode:I

    invoke-interface {v3, v7, v8, v6, v9}, Landroid/view/WindowManagerPolicy;->getConfigDisplayWidth(IIII)I

    move-result v3

    int-to-float v3, v3

    .line 7732
    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    iget v6, v6, Landroid/util/DisplayMetrics;->density:F

    .line 7731
    div-float/2addr v3, v6

    float-to-int v3, v3

    .line 7730
    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->screenWidthDp:I

    .line 7734
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    move-object/from16 v0, p1

    iget v9, v0, Landroid/content/res/Configuration;->uiMode:I

    invoke-interface {v3, v7, v8, v6, v9}, Landroid/view/WindowManagerPolicy;->getConfigDisplayHeight(IIII)I

    move-result v3

    int-to-float v3, v3

    .line 7735
    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    iget v6, v6, Landroid/util/DisplayMetrics;->density:F

    .line 7734
    div-float/2addr v3, v6

    float-to-int v3, v3

    .line 7733
    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->screenHeightDp:I

    .line 7736
    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    const/4 v6, 0x1

    if-eq v3, v6, :cond_4

    .line 7737
    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    const/4 v6, 0x3

    if-ne v3, v6, :cond_5

    const/4 v5, 0x1

    .line 7739
    .local v5, "rotated":Z
    :goto_1
    move-object/from16 v0, p1

    iget v6, v0, Landroid/content/res/Configuration;->uiMode:I

    .line 7740
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    iget v9, v3, Landroid/util/DisplayMetrics;->density:F

    move-object/from16 v3, p0

    move-object/from16 v10, p1

    .line 7739
    invoke-direct/range {v3 .. v10}, Lcom/android/server/wm/WindowManagerService;->computeSizeRangesAndScreenLayout(Landroid/view/DisplayInfo;ZIIIFLandroid/content/res/Configuration;)V

    .line 7742
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->screenLayout:I

    and-int/lit16 v6, v3, -0x301

    .line 7743
    iget v3, v4, Landroid/view/DisplayInfo;->flags:I

    and-int/lit8 v3, v3, 0x10

    if-eqz v3, :cond_6

    .line 7744
    const/16 v3, 0x200

    .line 7742
    :goto_2
    or-int/2addr v3, v6

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->screenLayout:I

    .line 7747
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->screenWidthDp:I

    int-to-float v3, v3

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mCompatibleScreenScale:F

    div-float/2addr v3, v6

    float-to-int v3, v3

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->compatScreenWidthDp:I

    .line 7748
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->screenHeightDp:I

    int-to-float v3, v3

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mCompatibleScreenScale:F

    div-float/2addr v3, v6

    float-to-int v3, v3

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->compatScreenHeightDp:I

    .line 7749
    move-object/from16 v0, p1

    iget v11, v0, Landroid/content/res/Configuration;->uiMode:I

    .line 7750
    move-object/from16 v0, p0

    iget-object v12, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    move-object/from16 v9, p0

    move v10, v5

    move v13, v7

    move v14, v8

    .line 7749
    invoke-direct/range {v9 .. v14}, Lcom/android/server/wm/WindowManagerService;->computeCompatSmallestWidth(ZILandroid/util/DisplayMetrics;II)I

    move-result v3

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->compatSmallestScreenWidthDp:I

    .line 7751
    iget v3, v4, Landroid/view/DisplayInfo;->logicalDensityDpi:I

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->densityDpi:I

    .line 7755
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->touchscreen:I

    .line 7756
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->keyboard:I

    .line 7757
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->navigation:I

    .line 7759
    const/16 v19, 0x0

    .line 7760
    .local v19, "keyboardPresence":I
    const/16 v21, 0x0

    .line 7761
    .local v21, "navigationPresence":I
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    invoke-virtual {v3}, Lcom/android/server/input/InputManagerService;->getInputDevices()[Landroid/view/InputDevice;

    move-result-object v16

    .line 7762
    .local v16, "devices":[Landroid/view/InputDevice;
    move-object/from16 v0, v16

    array-length v0, v0

    move/from16 v20, v0

    .line 7763
    .local v20, "len":I
    const/16 v18, 0x0

    .local v18, "i":I
    :goto_3
    move/from16 v0, v18

    move/from16 v1, v20

    if-ge v0, v1, :cond_a

    .line 7764
    aget-object v15, v16, v18

    .line 7765
    .local v15, "device":Landroid/view/InputDevice;
    invoke-virtual {v15}, Landroid/view/InputDevice;->isVirtual()Z

    move-result v3

    if-nez v3, :cond_2

    .line 7766
    invoke-virtual {v15}, Landroid/view/InputDevice;->getSources()I

    move-result v23

    .line 7767
    .local v23, "sources":I
    invoke-virtual {v15}, Landroid/view/InputDevice;->isExternal()Z

    move-result v3

    if-eqz v3, :cond_7

    .line 7768
    const/16 v22, 0x2

    .line 7771
    .local v22, "presenceFlag":I
    :goto_4
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mIsTouchDevice:Z

    if-eqz v3, :cond_8

    .line 7772
    move/from16 v0, v23

    and-int/lit16 v3, v0, 0x1002

    .line 7773
    const/16 v6, 0x1002

    .line 7772
    if-ne v3, v6, :cond_0

    .line 7774
    const/4 v3, 0x3

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->touchscreen:I

    .line 7780
    :cond_0
    :goto_5
    const v3, 0x10004

    and-int v3, v3, v23

    const v6, 0x10004

    if-ne v3, v6, :cond_9

    .line 7781
    const/4 v3, 0x3

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->navigation:I

    .line 7782
    or-int v21, v21, v22

    .line 7789
    :cond_1
    :goto_6
    invoke-virtual {v15}, Landroid/view/InputDevice;->getKeyboardType()I

    move-result v3

    const/4 v6, 0x2

    if-ne v3, v6, :cond_2

    .line 7790
    const/4 v3, 0x2

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->keyboard:I

    .line 7791
    or-int v19, v19, v22

    .line 7763
    .end local v22    # "presenceFlag":I
    .end local v23    # "sources":I
    :cond_2
    add-int/lit8 v18, v18, 0x1

    goto :goto_3

    .line 7729
    .end local v5    # "rotated":Z
    .end local v15    # "device":Landroid/view/InputDevice;
    .end local v16    # "devices":[Landroid/view/InputDevice;
    .end local v18    # "i":I
    .end local v19    # "keyboardPresence":I
    .end local v20    # "len":I
    .end local v21    # "navigationPresence":I
    :cond_3
    const/4 v3, 0x2

    goto/16 :goto_0

    .line 7736
    :cond_4
    const/4 v5, 0x1

    .restart local v5    # "rotated":Z
    goto/16 :goto_1

    .line 7737
    .end local v5    # "rotated":Z
    :cond_5
    const/4 v5, 0x0

    .restart local v5    # "rotated":Z
    goto/16 :goto_1

    .line 7745
    :cond_6
    const/16 v3, 0x100

    goto/16 :goto_2

    .line 7769
    .restart local v15    # "device":Landroid/view/InputDevice;
    .restart local v16    # "devices":[Landroid/view/InputDevice;
    .restart local v18    # "i":I
    .restart local v19    # "keyboardPresence":I
    .restart local v20    # "len":I
    .restart local v21    # "navigationPresence":I
    .restart local v23    # "sources":I
    :cond_7
    const/16 v22, 0x1

    .restart local v22    # "presenceFlag":I
    goto :goto_4

    .line 7777
    :cond_8
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->touchscreen:I

    goto :goto_5

    .line 7783
    :cond_9
    move/from16 v0, v23

    and-int/lit16 v3, v0, 0x201

    const/16 v6, 0x201

    if-ne v3, v6, :cond_1

    .line 7784
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->navigation:I

    const/4 v6, 0x1

    if-ne v3, v6, :cond_1

    .line 7785
    const/4 v3, 0x2

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->navigation:I

    .line 7786
    or-int v21, v21, v22

    goto :goto_6

    .line 7796
    .end local v15    # "device":Landroid/view/InputDevice;
    .end local v22    # "presenceFlag":I
    .end local v23    # "sources":I
    :cond_a
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->navigation:I

    const/4 v6, 0x1

    if-ne v3, v6, :cond_b

    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mHasPermanentDpad:Z

    if-eqz v3, :cond_b

    .line 7797
    const/4 v3, 0x2

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->navigation:I

    .line 7798
    or-int/lit8 v21, v21, 0x1

    .line 7802
    :cond_b
    move-object/from16 v0, p1

    iget v3, v0, Landroid/content/res/Configuration;->keyboard:I

    const/4 v6, 0x1

    if-eq v3, v6, :cond_d

    const/16 v17, 0x1

    .line 7803
    .local v17, "hardKeyboardAvailable":Z
    :goto_7
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mHardKeyboardAvailable:Z

    move/from16 v0, v17

    if-eq v0, v3, :cond_c

    .line 7804
    move/from16 v0, v17

    move-object/from16 v1, p0

    iput-boolean v0, v1, Lcom/android/server/wm/WindowManagerService;->mHardKeyboardAvailable:Z

    .line 7805
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v6, 0x16

    invoke-virtual {v3, v6}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 7806
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v6, 0x16

    invoke-virtual {v3, v6}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 7810
    :cond_c
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->keyboardHidden:I

    .line 7811
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->hardKeyboardHidden:I

    .line 7812
    const/4 v3, 0x1

    move-object/from16 v0, p1

    iput v3, v0, Landroid/content/res/Configuration;->navigationHidden:I

    .line 7813
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p1

    move/from16 v1, v19

    move/from16 v2, v21

    invoke-interface {v3, v0, v1, v2}, Landroid/view/WindowManagerPolicy;->adjustConfigurationLw(Landroid/content/res/Configuration;II)V

    .line 7722
    return-void

    .line 7802
    .end local v17    # "hardKeyboardAvailable":Z
    :cond_d
    const/16 v17, 0x0

    .restart local v17    # "hardKeyboardAvailable":Z
    goto :goto_7
.end method

.method public continueSurfaceLayout()V
    .locals 2

    .prologue
    .line 5478
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5479
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfacePlacer;->continueLayout()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 5477
    return-void

    .line 5478
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public createDisplayContentLocked(Landroid/view/Display;)V
    .locals 2
    .param p1, "display"    # Landroid/view/Display;

    .prologue
    .line 11130
    if-nez p1, :cond_0

    .line 11131
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "getDisplayContent: display must not be null"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 11133
    :cond_0
    invoke-virtual {p1}, Landroid/view/Display;->getDisplayId()I

    move-result v0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    .line 11129
    return-void
.end method

.method public createWallpaperInputConsumer(Landroid/view/InputChannel;)V
    .locals 3
    .param p1, "inputChannel"    # Landroid/view/InputChannel;

    .prologue
    .line 10454
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10455
    :try_start_0
    new-instance v0, Lcom/android/server/wm/InputConsumerImpl;

    const-string/jumbo v2, "wallpaper input"

    invoke-direct {v0, p0, v2, p1}, Lcom/android/server/wm/InputConsumerImpl;-><init>(Lcom/android/server/wm/WindowManagerService;Ljava/lang/String;Landroid/view/InputChannel;)V

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    .line 10456
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    iget-object v0, v0, Lcom/android/server/wm/InputConsumerImpl;->mWindowHandle:Lcom/android/server/input/InputWindowHandle;

    const/4 v2, 0x1

    iput-boolean v2, v0, Lcom/android/server/input/InputWindowHandle;->hasWallpaper:Z

    .line 10457
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v2, 0x1

    invoke-virtual {v0, v2}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 10453
    return-void

    .line 10454
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method createWatermarkInTransaction()V
    .locals 13

    .prologue
    .line 10284
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWatermark:Lcom/android/server/wm/Watermark;

    if-eqz v9, :cond_0

    .line 10285
    return-void

    .line 10288
    :cond_0
    new-instance v2, Ljava/io/File;

    const-string/jumbo v9, "/system/etc/setup.conf"

    invoke-direct {v2, v9}, Ljava/io/File;-><init>(Ljava/lang/String;)V

    .line 10289
    .local v2, "file":Ljava/io/File;
    const/4 v3, 0x0

    .line 10290
    .local v3, "in":Ljava/io/FileInputStream;
    const/4 v5, 0x0

    .line 10292
    .local v5, "ind":Ljava/io/DataInputStream;
    :try_start_0
    new-instance v4, Ljava/io/FileInputStream;

    invoke-direct {v4, v2}, Ljava/io/FileInputStream;-><init>(Ljava/io/File;)V
    :try_end_0
    .catch Ljava/io/FileNotFoundException; {:try_start_0 .. :try_end_0} :catch_5
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_2
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 10293
    .end local v3    # "in":Ljava/io/FileInputStream;
    .local v4, "in":Ljava/io/FileInputStream;
    :try_start_1
    new-instance v6, Ljava/io/DataInputStream;

    invoke-direct {v6, v4}, Ljava/io/DataInputStream;-><init>(Ljava/io/InputStream;)V
    :try_end_1
    .catch Ljava/io/FileNotFoundException; {:try_start_1 .. :try_end_1} :catch_a
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_c
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 10294
    .local v6, "ind":Ljava/io/DataInputStream;
    :try_start_2
    invoke-virtual {v6}, Ljava/io/DataInputStream;->readLine()Ljava/lang/String;

    .end local v5    # "ind":Ljava/io/DataInputStream;
    move-result-object v7

    .line 10295
    .local v7, "line":Ljava/lang/String;
    if-eqz v7, :cond_1

    .line 10296
    const-string/jumbo v9, "%"

    invoke-virtual {v7, v9}, Ljava/lang/String;->split(Ljava/lang/String;)[Ljava/lang/String;

    move-result-object v8

    .line 10297
    .local v8, "toks":[Ljava/lang/String;
    if-eqz v8, :cond_1

    array-length v9, v8

    if-lez v9, :cond_1

    .line 10298
    new-instance v9, Lcom/android/server/wm/Watermark;

    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v10

    invoke-virtual {v10}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v10

    .line 10299
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mRealDisplayMetrics:Landroid/util/DisplayMetrics;

    iget-object v12, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 10298
    invoke-direct {v9, v10, v11, v12, v8}, Lcom/android/server/wm/Watermark;-><init>(Landroid/view/Display;Landroid/util/DisplayMetrics;Landroid/view/SurfaceSession;[Ljava/lang/String;)V

    iput-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWatermark:Lcom/android/server/wm/Watermark;
    :try_end_2
    .catch Ljava/io/FileNotFoundException; {:try_start_2 .. :try_end_2} :catch_b
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_d
    .catchall {:try_start_2 .. :try_end_2} :catchall_2

    .line 10305
    .end local v8    # "toks":[Ljava/lang/String;
    :cond_1
    if-eqz v6, :cond_4

    .line 10307
    :try_start_3
    invoke-virtual {v6}, Ljava/io/DataInputStream;->close()V
    :try_end_3
    .catch Ljava/io/IOException; {:try_start_3 .. :try_end_3} :catch_0

    :cond_2
    :goto_0
    move-object v5, v6

    .end local v6    # "ind":Ljava/io/DataInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    move-object v3, v4

    .line 10283
    .end local v4    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .end local v7    # "line":Ljava/lang/String;
    :cond_3
    :goto_1
    return-void

    .line 10308
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .restart local v6    # "ind":Ljava/io/DataInputStream;
    .restart local v7    # "line":Ljava/lang/String;
    :catch_0
    move-exception v1

    .local v1, "e":Ljava/io/IOException;
    goto :goto_0

    .line 10310
    .end local v1    # "e":Ljava/io/IOException;
    :cond_4
    if-eqz v4, :cond_2

    .line 10312
    :try_start_4
    invoke-virtual {v4}, Ljava/io/FileInputStream;->close()V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_1

    goto :goto_0

    .line 10313
    :catch_1
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    goto :goto_0

    .line 10303
    .end local v1    # "e":Ljava/io/IOException;
    .end local v4    # "in":Ljava/io/FileInputStream;
    .end local v6    # "ind":Ljava/io/DataInputStream;
    .end local v7    # "line":Ljava/lang/String;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    :catch_2
    move-exception v1

    .line 10305
    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .restart local v1    # "e":Ljava/io/IOException;
    :goto_2
    if-eqz v5, :cond_5

    .line 10307
    :try_start_5
    invoke-virtual {v5}, Ljava/io/DataInputStream;->close()V
    :try_end_5
    .catch Ljava/io/IOException; {:try_start_5 .. :try_end_5} :catch_3

    goto :goto_1

    .line 10308
    :catch_3
    move-exception v1

    goto :goto_1

    .line 10310
    :cond_5
    if-eqz v3, :cond_3

    .line 10312
    :try_start_6
    invoke-virtual {v3}, Ljava/io/FileInputStream;->close()V
    :try_end_6
    .catch Ljava/io/IOException; {:try_start_6 .. :try_end_6} :catch_4

    goto :goto_1

    .line 10313
    :catch_4
    move-exception v1

    goto :goto_1

    .line 10302
    .end local v1    # "e":Ljava/io/IOException;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    .restart local v5    # "ind":Ljava/io/DataInputStream;
    :catch_5
    move-exception v0

    .line 10305
    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .local v0, "e":Ljava/io/FileNotFoundException;
    :goto_3
    if-eqz v5, :cond_6

    .line 10307
    :try_start_7
    invoke-virtual {v5}, Ljava/io/DataInputStream;->close()V
    :try_end_7
    .catch Ljava/io/IOException; {:try_start_7 .. :try_end_7} :catch_6

    goto :goto_1

    .line 10308
    :catch_6
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    goto :goto_1

    .line 10310
    .end local v1    # "e":Ljava/io/IOException;
    :cond_6
    if-eqz v3, :cond_3

    .line 10312
    :try_start_8
    invoke-virtual {v3}, Ljava/io/FileInputStream;->close()V
    :try_end_8
    .catch Ljava/io/IOException; {:try_start_8 .. :try_end_8} :catch_7

    goto :goto_1

    .line 10313
    :catch_7
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    goto :goto_1

    .line 10304
    .end local v0    # "e":Ljava/io/FileNotFoundException;
    .end local v1    # "e":Ljava/io/IOException;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    .restart local v5    # "ind":Ljava/io/DataInputStream;
    :catchall_0
    move-exception v9

    .line 10305
    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    :goto_4
    if-eqz v5, :cond_8

    .line 10307
    :try_start_9
    invoke-virtual {v5}, Ljava/io/DataInputStream;->close()V
    :try_end_9
    .catch Ljava/io/IOException; {:try_start_9 .. :try_end_9} :catch_8

    .line 10304
    :cond_7
    :goto_5
    throw v9

    .line 10308
    :catch_8
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    goto :goto_5

    .line 10310
    .end local v1    # "e":Ljava/io/IOException;
    :cond_8
    if-eqz v3, :cond_7

    .line 10312
    :try_start_a
    invoke-virtual {v3}, Ljava/io/FileInputStream;->close()V
    :try_end_a
    .catch Ljava/io/IOException; {:try_start_a .. :try_end_a} :catch_9

    goto :goto_5

    .line 10313
    :catch_9
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    goto :goto_5

    .line 10304
    .end local v1    # "e":Ljava/io/IOException;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .restart local v5    # "ind":Ljava/io/DataInputStream;
    :catchall_1
    move-exception v9

    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .local v3, "in":Ljava/io/FileInputStream;
    goto :goto_4

    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .restart local v6    # "ind":Ljava/io/DataInputStream;
    :catchall_2
    move-exception v9

    move-object v5, v6

    .end local v6    # "ind":Ljava/io/DataInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    goto :goto_4

    .line 10302
    .end local v3    # "in":Ljava/io/FileInputStream;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    :catch_a
    move-exception v0

    .restart local v0    # "e":Ljava/io/FileNotFoundException;
    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    goto :goto_3

    .end local v0    # "e":Ljava/io/FileNotFoundException;
    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .restart local v6    # "ind":Ljava/io/DataInputStream;
    :catch_b
    move-exception v0

    .restart local v0    # "e":Ljava/io/FileNotFoundException;
    move-object v5, v6

    .end local v6    # "ind":Ljava/io/DataInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    goto :goto_3

    .line 10303
    .end local v0    # "e":Ljava/io/FileNotFoundException;
    .end local v3    # "in":Ljava/io/FileInputStream;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    :catch_c
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    goto :goto_2

    .end local v1    # "e":Ljava/io/IOException;
    .end local v3    # "in":Ljava/io/FileInputStream;
    .end local v5    # "ind":Ljava/io/DataInputStream;
    .restart local v4    # "in":Ljava/io/FileInputStream;
    .restart local v6    # "ind":Ljava/io/DataInputStream;
    :catch_d
    move-exception v1

    .restart local v1    # "e":Ljava/io/IOException;
    move-object v5, v6

    .end local v6    # "ind":Ljava/io/DataInputStream;
    .local v5, "ind":Ljava/io/DataInputStream;
    move-object v3, v4

    .end local v4    # "in":Ljava/io/FileInputStream;
    .restart local v3    # "in":Ljava/io/FileInputStream;
    goto :goto_2
.end method

.method public deferSurfaceLayout()V
    .locals 2

    .prologue
    .line 5469
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5470
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfacePlacer;->deferLayout()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 5468
    return-void

    .line 5469
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method destroyPreservedSurfaceLocked()V
    .locals 3

    .prologue
    .line 9007
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDestroyPreservedSurface:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v2

    add-int/lit8 v0, v2, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_0

    .line 9008
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDestroyPreservedSurface:Ljava/util/ArrayList;

    invoke-virtual {v2, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 9009
    .local v1, "w":Lcom/android/server/wm/WindowState;
    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowStateAnimator;->destroyPreservedSurfaceLocked()V

    .line 9007
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 9011
    .end local v1    # "w":Lcom/android/server/wm/WindowState;
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDestroyPreservedSurface:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->clear()V

    .line 9006
    return-void
.end method

.method public detachStack(I)V
    .locals 4
    .param p1, "stackId"    # I

    .prologue
    .line 5231
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 5232
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v2, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;

    .line 5233
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v1, :cond_1

    .line 5234
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5235
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_1

    .line 5236
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->isAnimating()Z

    move-result v2

    if-eqz v2, :cond_0

    .line 5237
    const/4 v2, 0x1

    iput-boolean v2, v1, Lcom/android/server/wm/TaskStack;->mDeferDetach:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v3

    .line 5238
    return-void

    .line 5240
    :cond_0
    :try_start_1
    invoke-virtual {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->detachStackLocked(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/TaskStack;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :cond_1
    monitor-exit v3

    .line 5230
    return-void

    .line 5231
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method detachStackLocked(Lcom/android/server/wm/DisplayContent;Lcom/android/server/wm/TaskStack;)V
    .locals 2
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "stack"    # Lcom/android/server/wm/TaskStack;

    .prologue
    .line 5222
    invoke-virtual {p1, p2}, Lcom/android/server/wm/DisplayContent;->detachStack(Lcom/android/server/wm/TaskStack;)V

    .line 5223
    invoke-virtual {p2}, Lcom/android/server/wm/TaskStack;->detachDisplay()V

    .line 5224
    iget v0, p2, Lcom/android/server/wm/TaskStack;->mStackId:I

    const/4 v1, 0x3

    if-ne v0, v1, :cond_0

    .line 5225
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    iget-object v0, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    .line 5226
    const/4 v1, 0x0

    .line 5225
    invoke-virtual {v0, v1}, Lcom/android/server/wm/DockedStackDividerController;->notifyDockedStackExistsChanged(Z)V

    .line 5221
    :cond_0
    return-void
.end method

.method public detectSafeMode()Z
    .locals 12

    .prologue
    .line 8159
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    .line 8160
    const-wide/16 v10, 0x3e8

    .line 8159
    invoke-virtual {v8, v10, v11}, Lcom/android/server/wm/InputMonitor;->waitForInputDevicesReady(J)Z

    move-result v8

    if-nez v8, :cond_0

    .line 8161
    const-string/jumbo v8, "WindowManager"

    const-string/jumbo v9, "Devices still not ready after waiting 1000 milliseconds before attempting to detect safe mode."

    invoke-static {v8, v9}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 8167
    :cond_0
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v8}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v8

    const-string/jumbo v9, "safe_boot_disallowed"

    const/4 v10, 0x0

    .line 8166
    invoke-static {v8, v9, v10}, Landroid/provider/Settings$Global;->getInt(Landroid/content/ContentResolver;Ljava/lang/String;I)I

    move-result v8

    if-eqz v8, :cond_1

    .line 8168
    const/4 v8, 0x0

    return v8

    .line 8171
    :cond_1
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/4 v9, -0x1

    const/16 v10, -0x100

    .line 8172
    const/16 v11, 0x52

    .line 8171
    invoke-virtual {v8, v9, v10, v11}, Lcom/android/server/input/InputManagerService;->getKeyCodeState(III)I

    move-result v4

    .line 8173
    .local v4, "menuState":I
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/4 v9, -0x1

    const/16 v10, -0x100

    const/16 v11, 0x2f

    invoke-virtual {v8, v9, v10, v11}, Lcom/android/server/input/InputManagerService;->getKeyCodeState(III)I

    move-result v5

    .line 8174
    .local v5, "sState":I
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/4 v9, -0x1

    const/16 v10, 0x201

    .line 8175
    const/16 v11, 0x17

    .line 8174
    invoke-virtual {v8, v9, v10, v11}, Lcom/android/server/input/InputManagerService;->getKeyCodeState(III)I

    move-result v2

    .line 8176
    .local v2, "dpadState":I
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/4 v9, -0x1

    const v10, 0x10004

    .line 8177
    const/16 v11, 0x110

    .line 8176
    invoke-virtual {v8, v9, v10, v11}, Lcom/android/server/input/InputManagerService;->getScanCodeState(III)I

    move-result v6

    .line 8178
    .local v6, "trackballState":I
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/4 v9, -0x1

    const/16 v10, -0x100

    .line 8179
    const/16 v11, 0x19

    .line 8178
    invoke-virtual {v8, v9, v10, v11}, Lcom/android/server/input/InputManagerService;->getKeyCodeState(III)I

    move-result v7

    .line 8180
    .local v7, "volumeDownState":I
    if-gtz v4, :cond_2

    if-lez v5, :cond_5

    :cond_2
    const/4 v8, 0x1

    :goto_0
    iput-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    .line 8183
    :try_start_0
    const-string/jumbo v8, "persist.sys.safemode"

    const/4 v9, 0x0

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->getInt(Ljava/lang/String;I)I

    move-result v8

    if-nez v8, :cond_3

    .line 8184
    const-string/jumbo v8, "ro.sys.safemode"

    const/4 v9, 0x0

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->getInt(Ljava/lang/String;I)I

    move-result v8

    if-eqz v8, :cond_4

    .line 8185
    :cond_3
    const-string/jumbo v8, "persist.sys.audit_safemode"

    const/4 v9, 0x0

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->getInt(Ljava/lang/String;I)I

    move-result v0

    .line 8187
    .local v0, "auditSafeMode":I
    if-nez v0, :cond_7

    .line 8188
    const/4 v8, 0x1

    iput-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    .line 8189
    const-string/jumbo v8, "persist.sys.safemode"

    const-string/jumbo v9, ""

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V
    :try_end_0
    .catch Ljava/lang/IllegalArgumentException; {:try_start_0 .. :try_end_0} :catch_0

    .line 8205
    .end local v0    # "auditSafeMode":I
    :cond_4
    :goto_1
    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    if-eqz v8, :cond_9

    .line 8206
    const-string/jumbo v8, "WindowManager"

    new-instance v9, Ljava/lang/StringBuilder;

    invoke-direct {v9}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v10, "SAFE MODE ENABLED (menu="

    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9, v4}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    const-string/jumbo v10, " s="

    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9, v5}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    .line 8207
    const-string/jumbo v10, " dpad="

    .line 8206
    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    .line 8207
    const-string/jumbo v10, " trackball="

    .line 8206
    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9, v6}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    .line 8207
    const-string/jumbo v10, ")"

    .line 8206
    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v9

    invoke-static {v8, v9}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 8208
    const-string/jumbo v8, "ro.sys.safemode"

    const-string/jumbo v9, "1"

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V

    .line 8212
    :goto_2
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget-boolean v9, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    invoke-interface {v8, v9}, Landroid/view/WindowManagerPolicy;->setSafeMode(Z)V

    .line 8213
    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    return v8

    .line 8180
    :cond_5
    if-gtz v2, :cond_2

    if-gtz v6, :cond_2

    .line 8181
    if-lez v7, :cond_6

    const/4 v8, 0x1

    goto/16 :goto_0

    :cond_6
    const/4 v8, 0x0

    goto/16 :goto_0

    .line 8192
    .restart local v0    # "auditSafeMode":I
    :cond_7
    :try_start_1
    const-string/jumbo v8, "ro.build.date.utc"

    const/4 v9, 0x0

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->getInt(Ljava/lang/String;I)I

    move-result v1

    .line 8194
    .local v1, "buildDate":I
    if-lt v0, v1, :cond_8

    .line 8195
    const/4 v8, 0x1

    iput-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    .line 8196
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->showAuditSafeModeNotification()V

    goto :goto_1

    .line 8203
    .end local v0    # "auditSafeMode":I
    .end local v1    # "buildDate":I
    :catch_0
    move-exception v3

    .local v3, "e":Ljava/lang/IllegalArgumentException;
    goto :goto_1

    .line 8198
    .end local v3    # "e":Ljava/lang/IllegalArgumentException;
    .restart local v0    # "auditSafeMode":I
    .restart local v1    # "buildDate":I
    :cond_8
    const-string/jumbo v8, "persist.sys.safemode"

    const-string/jumbo v9, ""

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V

    .line 8199
    const-string/jumbo v8, "persist.sys.audit_safemode"

    const-string/jumbo v9, ""

    invoke-static {v8, v9}, Landroid/os/SystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V
    :try_end_1
    .catch Ljava/lang/IllegalArgumentException; {:try_start_1 .. :try_end_1} :catch_0

    goto/16 :goto_1

    .line 8210
    .end local v0    # "auditSafeMode":I
    .end local v1    # "buildDate":I
    :cond_9
    const-string/jumbo v8, "WindowManager"

    const-string/jumbo v9, "SAFE MODE not enabled"

    invoke-static {v8, v9}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_2
.end method

.method public disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V
    .locals 4
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "tag"    # Ljava/lang/String;

    .prologue
    .line 5550
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.DISABLE_KEYGUARD"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 5552
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires DISABLE_KEYGUARD permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5556
    :cond_0
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v0

    const/16 v1, 0x3e8

    if-eq v0, v1, :cond_1

    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->isKeyguardSecure()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 5557
    const-string/jumbo v0, "WindowManager"

    const-string/jumbo v1, "current mode is SecurityMode, ignore disableKeyguard"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5558
    return-void

    .line 5562
    :cond_1
    invoke-static {}, Landroid/os/Binder;->getCallingUserHandle()Landroid/os/UserHandle;

    move-result-object v0

    invoke-virtual {v0}, Landroid/os/UserHandle;->getIdentifier()I

    move-result v0

    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    if-eq v0, v1, :cond_2

    .line 5563
    const-string/jumbo v0, "WindowManager"

    const-string/jumbo v1, "non-current user, ignore disableKeyguard"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    .line 5564
    return-void

    .line 5567
    :cond_2
    if-nez p1, :cond_3

    .line 5568
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "token == null"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5571
    :cond_3
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    .line 5572
    new-instance v2, Landroid/util/Pair;

    invoke-direct {v2, p1, p2}, Landroid/util/Pair;-><init>(Ljava/lang/Object;Ljava/lang/Object;)V

    const/4 v3, 0x1

    .line 5571
    invoke-virtual {v1, v3, v2}, Lcom/android/server/wm/KeyguardDisableHandler;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/KeyguardDisableHandler;->sendMessage(Landroid/os/Message;)Z

    .line 5549
    return-void
.end method

.method public dismissKeyguard()V
    .locals 2

    .prologue
    .line 5639
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.DISABLE_KEYGUARD"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 5641
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires DISABLE_KEYGUARD permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5643
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5644
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->dismissKeyguardLw()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 5638
    return-void

    .line 5643
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method dispatchNewAnimatorScaleLocked(Lcom/android/server/wm/Session;)V
    .locals 2
    .param p1, "session"    # Lcom/android/server/wm/Session;

    .prologue
    .line 5790
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v1, 0x22

    invoke-virtual {v0, v1, p1}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v0

    invoke-virtual {v0}, Landroid/os/Message;->sendToTarget()V

    .line 5789
    return-void
.end method

.method public displayReady()V
    .locals 7

    .prologue
    .line 8217
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mDisplays:[Landroid/view/Display;

    const/4 v3, 0x0

    array-length v5, v4

    :goto_0
    if-ge v3, v5, :cond_0

    aget-object v0, v4, v3

    .line 8218
    .local v0, "display":Landroid/view/Display;
    invoke-virtual {v0}, Landroid/view/Display;->getDisplayId()I

    move-result v6

    invoke-direct {p0, v6}, Lcom/android/server/wm/WindowManagerService;->displayReady(I)V

    .line 8217
    add-int/lit8 v3, v3, 0x1

    goto :goto_0

    .line 8221
    .end local v0    # "display":Landroid/view/Display;
    :cond_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 8222
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    .line 8223
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-direct {p0, v1}, Lcom/android/server/wm/WindowManagerService;->readForcedDisplayPropertiesLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 8224
    const/4 v3, 0x1

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v4

    .line 8228
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    const/4 v4, 0x0

    invoke-interface {v3, v4}, Landroid/app/IActivityManager;->updateConfiguration(Landroid/content/res/Configuration;)V
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_1

    .line 8232
    :goto_1
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 8233
    :try_start_2
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v3}, Landroid/content/Context;->getPackageManager()Landroid/content/pm/PackageManager;

    move-result-object v3

    .line 8234
    const-string/jumbo v5, "android.hardware.touchscreen"

    .line 8233
    invoke-virtual {v3, v5}, Landroid/content/pm/PackageManager;->hasSystemFeature(Ljava/lang/String;)Z

    move-result v3

    iput-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mIsTouchDevice:Z

    .line 8235
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    invoke-direct {p0, v3}, Lcom/android/server/wm/WindowManagerService;->configureDisplayPolicyLocked(Lcom/android/server/wm/DisplayContent;)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    monitor-exit v4

    .line 8239
    :try_start_3
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    const/4 v4, 0x0

    invoke-interface {v3, v4}, Landroid/app/IActivityManager;->updateConfiguration(Landroid/content/res/Configuration;)V
    :try_end_3
    .catch Landroid/os/RemoteException; {:try_start_3 .. :try_end_3} :catch_0

    .line 8243
    :goto_2
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->updateCircularDisplayMaskIfNeeded()V

    .line 8216
    return-void

    .line 8221
    .end local v1    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 8232
    .restart local v1    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_1
    move-exception v3

    monitor-exit v4

    throw v3

    .line 8240
    :catch_0
    move-exception v2

    .local v2, "e":Landroid/os/RemoteException;
    goto :goto_2

    .line 8229
    .end local v2    # "e":Landroid/os/RemoteException;
    :catch_1
    move-exception v2

    .restart local v2    # "e":Landroid/os/RemoteException;
    goto :goto_1
.end method

.method public dump(Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V
    .locals 8
    .param p1, "fd"    # Ljava/io/FileDescriptor;
    .param p2, "pw"    # Ljava/io/PrintWriter;
    .param p3, "args"    # [Ljava/lang/String;

    .prologue
    const/4 v7, 0x0

    const/4 v0, 0x0

    .line 10948
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v3, "android.permission.DUMP"

    invoke-virtual {v1, v3}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v1

    if-eqz v1, :cond_0

    .line 10950
    new-instance v0, Ljava/lang/StringBuilder;

    invoke-direct {v0}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v1, "Permission Denial: can\'t dump WindowManager from from pid="

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    .line 10951
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v1

    .line 10950
    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v0

    .line 10952
    const-string/jumbo v1, ", uid="

    .line 10950
    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    .line 10952
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    .line 10950
    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10953
    return-void

    .line 10956
    :cond_0
    const/4 v5, 0x0

    .line 10958
    .local v5, "dumpAll":Z
    const/4 v4, 0x0

    .line 10959
    .local v4, "opti":I
    :goto_0
    array-length v1, p3

    if-ge v4, v1, :cond_1

    .line 10960
    aget-object v6, p3, v4

    .line 10961
    .local v6, "opt":Ljava/lang/String;
    if-eqz v6, :cond_1

    invoke-virtual {v6}, Ljava/lang/String;->length()I

    move-result v1

    if-gtz v1, :cond_3

    .line 10993
    .end local v6    # "opt":Ljava/lang/String;
    :cond_1
    array-length v1, p3

    if-ge v4, v1, :cond_17

    .line 10994
    aget-object v2, p3, v4

    .line 10995
    .local v2, "cmd":Ljava/lang/String;
    add-int/lit8 v4, v4, 0x1

    .line 10996
    const-string/jumbo v0, "lastanr"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_2

    const-string/jumbo v0, "l"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_6

    .line 10997
    :cond_2
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 10998
    :try_start_0
    invoke-virtual {p0, p2}, Lcom/android/server/wm/WindowManagerService;->dumpLastANRLocked(Ljava/io/PrintWriter;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 11000
    return-void

    .line 10961
    .end local v2    # "cmd":Ljava/lang/String;
    .restart local v6    # "opt":Ljava/lang/String;
    :cond_3
    invoke-virtual {v6, v7}, Ljava/lang/String;->charAt(I)C

    move-result v1

    const/16 v3, 0x2d

    if-ne v1, v3, :cond_1

    .line 10964
    add-int/lit8 v4, v4, 0x1

    .line 10965
    const-string/jumbo v1, "-a"

    invoke-virtual {v1, v6}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_4

    .line 10966
    const/4 v5, 0x1

    goto :goto_0

    .line 10967
    :cond_4
    const-string/jumbo v1, "-h"

    invoke-virtual {v1, v6}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_5

    .line 10968
    const-string/jumbo v0, "Window manager dump options:"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10969
    const-string/jumbo v0, "  [-a] [-h] [cmd] ..."

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10970
    const-string/jumbo v0, "  cmd may be one of:"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10971
    const-string/jumbo v0, "    l[astanr]: last ANR information"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10972
    const-string/jumbo v0, "    p[policy]: policy state"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10973
    const-string/jumbo v0, "    a[animator]: animator state"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10974
    const-string/jumbo v0, "    s[essions]: active sessions"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10975
    const-string/jumbo v0, "    surfaces: active surfaces (debugging enabled only)"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10976
    const-string/jumbo v0, "    d[isplays]: active display contents"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10977
    const-string/jumbo v0, "    t[okens]: token list"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10978
    const-string/jumbo v0, "    w[indows]: window list"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10979
    const-string/jumbo v0, "  cmd may also be a NAME to dump windows.  NAME may"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10980
    const-string/jumbo v0, "    be a partial substring in a window name, a"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10981
    const-string/jumbo v0, "    Window hex object identifier, or"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10982
    const-string/jumbo v0, "    \"all\" for all windows, or"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10983
    const-string/jumbo v0, "    \"visible\" for the visible windows."

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10984
    const-string/jumbo v0, "    \"visible-apps\" for the visible app windows."

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10985
    const-string/jumbo v0, "  -a: include all available server state."

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10986
    return-void

    .line 10988
    :cond_5
    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Unknown argument: "

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v3, "; use -h for help"

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {p2, v1}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    goto/16 :goto_0

    .line 10997
    .end local v6    # "opt":Ljava/lang/String;
    .restart local v2    # "cmd":Ljava/lang/String;
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11001
    :cond_6
    const-string/jumbo v0, "policy"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_7

    const-string/jumbo v0, "p"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_8

    .line 11002
    :cond_7
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11003
    const/4 v1, 0x1

    :try_start_1
    invoke-virtual {p0, p2, p3, v1}, Lcom/android/server/wm/WindowManagerService;->dumpPolicyLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    monitor-exit v0

    .line 11005
    return-void

    .line 11002
    :catchall_1
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11006
    :cond_8
    const-string/jumbo v0, "animator"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_9

    const-string/jumbo v0, "a"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_a

    .line 11007
    :cond_9
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11008
    const/4 v1, 0x1

    :try_start_2
    invoke-virtual {p0, p2, p3, v1}, Lcom/android/server/wm/WindowManagerService;->dumpAnimatorLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_2

    monitor-exit v0

    .line 11010
    return-void

    .line 11007
    :catchall_2
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11011
    :cond_a
    const-string/jumbo v0, "sessions"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_b

    const-string/jumbo v0, "s"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_c

    .line 11012
    :cond_b
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11013
    const/4 v1, 0x1

    :try_start_3
    invoke-virtual {p0, p2, v1}, Lcom/android/server/wm/WindowManagerService;->dumpSessionsLocked(Ljava/io/PrintWriter;Z)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_3

    monitor-exit v0

    .line 11015
    return-void

    .line 11012
    :catchall_3
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11016
    :cond_c
    const-string/jumbo v0, "surfaces"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_d

    .line 11017
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11018
    const/4 v1, 0x0

    :try_start_4
    invoke-static {p2, v1}, Lcom/android/server/wm/WindowSurfaceController$SurfaceTrace;->dumpAllSurfaces(Ljava/io/PrintWriter;Ljava/lang/String;)V
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_4

    monitor-exit v0

    .line 11020
    return-void

    .line 11017
    :catchall_4
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11021
    :cond_d
    const-string/jumbo v0, "displays"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_e

    const-string/jumbo v0, "d"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_f

    .line 11022
    :cond_e
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11023
    const/4 v1, 0x1

    :try_start_5
    invoke-virtual {p0, p2, v1}, Lcom/android/server/wm/WindowManagerService;->dumpDisplayContentsLocked(Ljava/io/PrintWriter;Z)V
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_5

    monitor-exit v0

    .line 11025
    return-void

    .line 11022
    :catchall_5
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11026
    :cond_f
    const-string/jumbo v0, "tokens"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_10

    const-string/jumbo v0, "t"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_11

    .line 11027
    :cond_10
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11028
    const/4 v1, 0x1

    :try_start_6
    invoke-virtual {p0, p2, v1}, Lcom/android/server/wm/WindowManagerService;->dumpTokensLocked(Ljava/io/PrintWriter;Z)V
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_6

    monitor-exit v0

    .line 11030
    return-void

    .line 11027
    :catchall_6
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11031
    :cond_11
    const-string/jumbo v0, "windows"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_12

    const-string/jumbo v0, "w"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_13

    .line 11032
    :cond_12
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11033
    const/4 v1, 0x1

    const/4 v3, 0x0

    :try_start_7
    invoke-virtual {p0, p2, v1, v3}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_7

    monitor-exit v0

    .line 11035
    return-void

    .line 11032
    :catchall_7
    move-exception v1

    monitor-exit v0

    throw v1

    .line 11036
    :cond_13
    const-string/jumbo v0, "all"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_14

    const-string/jumbo v0, "a"

    invoke-virtual {v0, v2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_15

    .line 11037
    :cond_14
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11038
    const/4 v1, 0x1

    const/4 v3, 0x0

    :try_start_8
    invoke-virtual {p0, p2, v1, v3}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    :try_end_8
    .catchall {:try_start_8 .. :try_end_8} :catchall_8

    monitor-exit v0

    .line 11040
    return-void

    .line 11037
    :catchall_8
    move-exception v1

    monitor-exit v0

    throw v1

    :cond_15
    move-object v0, p0

    move-object v1, p2

    move-object v3, p3

    .line 11043
    invoke-virtual/range {v0 .. v5}, Lcom/android/server/wm/WindowManagerService;->dumpWindows(Ljava/io/PrintWriter;Ljava/lang/String;[Ljava/lang/String;IZ)Z

    move-result v0

    if-nez v0, :cond_16

    .line 11044
    new-instance v0, Ljava/lang/StringBuilder;

    invoke-direct {v0}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v1, "Bad window command, or no windows match: "

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11045
    const-string/jumbo v0, "Use -h for help."

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11047
    :cond_16
    return-void

    .line 11051
    .end local v2    # "cmd":Ljava/lang/String;
    :cond_17
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 11052
    :try_start_9
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11053
    if-eqz v5, :cond_18

    .line 11054
    const-string/jumbo v3, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11056
    :cond_18
    invoke-virtual {p0, p2}, Lcom/android/server/wm/WindowManagerService;->dumpLastANRLocked(Ljava/io/PrintWriter;)V

    .line 11057
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11058
    if-eqz v5, :cond_19

    .line 11059
    const-string/jumbo v3, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11061
    :cond_19
    invoke-virtual {p0, p2, p3, v5}, Lcom/android/server/wm/WindowManagerService;->dumpPolicyLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V

    .line 11062
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11063
    if-eqz v5, :cond_1a

    .line 11064
    const-string/jumbo v3, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11066
    :cond_1a
    invoke-virtual {p0, p2, p3, v5}, Lcom/android/server/wm/WindowManagerService;->dumpAnimatorLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V

    .line 11067
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11068
    if-eqz v5, :cond_1b

    .line 11069
    const-string/jumbo v3, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11071
    :cond_1b
    invoke-virtual {p0, p2, v5}, Lcom/android/server/wm/WindowManagerService;->dumpSessionsLocked(Ljava/io/PrintWriter;Z)V

    .line 11072
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11073
    if-eqz v5, :cond_1c

    .line 11074
    const-string/jumbo v3, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11076
    :cond_1c
    if-eqz v5, :cond_1d

    .line 11077
    const-string/jumbo v0, "-------------------------------------------------------------------------------"

    .line 11076
    :cond_1d
    invoke-static {p2, v0}, Lcom/android/server/wm/WindowSurfaceController$SurfaceTrace;->dumpAllSurfaces(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 11079
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11080
    if-eqz v5, :cond_1e

    .line 11081
    const-string/jumbo v0, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11083
    :cond_1e
    invoke-virtual {p0, p2, v5}, Lcom/android/server/wm/WindowManagerService;->dumpDisplayContentsLocked(Ljava/io/PrintWriter;Z)V

    .line 11084
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11085
    if-eqz v5, :cond_1f

    .line 11086
    const-string/jumbo v0, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11088
    :cond_1f
    invoke-virtual {p0, p2, v5}, Lcom/android/server/wm/WindowManagerService;->dumpTokensLocked(Ljava/io/PrintWriter;Z)V

    .line 11089
    invoke-virtual {p2}, Ljava/io/PrintWriter;->println()V

    .line 11090
    if-eqz v5, :cond_20

    .line 11091
    const-string/jumbo v0, "-------------------------------------------------------------------------------"

    invoke-virtual {p2, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 11093
    :cond_20
    const/4 v0, 0x0

    invoke-virtual {p0, p2, v5, v0}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    :try_end_9
    .catchall {:try_start_9 .. :try_end_9} :catchall_9

    monitor-exit v1

    .line 10947
    return-void

    .line 11051
    :catchall_9
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method dumpAnimatorLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
    .locals 2
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "args"    # [Ljava/lang/String;
    .param p3, "dumpAll"    # Z

    .prologue
    .line 10579
    const-string/jumbo v0, "WINDOW MANAGER ANIMATOR STATE (dumpsys window animator)"

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10580
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const-string/jumbo v1, "    "

    invoke-virtual {v0, p1, v1, p3}, Lcom/android/server/wm/WindowAnimator;->dumpLocked(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10578
    return-void
.end method

.method dumpAppTokensLocked()V
    .locals 13

    .prologue
    .line 4976
    iget-object v10, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v10}, Landroid/util/SparseArray;->size()I

    move-result v0

    .line 4977
    .local v0, "numStacks":I
    const/4 v4, 0x0

    .local v4, "stackNdx":I
    :goto_0
    if-ge v4, v0, :cond_2

    .line 4978
    iget-object v10, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v10, v4}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/TaskStack;

    .line 4979
    .local v3, "stack":Lcom/android/server/wm/TaskStack;
    const-string/jumbo v10, "WindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v12, "  Stack #"

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    iget v12, v3, Lcom/android/server/wm/TaskStack;->mStackId:I

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v11

    const-string/jumbo v12, " tasks from bottom to top:"

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v10, v11}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 4980
    invoke-virtual {v3}, Lcom/android/server/wm/TaskStack;->getTasks()Ljava/util/ArrayList;

    move-result-object v7

    .line 4981
    .local v7, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    invoke-virtual {v7}, Ljava/util/ArrayList;->size()I

    move-result v1

    .line 4982
    .local v1, "numTasks":I
    const/4 v6, 0x0

    .local v6, "taskNdx":I
    :goto_1
    if-ge v6, v1, :cond_1

    .line 4983
    invoke-virtual {v7, v6}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/Task;

    .line 4984
    .local v5, "task":Lcom/android/server/wm/Task;
    const-string/jumbo v10, "WindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v12, "    Task #"

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    iget v12, v5, Lcom/android/server/wm/Task;->mTaskId:I

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v11

    const-string/jumbo v12, " activities from bottom to top:"

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v10, v11}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 4985
    iget-object v9, v5, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 4986
    .local v9, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual {v9}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v2

    .line 4987
    .local v2, "numTokens":I
    const/4 v8, 0x0

    .local v8, "tokenNdx":I
    :goto_2
    if-ge v8, v2, :cond_0

    .line 4988
    const-string/jumbo v11, "WindowManager"

    new-instance v10, Ljava/lang/StringBuilder;

    invoke-direct {v10}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v12, "      activity #"

    invoke-virtual {v10, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10, v8}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v10

    const-string/jumbo v12, ": "

    invoke-virtual {v10, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v12

    invoke-virtual {v9, v8}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v10

    check-cast v10, Lcom/android/server/wm/AppWindowToken;

    iget-object v10, v10, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    invoke-virtual {v12, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v10

    invoke-virtual {v10}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v10

    invoke-static {v11, v10}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 4987
    add-int/lit8 v8, v8, 0x1

    goto :goto_2

    .line 4982
    :cond_0
    add-int/lit8 v6, v6, 0x1

    goto :goto_1

    .line 4977
    .end local v2    # "numTokens":I
    .end local v5    # "task":Lcom/android/server/wm/Task;
    .end local v8    # "tokenNdx":I
    .end local v9    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_1
    add-int/lit8 v4, v4, 0x1

    goto/16 :goto_0

    .line 4975
    .end local v1    # "numTasks":I
    .end local v3    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v6    # "taskNdx":I
    .end local v7    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    :cond_2
    return-void
.end method

.method dumpDisplayContentsLocked(Ljava/io/PrintWriter;Z)V
    .locals 4
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "dumpAll"    # Z

    .prologue
    .line 10636
    const-string/jumbo v3, "WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays)"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10637
    iget-boolean v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-eqz v3, :cond_0

    .line 10638
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v3}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 10639
    .local v2, "numDisplays":I
    const/4 v1, 0x0

    .local v1, "displayNdx":I
    :goto_0
    if-ge v1, v2, :cond_1

    .line 10640
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v3, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 10641
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const-string/jumbo v3, "  "

    invoke-virtual {v0, v3, p1}, Lcom/android/server/wm/DisplayContent;->dump(Ljava/lang/String;Ljava/io/PrintWriter;)V

    .line 10639
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 10644
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "displayNdx":I
    .end local v2    # "numDisplays":I
    :cond_0
    const-string/jumbo v3, "  NO DISPLAY"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10635
    :cond_1
    return-void
.end method

.method dumpLastANRLocked(Ljava/io/PrintWriter;)V
    .locals 1
    .param p1, "pw"    # Ljava/io/PrintWriter;

    .prologue
    .line 10903
    const-string/jumbo v0, "WINDOW MANAGER LAST ANR (dumpsys window lastanr)"

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10904
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mLastANRState:Ljava/lang/String;

    if-nez v0, :cond_0

    .line 10905
    const-string/jumbo v0, "  <no ANR has occurred since boot>"

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10902
    :goto_0
    return-void

    .line 10907
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mLastANRState:Ljava/lang/String;

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    goto :goto_0
.end method

.method dumpPolicyLocked(Ljava/io/PrintWriter;[Ljava/lang/String;Z)V
    .locals 2
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "args"    # [Ljava/lang/String;
    .param p3, "dumpAll"    # Z

    .prologue
    .line 10574
    const-string/jumbo v0, "WINDOW MANAGER POLICY STATE (dumpsys window policy)"

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10575
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const-string/jumbo v1, "    "

    invoke-interface {v0, v1, p1, p2}, Landroid/view/WindowManagerPolicy;->dump(Ljava/lang/String;Ljava/io/PrintWriter;[Ljava/lang/String;)V

    .line 10573
    return-void
.end method

.method dumpSessionsLocked(Ljava/io/PrintWriter;Z)V
    .locals 3
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "dumpAll"    # Z

    .prologue
    .line 10627
    const-string/jumbo v2, "WINDOW MANAGER SESSIONS (dumpsys window sessions)"

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10628
    const/4 v0, 0x0

    .local v0, "i":I
    :goto_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mSessions:Landroid/util/ArraySet;

    invoke-virtual {v2}, Landroid/util/ArraySet;->size()I

    move-result v2

    if-ge v0, v2, :cond_0

    .line 10629
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mSessions:Landroid/util/ArraySet;

    invoke-virtual {v2, v0}, Landroid/util/ArraySet;->valueAt(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/Session;

    .line 10630
    .local v1, "s":Lcom/android/server/wm/Session;
    const-string/jumbo v2, "  Session "

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v1}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    const/16 v2, 0x3a

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->println(C)V

    .line 10631
    const-string/jumbo v2, "    "

    invoke-virtual {v1, p1, v2}, Lcom/android/server/wm/Session;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10628
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .line 10626
    .end local v1    # "s":Lcom/android/server/wm/Session;
    :cond_0
    return-void
.end method

.method dumpTokensLocked(Ljava/io/PrintWriter;Z)V
    .locals 6
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "dumpAll"    # Z

    .prologue
    const/16 v5, 0x3a

    .line 10584
    const-string/jumbo v3, "WINDOW MANAGER TOKENS (dumpsys window tokens)"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10585
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v3}, Ljava/util/HashMap;->isEmpty()Z

    move-result v3

    if-nez v3, :cond_1

    .line 10586
    const-string/jumbo v3, "  All tokens:"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10587
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v3}, Ljava/util/HashMap;->values()Ljava/util/Collection;

    move-result-object v3

    invoke-interface {v3}, Ljava/util/Collection;->iterator()Ljava/util/Iterator;

    move-result-object v1

    .line 10588
    .local v1, "it":Ljava/util/Iterator;, "Ljava/util/Iterator<Lcom/android/server/wm/WindowToken;>;"
    :goto_0
    invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z

    move-result v3

    if-eqz v3, :cond_1

    .line 10589
    invoke-interface {v1}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowToken;

    .line 10590
    .local v2, "token":Lcom/android/server/wm/WindowToken;
    const-string/jumbo v3, "  "

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10591
    if-eqz p2, :cond_0

    .line 10592
    invoke-virtual {p1, v5}, Ljava/io/PrintWriter;->println(C)V

    .line 10593
    const-string/jumbo v3, "    "

    invoke-virtual {v2, p1, v3}, Lcom/android/server/wm/WindowToken;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    goto :goto_0

    .line 10595
    :cond_0
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_0

    .line 10599
    .end local v1    # "it":Ljava/util/Iterator;, "Ljava/util/Iterator<Lcom/android/server/wm/WindowToken;>;"
    .end local v2    # "token":Lcom/android/server/wm/WindowToken;
    :cond_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    const-string/jumbo v4, "  "

    invoke-virtual {v3, p1, v4, p2}, Lcom/android/server/wm/WallpaperController;->dumpTokens(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10600
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedStarting:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v3

    if-nez v3, :cond_3

    .line 10601
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10602
    const-string/jumbo v3, "  Finishing start of application tokens:"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10603
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedStarting:Ljava/util/ArrayList;

    invoke-virtual {v3}, Ljava/util/ArrayList;->size()I

    move-result v3

    add-int/lit8 v0, v3, -0x1

    .local v0, "i":I
    :goto_1
    if-ltz v0, :cond_3

    .line 10604
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedStarting:Ljava/util/ArrayList;

    invoke-virtual {v3, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowToken;

    .line 10605
    .restart local v2    # "token":Lcom/android/server/wm/WindowToken;
    const-string/jumbo v3, "  Finished Starting #"

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->print(I)V

    .line 10606
    const/16 v3, 0x20

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->print(C)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10607
    if-eqz p2, :cond_2

    .line 10608
    invoke-virtual {p1, v5}, Ljava/io/PrintWriter;->println(C)V

    .line 10609
    const-string/jumbo v3, "    "

    invoke-virtual {v2, p1, v3}, Lcom/android/server/wm/WindowToken;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10603
    :goto_2
    add-int/lit8 v0, v0, -0x1

    goto :goto_1

    .line 10611
    :cond_2
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_2

    .line 10615
    .end local v0    # "i":I
    .end local v2    # "token":Lcom/android/server/wm/WindowToken;
    :cond_3
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v3}, Landroid/util/ArraySet;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_5

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v3}, Landroid/util/ArraySet;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_5

    .line 10583
    :cond_4
    :goto_3
    return-void

    .line 10616
    :cond_5
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10617
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v3}, Landroid/util/ArraySet;->size()I

    move-result v3

    if-lez v3, :cond_6

    .line 10618
    const-string/jumbo v3, "  mOpeningApps="

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10620
    :cond_6
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v3}, Landroid/util/ArraySet;->size()I

    move-result v3

    if-lez v3, :cond_4

    .line 10621
    const-string/jumbo v3, "  mClosingApps="

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {p1, v3}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    goto :goto_3
.end method

.method dumpWindows(Ljava/io/PrintWriter;Ljava/lang/String;[Ljava/lang/String;IZ)Z
    .locals 13
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "name"    # Ljava/lang/String;
    .param p3, "args"    # [Ljava/lang/String;
    .param p4, "opti"    # I
    .param p5, "dumpAll"    # Z

    .prologue
    .line 10843
    new-instance v10, Lcom/android/server/wm/WindowList;

    invoke-direct {v10}, Lcom/android/server/wm/WindowList;-><init>()V

    .line 10844
    .local v10, "windows":Lcom/android/server/wm/WindowList;
    const-string/jumbo v11, "apps"

    invoke-virtual {v11, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v11

    if-nez v11, :cond_0

    const-string/jumbo v11, "visible"

    invoke-virtual {v11, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v11

    if-nez v11, :cond_0

    const-string/jumbo v11, "visible-apps"

    invoke-virtual {v11, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v11

    if-eqz v11, :cond_7

    .line 10845
    :cond_0
    const-string/jumbo v11, "apps"

    invoke-virtual {p2, v11}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v1

    .line 10846
    .local v1, "appsOnly":Z
    const-string/jumbo v11, "visible"

    invoke-virtual {p2, v11}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v6

    .line 10847
    .local v6, "visibleOnly":Z
    iget-object v12, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v12

    .line 10848
    if-eqz v1, :cond_1

    .line 10849
    const/4 v11, 0x1

    :try_start_0
    invoke-virtual {p0, p1, v11}, Lcom/android/server/wm/WindowManagerService;->dumpDisplayContentsLocked(Ljava/io/PrintWriter;Z)V

    .line 10852
    :cond_1
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v11}, Landroid/util/SparseArray;->size()I

    move-result v4

    .line 10853
    .local v4, "numDisplays":I
    const/4 v2, 0x0

    .local v2, "displayNdx":I
    :goto_0
    if-ge v2, v4, :cond_6

    .line 10855
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v11, v2}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v11}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v9

    .line 10856
    .local v9, "windowList":Lcom/android/server/wm/WindowList;
    invoke-virtual {v9}, Lcom/android/server/wm/WindowList;->size()I

    move-result v11

    add-int/lit8 v8, v11, -0x1

    .local v8, "winNdx":I
    :goto_1
    if-ltz v8, :cond_5

    .line 10857
    invoke-virtual {v9, v8}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowState;

    .line 10858
    .local v7, "w":Lcom/android/server/wm/WindowState;
    if-eqz v6, :cond_2

    iget-object v11, v7, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v11}, Lcom/android/server/wm/WindowStateAnimator;->getShown()Z

    move-result v11

    if-eqz v11, :cond_4

    .line 10859
    :cond_2
    if-eqz v1, :cond_3

    iget-object v11, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v11, :cond_4

    .line 10860
    :cond_3
    invoke-virtual {v10, v7}, Lcom/android/server/wm/WindowList;->add(Ljava/lang/Object;)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 10856
    :cond_4
    add-int/lit8 v8, v8, -0x1

    goto :goto_1

    .line 10853
    .end local v7    # "w":Lcom/android/server/wm/WindowState;
    :cond_5
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .end local v1    # "appsOnly":Z
    .end local v6    # "visibleOnly":Z
    .end local v8    # "winNdx":I
    .end local v9    # "windowList":Lcom/android/server/wm/WindowList;
    .end local p2    # "name":Ljava/lang/String;
    :cond_6
    monitor-exit v12

    .line 10892
    invoke-virtual {v10}, Lcom/android/server/wm/WindowList;->size()I

    move-result v11

    if-gtz v11, :cond_b

    .line 10893
    const/4 v11, 0x0

    return v11

    .line 10847
    .end local v2    # "displayNdx":I
    .end local v4    # "numDisplays":I
    .restart local v1    # "appsOnly":Z
    .restart local v6    # "visibleOnly":Z
    .restart local p2    # "name":Ljava/lang/String;
    :catchall_0
    move-exception v11

    monitor-exit v12

    throw v11

    .line 10866
    .end local v1    # "appsOnly":Z
    .end local v6    # "visibleOnly":Z
    :cond_7
    const/4 v5, 0x0

    .line 10869
    .local v5, "objectId":I
    const/16 v11, 0x10

    :try_start_1
    invoke-static {p2, v11}, Ljava/lang/Integer;->parseInt(Ljava/lang/String;I)I
    :try_end_1
    .catch Ljava/lang/RuntimeException; {:try_start_1 .. :try_end_1} :catch_0

    move-result v5

    .line 10870
    const/4 p2, 0x0

    .line 10873
    .end local p2    # "name":Ljava/lang/String;
    :goto_2
    iget-object v12, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v12

    .line 10874
    :try_start_2
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v11}, Landroid/util/SparseArray;->size()I

    move-result v4

    .line 10875
    .restart local v4    # "numDisplays":I
    const/4 v2, 0x0

    .restart local v2    # "displayNdx":I
    :goto_3
    if-ge v2, v4, :cond_6

    .line 10877
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v11, v2}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v11}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v9

    .line 10878
    .restart local v9    # "windowList":Lcom/android/server/wm/WindowList;
    invoke-virtual {v9}, Lcom/android/server/wm/WindowList;->size()I

    move-result v11

    add-int/lit8 v8, v11, -0x1

    .restart local v8    # "winNdx":I
    :goto_4
    if-ltz v8, :cond_a

    .line 10879
    invoke-virtual {v9, v8}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowState;

    .line 10880
    .restart local v7    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p2, :cond_9

    .line 10881
    iget-object v11, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-virtual {v11}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v11

    invoke-interface {v11}, Ljava/lang/CharSequence;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-virtual {v11, p2}, Ljava/lang/String;->contains(Ljava/lang/CharSequence;)Z

    move-result v11

    if-eqz v11, :cond_8

    .line 10882
    invoke-virtual {v10, v7}, Lcom/android/server/wm/WindowList;->add(Ljava/lang/Object;)Z

    .line 10878
    :cond_8
    :goto_5
    add-int/lit8 v8, v8, -0x1

    goto :goto_4

    .line 10871
    .end local v2    # "displayNdx":I
    .end local v4    # "numDisplays":I
    .end local v7    # "w":Lcom/android/server/wm/WindowState;
    .end local v8    # "winNdx":I
    .end local v9    # "windowList":Lcom/android/server/wm/WindowList;
    .restart local p2    # "name":Ljava/lang/String;
    :catch_0
    move-exception v3

    .local v3, "e":Ljava/lang/RuntimeException;
    goto :goto_2

    .line 10884
    .end local v3    # "e":Ljava/lang/RuntimeException;
    .end local p2    # "name":Ljava/lang/String;
    .restart local v2    # "displayNdx":I
    .restart local v4    # "numDisplays":I
    .restart local v7    # "w":Lcom/android/server/wm/WindowState;
    .restart local v8    # "winNdx":I
    .restart local v9    # "windowList":Lcom/android/server/wm/WindowList;
    :cond_9
    invoke-static {v7}, Ljava/lang/System;->identityHashCode(Ljava/lang/Object;)I

    move-result v11

    if-ne v11, v5, :cond_8

    .line 10885
    invoke-virtual {v10, v7}, Lcom/android/server/wm/WindowList;->add(Ljava/lang/Object;)Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    goto :goto_5

    .line 10873
    .end local v2    # "displayNdx":I
    .end local v4    # "numDisplays":I
    .end local v7    # "w":Lcom/android/server/wm/WindowState;
    .end local v8    # "winNdx":I
    .end local v9    # "windowList":Lcom/android/server/wm/WindowList;
    :catchall_1
    move-exception v11

    monitor-exit v12

    throw v11

    .line 10875
    .restart local v2    # "displayNdx":I
    .restart local v4    # "numDisplays":I
    .restart local v8    # "winNdx":I
    .restart local v9    # "windowList":Lcom/android/server/wm/WindowList;
    :cond_a
    add-int/lit8 v2, v2, 0x1

    goto :goto_3

    .line 10896
    .end local v5    # "objectId":I
    .end local v8    # "winNdx":I
    .end local v9    # "windowList":Lcom/android/server/wm/WindowList;
    :cond_b
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v11

    .line 10897
    :try_start_3
    move/from16 v0, p5

    invoke-virtual {p0, p1, v0, v10}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_2

    monitor-exit v11

    .line 10899
    const/4 v11, 0x1

    return v11

    .line 10896
    :catchall_2
    move-exception v12

    monitor-exit v11

    throw v12
.end method

.method dumpWindowsLocked()V
    .locals 8

    .prologue
    .line 4995
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 4996
    .local v2, "numDisplays":I
    const/4 v1, 0x0

    .local v1, "displayNdx":I
    :goto_0
    if-ge v1, v2, :cond_1

    .line 4997
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 4998
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const-string/jumbo v5, "WindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v7, " Display #"

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v7

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 4999
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v4

    .line 5000
    .local v4, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v3, v5, -0x1

    .local v3, "winNdx":I
    :goto_1
    if-ltz v3, :cond_0

    .line 5001
    const-string/jumbo v5, "WindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v7, "  #"

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string/jumbo v7, ": "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v4, v3}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v7

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    .line 5000
    add-int/lit8 v3, v3, -0x1

    goto :goto_1

    .line 4996
    :cond_0
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 4994
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v3    # "winNdx":I
    .end local v4    # "windows":Lcom/android/server/wm/WindowList;
    :cond_1
    return-void
.end method

.method dumpWindowsLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    .locals 1
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "dumpAll"    # Z
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/io/PrintWriter;",
            "Z",
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;)V"
        }
    .end annotation

    .prologue
    .line 10650
    .local p3, "windows":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/WindowState;>;"
    const-string/jumbo v0, "WINDOW MANAGER WINDOWS (dumpsys window windows)"

    invoke-virtual {p1, v0}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10651
    invoke-virtual {p0, p1, p2, p3}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsNoHeaderLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V

    .line 10649
    return-void
.end method

.method dumpWindowsNoHeaderLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V
    .locals 10
    .param p1, "pw"    # Ljava/io/PrintWriter;
    .param p2, "dumpAll"    # Z
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/io/PrintWriter;",
            "Z",
            "Ljava/util/ArrayList",
            "<",
            "Lcom/android/server/wm/WindowState;",
            ">;)V"
        }
    .end annotation

    .prologue
    .line 10656
    .local p3, "windows":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/WindowState;>;"
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8}, Landroid/util/SparseArray;->size()I

    move-result v3

    .line 10657
    .local v3, "numDisplays":I
    const/4 v1, 0x0

    .local v1, "displayNdx":I
    :goto_0
    if-ge v1, v3, :cond_5

    .line 10658
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v8}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v7

    .line 10659
    .local v7, "windowList":Lcom/android/server/wm/WindowList;
    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v8

    add-int/lit8 v6, v8, -0x1

    .local v6, "winNdx":I
    :goto_1
    if-ltz v6, :cond_4

    .line 10660
    invoke-virtual {v7, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10661
    .local v4, "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_0

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_2

    .line 10662
    :cond_0
    const-string/jumbo v8, "  Window #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v6}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10663
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10664
    const-string/jumbo v9, "    "

    if-nez p2, :cond_1

    if-eqz p3, :cond_3

    :cond_1
    const/4 v8, 0x1

    :goto_2
    invoke-virtual {v4, p1, v9, v8}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10659
    :cond_2
    add-int/lit8 v6, v6, -0x1

    goto :goto_1

    .line 10664
    :cond_3
    const/4 v8, 0x0

    goto :goto_2

    .line 10657
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_4
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 10668
    .end local v6    # "winNdx":I
    .end local v7    # "windowList":Lcom/android/server/wm/WindowList;
    :cond_5
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_8

    .line 10669
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10670
    const-string/jumbo v8, "  Input method dialogs:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10671
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .local v2, "i":I
    :goto_3
    if-ltz v2, :cond_8

    .line 10672
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10673
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_6

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_7

    .line 10674
    :cond_6
    const-string/jumbo v8, "  IM Dialog #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const-string/jumbo v8, ": "

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10671
    :cond_7
    add-int/lit8 v2, v2, -0x1

    goto :goto_3

    .line 10678
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_8
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemove:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_c

    .line 10679
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10680
    const-string/jumbo v8, "  Remove pending for:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10681
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemove:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_4
    if-ltz v2, :cond_c

    .line 10682
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemove:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10683
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_9

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_a

    .line 10684
    :cond_9
    const-string/jumbo v8, "  Remove #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10685
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10686
    if-eqz p2, :cond_b

    .line 10687
    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10688
    const-string/jumbo v8, "    "

    const/4 v9, 0x1

    invoke-virtual {v4, p1, v8, v9}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10681
    :cond_a
    :goto_5
    add-int/lit8 v2, v2, -0x1

    goto :goto_4

    .line 10690
    :cond_b
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_5

    .line 10695
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_c
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    if-eqz v8, :cond_e

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_e

    .line 10696
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10697
    const-string/jumbo v8, "  Windows force removing:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10698
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_6
    if-ltz v2, :cond_e

    .line 10699
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10700
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    const-string/jumbo v8, "  Removing #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10701
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10702
    if-eqz p2, :cond_d

    .line 10703
    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10704
    const-string/jumbo v8, "    "

    const/4 v9, 0x1

    invoke-virtual {v4, p1, v8, v9}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10698
    :goto_7
    add-int/lit8 v2, v2, -0x1

    goto :goto_6

    .line 10706
    :cond_d
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_7

    .line 10710
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_e
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDestroySurface:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_12

    .line 10711
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10712
    const-string/jumbo v8, "  Windows waiting to destroy their surface:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10713
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDestroySurface:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_8
    if-ltz v2, :cond_12

    .line 10714
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDestroySurface:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10715
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_f

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_10

    .line 10716
    :cond_f
    const-string/jumbo v8, "  Destroy #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10717
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10718
    if-eqz p2, :cond_11

    .line 10719
    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10720
    const-string/jumbo v8, "    "

    const/4 v9, 0x1

    invoke-virtual {v4, p1, v8, v9}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10713
    :cond_10
    :goto_9
    add-int/lit8 v2, v2, -0x1

    goto :goto_8

    .line 10722
    :cond_11
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_9

    .line 10727
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_12
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLosingFocus:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_16

    .line 10728
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10729
    const-string/jumbo v8, "  Windows losing focus:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10730
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLosingFocus:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_a
    if-ltz v2, :cond_16

    .line 10731
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLosingFocus:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10732
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_13

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_14

    .line 10733
    :cond_13
    const-string/jumbo v8, "  Losing #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10734
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10735
    if-eqz p2, :cond_15

    .line 10736
    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10737
    const-string/jumbo v8, "    "

    const/4 v9, 0x1

    invoke-virtual {v4, p1, v8, v9}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10730
    :cond_14
    :goto_b
    add-int/lit8 v2, v2, -0x1

    goto :goto_a

    .line 10739
    :cond_15
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_b

    .line 10744
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_16
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_1a

    .line 10745
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10746
    const-string/jumbo v8, "  Windows waiting to resize:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10747
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_c
    if-ltz v2, :cond_1a

    .line 10748
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 10749
    .restart local v4    # "w":Lcom/android/server/wm/WindowState;
    if-eqz p3, :cond_17

    invoke-virtual {p3, v4}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-eqz v8, :cond_18

    .line 10750
    :cond_17
    const-string/jumbo v8, "  Resizing #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    .line 10751
    invoke-virtual {p1, v4}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10752
    if-eqz p2, :cond_19

    .line 10753
    const-string/jumbo v8, ":"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10754
    const-string/jumbo v8, "    "

    const/4 v9, 0x1

    invoke-virtual {v4, p1, v8, v9}, Lcom/android/server/wm/WindowState;->dump(Ljava/io/PrintWriter;Ljava/lang/String;Z)V

    .line 10747
    :cond_18
    :goto_d
    add-int/lit8 v2, v2, -0x1

    goto :goto_c

    .line 10756
    :cond_19
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    goto :goto_d

    .line 10761
    .end local v2    # "i":I
    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_1a
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    if-lez v8, :cond_1b

    .line 10762
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10763
    const-string/jumbo v8, "  Clients waiting for these windows to be drawn:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10764
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->size()I

    move-result v8

    add-int/lit8 v2, v8, -0x1

    .restart local v2    # "i":I
    :goto_e
    if-ltz v2, :cond_1b

    .line 10765
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForDrawn:Ljava/util/ArrayList;

    invoke-virtual {v8, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/WindowState;

    .line 10766
    .local v5, "win":Lcom/android/server/wm/WindowState;
    const-string/jumbo v8, "  Waiting #"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    invoke-virtual {p1, v2}, Ljava/io/PrintWriter;->print(I)V

    const/16 v8, 0x20

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(C)V

    invoke-virtual {p1, v5}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10764
    add-int/lit8 v2, v2, -0x1

    goto :goto_e

    .line 10769
    .end local v2    # "i":I
    .end local v5    # "win":Lcom/android/server/wm/WindowState;
    :cond_1b
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10770
    const-string/jumbo v8, "  mCurConfiguration="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10771
    const-string/jumbo v8, "  mHasPermanentDpad="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mHasPermanentDpad:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Z)V

    .line 10772
    const-string/jumbo v8, "  mCurrentFocus="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10773
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastFocus:Lcom/android/server/wm/WindowState;

    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eq v8, v9, :cond_1c

    .line 10774
    const-string/jumbo v8, "  mLastFocus="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastFocus:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10776
    :cond_1c
    const-string/jumbo v8, "  mFocusedApp="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10777
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    if-eqz v8, :cond_1d

    .line 10778
    const-string/jumbo v8, "  mInputMethodTarget="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10780
    :cond_1d
    const-string/jumbo v8, "  mInTouchMode="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mInTouchMode:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Z)V

    .line 10781
    const-string/jumbo v8, " mLayoutSeq="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLayoutSeq:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(I)V

    .line 10782
    const-string/jumbo v8, "  mLastDisplayFreezeDuration="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 10783
    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastDisplayFreezeDuration:I

    int-to-long v8, v8

    invoke-static {v8, v9, p1}, Landroid/util/TimeUtils;->formatDuration(JLjava/io/PrintWriter;)V

    .line 10784
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    if-eqz v8, :cond_1e

    .line 10785
    const-string/jumbo v8, " due to "

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 10786
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10788
    :cond_1e
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10789
    const-string/jumbo v8, "  mLastWakeLockHoldingWindow="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockHoldingWindow:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10790
    const-string/jumbo v8, " mLastWakeLockObscuringWindow="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockObscuringWindow:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/Object;)V

    .line 10791
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10793
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const-string/jumbo v9, "  "

    invoke-virtual {v8, p1, v9}, Lcom/android/server/wm/InputMonitor;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10795
    if-eqz p2, :cond_24

    .line 10796
    const-string/jumbo v8, "  mSystemDecorLayer="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mSystemDecorLayer:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10797
    const-string/jumbo v8, " mScreenRect="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mScreenRect:Landroid/graphics/Rect;

    invoke-virtual {v8}, Landroid/graphics/Rect;->toShortString()Ljava/lang/String;

    move-result-object v8

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10798
    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    if-eqz v8, :cond_1f

    .line 10799
    const-string/jumbo v8, "  mLastStatusBarVisibility=0x"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 10800
    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    invoke-static {v8}, Ljava/lang/Integer;->toHexString(I)Ljava/lang/String;

    move-result-object v8

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10802
    :cond_1f
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-eqz v8, :cond_20

    .line 10803
    const-string/jumbo v8, "  mInputMethodWindow="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/Object;)V

    .line 10805
    :cond_20
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    const-string/jumbo v9, "  "

    invoke-virtual {v8, p1, v9}, Lcom/android/server/wm/WindowSurfacePlacer;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10806
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    const-string/jumbo v9, "  "

    invoke-virtual {v8, p1, v9}, Lcom/android/server/wm/WallpaperController;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10807
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    const-string/jumbo v9, "  "

    invoke-virtual {v8, p1, v9}, Lcom/android/server/wm/WindowLayersController;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10808
    const-string/jumbo v8, "  mSystemBooted="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Z)V

    .line 10809
    const-string/jumbo v8, " mDisplayEnabled="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Z)V

    .line 10810
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->needsLayout()Z

    move-result v8

    if-eqz v8, :cond_23

    .line 10811
    const-string/jumbo v8, "  layoutNeeded on displays="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    .line 10812
    const/4 v1, 0x0

    :goto_f
    if-ge v1, v3, :cond_22

    .line 10813
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 10814
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    iget-boolean v8, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    if-eqz v8, :cond_21

    .line 10815
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v8

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10812
    :cond_21
    add-int/lit8 v1, v1, 0x1

    goto :goto_f

    .line 10818
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :cond_22
    invoke-virtual {p1}, Ljava/io/PrintWriter;->println()V

    .line 10820
    :cond_23
    const-string/jumbo v8, "  mTransactionSequence="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mTransactionSequence:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(I)V

    .line 10821
    const-string/jumbo v8, "  mDisplayFrozen="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Z)V

    .line 10822
    const-string/jumbo v8, " windows="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10823
    const-string/jumbo v8, " client="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Z)V

    .line 10824
    const-string/jumbo v8, " apps="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10825
    const-string/jumbo v8, " waitingForConfig="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Z)V

    .line 10826
    const-string/jumbo v8, "  mRotation="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10827
    const-string/jumbo v8, " mAltOrientation="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Z)V

    .line 10828
    const-string/jumbo v8, "  mLastWindowForcedOrientation="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(I)V

    .line 10829
    const-string/jumbo v8, " mLastOrientation="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(I)V

    .line 10830
    const-string/jumbo v8, "  mDeferredRotationPauseCount="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(I)V

    .line 10831
    const-string/jumbo v8, "  Animation settings: disabled="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Z)V

    .line 10832
    const-string/jumbo v8, " window="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(F)V

    .line 10833
    const-string/jumbo v8, " transition="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(F)V

    .line 10834
    const-string/jumbo v8, " animator="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget v8, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(F)V

    .line 10835
    const-string/jumbo v8, " mSkipAppTransitionAnimation="

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->print(Ljava/lang/String;)V

    iget-boolean v8, p0, Lcom/android/server/wm/WindowManagerService;->mSkipAppTransitionAnimation:Z

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Z)V

    .line 10836
    const-string/jumbo v8, "  mLayoutToAnim:"

    invoke-virtual {p1, v8}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10837
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    const-string/jumbo v9, "    "

    invoke-virtual {v8, p1, v9}, Lcom/android/server/wm/AppTransition;->dump(Ljava/io/PrintWriter;Ljava/lang/String;)V

    .line 10655
    :cond_24
    return-void
.end method

.method public enableScreenAfterBoot()V
    .locals 5

    .prologue
    .line 5947
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5956
    :try_start_0
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v0, :cond_0

    monitor-exit v1

    .line 5957
    return-void

    .line 5959
    :cond_0
    const/4 v0, 0x1

    :try_start_1
    iput-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    .line 5960
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->hideBootMessagesLocked()V

    .line 5963
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v2, 0x7530

    const/16 v4, 0x17

    invoke-virtual {v0, v4, v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v1

    .line 5966
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->systemBooted()V

    .line 5968
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->performEnableScreen()V

    .line 5946
    return-void

    .line 5947
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public enableScreenIfNeeded()V
    .locals 2

    .prologue
    .line 5973
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 5974
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->enableScreenIfNeededLocked()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 5972
    return-void

    .line 5973
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method enableScreenIfNeededLocked()V
    .locals 2

    .prologue
    .line 5987
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    if-eqz v0, :cond_0

    .line 5988
    return-void

    .line 5990
    :cond_0
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    if-nez v0, :cond_1

    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    if-eqz v0, :cond_2

    .line 5993
    :cond_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v1, 0x10

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 5978
    return-void

    .line 5991
    :cond_2
    return-void
.end method

.method public endProlongedAnimations()V
    .locals 5

    .prologue
    .line 4184
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 4185
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v3}, Ljava/util/HashMap;->values()Ljava/util/Collection;

    move-result-object v3

    invoke-interface {v3}, Ljava/lang/Iterable;->iterator()Ljava/util/Iterator;

    move-result-object v2

    .local v2, "win$iterator":Ljava/util/Iterator;
    :cond_0
    :goto_0
    invoke-interface {v2}, Ljava/util/Iterator;->hasNext()Z

    move-result v3

    if-eqz v3, :cond_1

    invoke-interface {v2}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 4186
    .local v1, "win":Lcom/android/server/wm/WindowState;
    iget-object v0, v1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 4187
    .local v0, "appToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    if-eqz v3, :cond_0

    .line 4188
    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v3}, Lcom/android/server/wm/AppWindowAnimator;->endProlongedAnimation()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    goto :goto_0

    .line 4184
    .end local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .end local v1    # "win":Lcom/android/server/wm/WindowState;
    .end local v2    # "win$iterator":Ljava/util/Iterator;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 4191
    .restart local v2    # "win$iterator":Ljava/util/Iterator;
    :cond_1
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v3}, Lcom/android/server/wm/AppTransition;->notifyProlongedAnimationsEnded()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v4

    .line 4183
    return-void
.end method

.method public executeAppTransition()V
    .locals 4

    .prologue
    .line 4197
    const-string/jumbo v2, "android.permission.MANAGE_APP_TOKENS"

    .line 4198
    const-string/jumbo v3, "executeAppTransition()"

    .line 4197
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 4199
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 4202
    :cond_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 4205
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v2}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v2

    if-eqz v2, :cond_1

    .line 4206
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v2}, Lcom/android/server/wm/AppTransition;->setReady()V

    .line 4207
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    move-result-wide v0

    .line 4209
    .local v0, "origId":J
    :try_start_1
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 4211
    :try_start_2
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .end local v0    # "origId":J
    :cond_1
    monitor-exit v3

    .line 4196
    return-void

    .line 4210
    .restart local v0    # "origId":J
    :catchall_0
    move-exception v2

    .line 4211
    :try_start_3
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 4210
    throw v2
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 4202
    .end local v0    # "origId":J
    :catchall_1
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method public exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V
    .locals 2
    .param p1, "callback"    # Landroid/view/IOnKeyguardExitResult;

    .prologue
    .line 5595
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.DISABLE_KEYGUARD"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 5597
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires DISABLE_KEYGUARD permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5600
    :cond_0
    if-nez p1, :cond_1

    .line 5601
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "callback == null"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5604
    :cond_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    new-instance v1, Lcom/android/server/wm/WindowManagerService$7;

    invoke-direct {v1, p0, p1}, Lcom/android/server/wm/WindowManagerService$7;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IOnKeyguardExitResult;)V

    invoke-interface {v0, v1}, Landroid/view/WindowManagerPolicy;->exitKeyguardSecurely(Landroid/view/WindowManagerPolicy$OnKeyguardExitResult;)V

    .line 5594
    return-void
.end method

.method findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    const/4 v2, 0x0

    .line 3435
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowToken;

    .line 3436
    .local v0, "wtoken":Lcom/android/server/wm/WindowToken;
    if-nez v0, :cond_0

    .line 3437
    return-object v2

    .line 3439
    :cond_0
    iget-object v1, v0, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    return-object v1
.end method

.method findDesiredInputMethodWindowIndexLocked(Z)I
    .locals 15
    .param p1, "willMove"    # Z

    .prologue
    .line 1504
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v12

    .line 1505
    .local v12, "windows":Lcom/android/server/wm/WindowList;
    const/4 v9, 0x0

    .line 1507
    .local v9, "w":Lcom/android/server/wm/WindowState;
    invoke-virtual {v12}, Lcom/android/server/wm/WindowList;->size()I

    move-result v13

    add-int/lit8 v6, v13, -0x1

    .local v6, "i":I
    :goto_0
    if-ltz v6, :cond_0

    .line 1508
    invoke-virtual {v12, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/WindowState;

    .line 1512
    .local v11, "win":Lcom/android/server/wm/WindowState;
    invoke-static {v11}, Lcom/android/server/wm/WindowManagerService;->canBeImeTarget(Lcom/android/server/wm/WindowState;)Z

    move-result v13

    if-eqz v13, :cond_2

    .line 1513
    move-object v9, v11

    .line 1521
    .local v9, "w":Lcom/android/server/wm/WindowState;
    if-nez p1, :cond_0

    .line 1522
    iget-object v13, v11, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v13, v13, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v14, 0x3

    if-ne v13, v14, :cond_0

    .line 1523
    if-lez v6, :cond_0

    .line 1524
    add-int/lit8 v13, v6, -0x1

    invoke-virtual {v12, v13}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v10

    check-cast v10, Lcom/android/server/wm/WindowState;

    .line 1525
    .local v10, "wb":Lcom/android/server/wm/WindowState;
    iget-object v13, v10, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v14, v11, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-ne v13, v14, :cond_0

    invoke-static {v10}, Lcom/android/server/wm/WindowManagerService;->canBeImeTarget(Lcom/android/server/wm/WindowState;)Z

    move-result v13

    if-eqz v13, :cond_0

    .line 1526
    add-int/lit8 v6, v6, -0x1

    .line 1527
    move-object v9, v10

    .line 1544
    .end local v9    # "w":Lcom/android/server/wm/WindowState;
    .end local v10    # "wb":Lcom/android/server/wm/WindowState;
    .end local v11    # "win":Lcom/android/server/wm/WindowState;
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 1545
    .local v0, "curTarget":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_3

    .line 1546
    invoke-virtual {v0}, Lcom/android/server/wm/WindowState;->isDisplayedLw()Z

    move-result v13

    .line 1545
    if-eqz v13, :cond_3

    .line 1547
    invoke-virtual {v0}, Lcom/android/server/wm/WindowState;->isClosing()Z

    move-result v13

    .line 1545
    if-eqz v13, :cond_3

    .line 1548
    if-eqz v9, :cond_1

    iget-object v13, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v13, v13, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    iget-object v14, v9, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v14, v14, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    if-le v13, v14, :cond_3

    .line 1550
    :cond_1
    invoke-virtual {v12, v0}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v13

    add-int/lit8 v13, v13, 0x1

    return v13

    .line 1507
    .end local v0    # "curTarget":Lcom/android/server/wm/WindowState;
    .local v9, "w":Lcom/android/server/wm/WindowState;
    .restart local v11    # "win":Lcom/android/server/wm/WindowState;
    :cond_2
    add-int/lit8 v6, v6, -0x1

    goto :goto_0

    .line 1556
    .end local v9    # "w":Lcom/android/server/wm/WindowState;
    .end local v11    # "win":Lcom/android/server/wm/WindowState;
    .restart local v0    # "curTarget":Lcom/android/server/wm/WindowState;
    :cond_3
    if-eqz p1, :cond_b

    if-eqz v9, :cond_b

    .line 1557
    if-nez v0, :cond_6

    const/4 v8, 0x0

    .line 1558
    .local v8, "token":Lcom/android/server/wm/AppWindowToken;
    :goto_1
    if-eqz v8, :cond_b

    .line 1564
    const/4 v5, 0x0

    .line 1565
    .local v5, "highestTarget":Lcom/android/server/wm/WindowState;
    const/4 v4, 0x0

    .line 1566
    .local v4, "highestPos":I
    iget-object v13, v8, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-boolean v13, v13, Lcom/android/server/wm/AppWindowAnimator;->animating:Z

    if-nez v13, :cond_4

    iget-object v13, v8, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v13, v13, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    if-eqz v13, :cond_5

    .line 1567
    :cond_4
    invoke-virtual {v0}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v1

    .line 1568
    .local v1, "curWindows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v1, v0}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v7

    .line 1569
    .end local v5    # "highestTarget":Lcom/android/server/wm/WindowState;
    .local v7, "pos":I
    :goto_2
    if-ltz v7, :cond_5

    .line 1570
    invoke-virtual {v1, v7}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/WindowState;

    .line 1571
    .restart local v11    # "win":Lcom/android/server/wm/WindowState;
    iget-object v13, v11, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eq v13, v8, :cond_7

    .line 1585
    .end local v1    # "curWindows":Lcom/android/server/wm/WindowList;
    .end local v7    # "pos":I
    .end local v11    # "win":Lcom/android/server/wm/WindowState;
    :cond_5
    if-eqz v5, :cond_b

    .line 1591
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v13}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v13

    if-eqz v13, :cond_a

    .line 1594
    const/4 v13, 0x1

    iput-boolean v13, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTargetWaitingAnim:Z

    .line 1595
    iput-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 1596
    add-int/lit8 v13, v4, 0x1

    return v13

    .line 1557
    .end local v4    # "highestPos":I
    .end local v8    # "token":Lcom/android/server/wm/AppWindowToken;
    :cond_6
    iget-object v8, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    goto :goto_1

    .line 1574
    .restart local v1    # "curWindows":Lcom/android/server/wm/WindowList;
    .restart local v4    # "highestPos":I
    .restart local v7    # "pos":I
    .restart local v8    # "token":Lcom/android/server/wm/AppWindowToken;
    .restart local v11    # "win":Lcom/android/server/wm/WindowState;
    :cond_7
    iget-boolean v13, v11, Lcom/android/server/wm/WindowState;->mRemoved:Z

    if-nez v13, :cond_9

    .line 1575
    if-eqz v5, :cond_8

    iget-object v13, v11, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v13, v13, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    .line 1576
    iget-object v14, v5, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v14, v14, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    .line 1575
    if-le v13, v14, :cond_9

    .line 1577
    :cond_8
    move-object v5, v11

    .line 1578
    .local v5, "highestTarget":Lcom/android/server/wm/WindowState;
    move v4, v7

    .line 1581
    .end local v5    # "highestTarget":Lcom/android/server/wm/WindowState;
    :cond_9
    add-int/lit8 v7, v7, -0x1

    goto :goto_2

    .line 1597
    .end local v1    # "curWindows":Lcom/android/server/wm/WindowList;
    .end local v7    # "pos":I
    .end local v11    # "win":Lcom/android/server/wm/WindowState;
    :cond_a
    iget-object v13, v5, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v13}, Lcom/android/server/wm/WindowStateAnimator;->isAnimationSet()Z

    move-result v13

    if-eqz v13, :cond_b

    .line 1598
    iget-object v13, v5, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v13, v13, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    iget-object v14, v9, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v14, v14, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    if-le v13, v14, :cond_b

    .line 1603
    const/4 v13, 0x1

    iput-boolean v13, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTargetWaitingAnim:Z

    .line 1604
    iput-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 1605
    add-int/lit8 v13, v4, 0x1

    return v13

    .line 1612
    .end local v4    # "highestPos":I
    .end local v8    # "token":Lcom/android/server/wm/AppWindowToken;
    :cond_b
    if-eqz v9, :cond_f

    .line 1613
    if-eqz p1, :cond_c

    .line 1616
    iput-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 1617
    const/4 v13, 0x0

    iput-boolean v13, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTargetWaitingAnim:Z

    .line 1618
    iget-object v13, v9, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v13, :cond_d

    .line 1619
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    .line 1620
    iget-object v14, v9, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v14, v14, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget v14, v14, Lcom/android/server/wm/AppWindowAnimator;->animLayerAdjustment:I

    .line 1619
    invoke-virtual {v13, v14}, Lcom/android/server/wm/WindowLayersController;->setInputMethodAnimLayerAdjustment(I)V

    .line 1630
    :cond_c
    :goto_3
    iget-object v13, v9, Lcom/android/server/wm/WindowState;->mDisplayContent:Lcom/android/server/wm/DisplayContent;

    iget-object v13, v13, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v13}, Lcom/android/server/wm/DockedStackDividerController;->getWindow()Lcom/android/server/wm/WindowState;

    move-result-object v3

    .line 1631
    .local v3, "dockedDivider":Lcom/android/server/wm/WindowState;
    if-eqz v3, :cond_e

    invoke-virtual {v3}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z

    move-result v13

    if-eqz v13, :cond_e

    .line 1632
    invoke-virtual {v12, v3}, Lcom/android/server/wm/WindowList;->indexOf(Ljava/lang/Object;)I

    move-result v2

    .line 1633
    .local v2, "dividerIndex":I
    if-lez v2, :cond_e

    if-le v2, v6, :cond_e

    .line 1634
    add-int/lit8 v13, v2, 0x1

    return v13

    .line 1622
    .end local v2    # "dividerIndex":I
    .end local v3    # "dockedDivider":Lcom/android/server/wm/WindowState;
    :cond_d
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    const/4 v14, 0x0

    invoke-virtual {v13, v14}, Lcom/android/server/wm/WindowLayersController;->setInputMethodAnimLayerAdjustment(I)V

    goto :goto_3

    .line 1637
    .restart local v3    # "dockedDivider":Lcom/android/server/wm/WindowState;
    :cond_e
    add-int/lit8 v13, v6, 0x1

    return v13

    .line 1639
    .end local v3    # "dockedDivider":Lcom/android/server/wm/WindowState;
    :cond_f
    if-eqz p1, :cond_10

    .line 1642
    const/4 v13, 0x0

    iput-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    .line 1643
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    const/4 v14, 0x0

    invoke-virtual {v13, v14}, Lcom/android/server/wm/WindowLayersController;->setInputMethodAnimLayerAdjustment(I)V

    .line 1645
    :cond_10
    const/4 v13, -0x1

    return v13
.end method

.method findFocusedWindowLocked(Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowState;
    .locals 12
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    const/4 v11, 0x0

    .line 10037
    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v7

    .line 10038
    .local v7, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v9

    add-int/lit8 v0, v9, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_8

    .line 10039
    invoke-virtual {v7, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/WindowState;

    .line 10047
    .local v6, "win":Lcom/android/server/wm/WindowState;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowState;->canReceiveKeys()Z

    move-result v9

    if-nez v9, :cond_1

    .line 10038
    :cond_0
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 10051
    :cond_1
    iget-object v8, v6, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 10054
    .local v8, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v8, :cond_2

    iget-boolean v9, v8, Lcom/android/server/wm/AppWindowToken;->removed:Z

    if-nez v9, :cond_0

    iget-boolean v9, v8, Lcom/android/server/wm/AppWindowToken;->sendingToBottom:Z

    if-nez v9, :cond_0

    .line 10062
    :cond_2
    if-eqz v8, :cond_4

    iget-object v9, v6, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v10, 0x3

    if-eq v9, v10, :cond_4

    .line 10063
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-eqz v9, :cond_4

    .line 10064
    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getTasks()Ljava/util/ArrayList;

    move-result-object v2

    .line 10065
    .local v2, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v9

    add-int/lit8 v1, v9, -0x1

    .local v1, "taskNdx":I
    :goto_1
    if-ltz v1, :cond_4

    .line 10066
    invoke-virtual {v2, v1}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/Task;

    iget-object v5, v9, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 10067
    .local v5, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual {v5}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v9

    add-int/lit8 v4, v9, -0x1

    .line 10068
    .local v4, "tokenNdx":I
    :goto_2
    if-ltz v4, :cond_3

    .line 10069
    invoke-virtual {v5, v4}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/AppWindowToken;

    .line 10070
    .local v3, "token":Lcom/android/server/wm/AppWindowToken;
    if-ne v8, v3, :cond_5

    .line 10081
    .end local v3    # "token":Lcom/android/server/wm/AppWindowToken;
    :cond_3
    if-ltz v4, :cond_7

    .line 10090
    .end local v1    # "taskNdx":I
    .end local v2    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    .end local v4    # "tokenNdx":I
    .end local v5    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_4
    return-object v6

    .line 10073
    .restart local v1    # "taskNdx":I
    .restart local v2    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    .restart local v3    # "token":Lcom/android/server/wm/AppWindowToken;
    .restart local v4    # "tokenNdx":I
    .restart local v5    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_5
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-ne v9, v3, :cond_6

    invoke-virtual {v3}, Lcom/android/server/wm/AppWindowToken;->windowsAreFocusable()Z

    move-result v9

    if-eqz v9, :cond_6

    .line 10078
    return-object v11

    .line 10068
    :cond_6
    add-int/lit8 v4, v4, -0x1

    goto :goto_2

    .line 10065
    .end local v3    # "token":Lcom/android/server/wm/AppWindowToken;
    :cond_7
    add-int/lit8 v1, v1, -0x1

    goto :goto_1

    .line 10094
    .end local v1    # "taskNdx":I
    .end local v2    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    .end local v4    # "tokenNdx":I
    .end local v5    # "tokens":Lcom/android/server/wm/AppTokenList;
    .end local v6    # "win":Lcom/android/server/wm/WindowState;
    .end local v8    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :cond_8
    return-object v11
.end method

.method public finishDrawingWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)V
    .locals 6
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;

    .prologue
    .line 3261
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 3263
    .local v0, "origId":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 3264
    const/4 v3, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v2

    .line 3267
    .local v2, "win":Lcom/android/server/wm/WindowState;
    if-eqz v2, :cond_1

    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowStateAnimator;->finishDrawingLocked()Z

    move-result v3

    if-eqz v3, :cond_1

    .line 3268
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v3, v3, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v5, 0x100000

    and-int/2addr v3, v5

    if-eqz v3, :cond_0

    .line 3269
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    iget v5, v3, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v5, v5, 0x4

    iput v5, v3, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    .line 3272
    :cond_0
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 3273
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 3277
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3260
    return-void

    .line 3263
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    :try_start_3
    monitor-exit v4

    throw v3
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 3276
    :catchall_1
    move-exception v3

    .line 3277
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3276
    throw v3
.end method

.method public freezeOrThawRotation(I)V
    .locals 4
    .param p1, "rotation"    # I

    .prologue
    const/4 v3, 0x0

    .line 11885
    const-string/jumbo v0, "android.permission.SET_ORIENTATION"

    .line 11886
    const-string/jumbo v1, "freezeRotation()"

    .line 11885
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 11887
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires SET_ORIENTATION permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 11889
    :cond_0
    const/4 v0, -0x1

    if-lt p1, v0, :cond_1

    const/4 v0, 0x3

    if-le p1, v0, :cond_2

    .line 11890
    :cond_1
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "Rotation argument must be -1 or a valid rotation constant."

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 11894
    :cond_2
    sget-object v0, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "freezeRotationTemporarily: mRotation="

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget v2, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 11896
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->freezeOrThawRotation(I)V

    .line 11897
    invoke-virtual {p0, v3, v3}, Lcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V

    .line 11884
    return-void
.end method

.method public freezeRotation(I)V
    .locals 6
    .param p1, "rotation"    # I

    .prologue
    const/4 v5, 0x0

    const/4 v4, -0x1

    .line 6733
    const-string/jumbo v2, "android.permission.SET_ORIENTATION"

    .line 6734
    const-string/jumbo v3, "freezeRotation()"

    .line 6733
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 6735
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires SET_ORIENTATION permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 6737
    :cond_0
    if-lt p1, v4, :cond_1

    const/4 v2, 0x3

    if-le p1, v2, :cond_2

    .line 6738
    :cond_1
    new-instance v2, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v3, "Rotation argument must be -1 or a valid rotation constant."

    invoke-direct {v2, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 6744
    :cond_2
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 6746
    .local v0, "origId":J
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 6747
    if-ne p1, v4, :cond_3

    iget p1, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    .line 6746
    .end local p1    # "rotation":I
    :cond_3
    const/4 v3, 0x1

    invoke-interface {v2, v3, p1}, Landroid/view/WindowManagerPolicy;->setUserRotationMode(II)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 6749
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 6752
    invoke-virtual {p0, v5, v5}, Lcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V

    .line 6732
    return-void

    .line 6748
    :catchall_0
    move-exception v2

    .line 6749
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 6748
    throw v2
.end method

.method public getAnimationScale(I)F
    .locals 1
    .param p1, "which"    # I

    .prologue
    .line 5768
    packed-switch p1, :pswitch_data_0

    .line 5773
    const/4 v0, 0x0

    return v0

    .line 5769
    :pswitch_0
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    return v0

    .line 5770
    :pswitch_1
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    return v0

    .line 5771
    :pswitch_2
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    return v0

    .line 5768
    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_2
    .end packed-switch
.end method

.method public getAnimationScales()[F
    .locals 3

    .prologue
    .line 5778
    const/4 v0, 0x3

    new-array v0, v0, [F

    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    const/4 v2, 0x0

    aput v1, v0, v2

    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    const/4 v2, 0x1

    aput v1, v0, v2

    .line 5779
    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    const/4 v2, 0x2

    aput v1, v0, v2

    .line 5778
    return-object v0
.end method

.method public getAppOrientation(Landroid/view/IApplicationToken;)I
    .locals 3
    .param p1, "token"    # Landroid/view/IApplicationToken;

    .prologue
    .line 3994
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 3995
    :try_start_0
    invoke-interface {p1}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v1

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 3996
    .local v0, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v0, :cond_0

    .line 3997
    const/4 v1, -0x1

    monitor-exit v2

    return v1

    .line 4000
    :cond_0
    :try_start_1
    iget v1, v0, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    return v1

    .line 3994
    .end local v0    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getBaseDisplayDensity(I)I
    .locals 3
    .param p1, "displayId"    # I

    .prologue
    .line 9276
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 9277
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9278
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/DisplayContent;->hasAccess(I)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 9279
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mBaseDisplayDensity:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    return v1

    :cond_0
    monitor-exit v2

    .line 9282
    const/4 v1, -0x1

    return v1

    .line 9276
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getBaseDisplaySize(ILandroid/graphics/Point;)V
    .locals 3
    .param p1, "displayId"    # I
    .param p2, "size"    # Landroid/graphics/Point;

    .prologue
    .line 9109
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 9110
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9111
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/DisplayContent;->hasAccess(I)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 9112
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    iput v1, p2, Landroid/graphics/Point;->x:I

    .line 9113
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    iput v1, p2, Landroid/graphics/Point;->y:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 9108
    return-void

    .line 9109
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getBoundsForNewConfiguration(I)Landroid/graphics/Rect;
    .locals 4
    .param p1, "stackId"    # I

    .prologue
    .line 3924
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 3925
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v2, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;

    .line 3926
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    new-instance v0, Landroid/graphics/Rect;

    invoke-direct {v0}, Landroid/graphics/Rect;-><init>()V

    .line 3927
    .local v0, "outBounds":Landroid/graphics/Rect;
    invoke-virtual {v1, v0}, Lcom/android/server/wm/TaskStack;->getBoundsForNewConfiguration(Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v3

    .line 3928
    return-object v0

    .line 3924
    .end local v0    # "outBounds":Landroid/graphics/Rect;
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method public getCameraLensCoverState()I
    .locals 6

    .prologue
    const/4 v5, -0x1

    const/4 v4, 0x0

    .line 5834
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/16 v2, -0x100

    .line 5835
    const/16 v3, 0x9

    .line 5834
    invoke-virtual {v1, v5, v2, v3}, Lcom/android/server/input/InputManagerService;->getSwitchState(III)I

    move-result v0

    .line 5836
    .local v0, "sw":I
    if-lez v0, :cond_0

    .line 5838
    const/4 v1, 0x1

    return v1

    .line 5839
    :cond_0
    if-nez v0, :cond_1

    .line 5841
    return v4

    .line 5844
    :cond_1
    return v5
.end method

.method public getCurrentAnimatorScale()F
    .locals 2

    .prologue
    .line 5784
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5785
    :try_start_0
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v0, :cond_0

    const/4 v0, 0x0

    :goto_0
    monitor-exit v1

    return v0

    :cond_0
    :try_start_1
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto :goto_0

    .line 5784
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;
    .locals 1

    .prologue
    .line 11155
    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    return-object v0
.end method

.method public getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;
    .locals 1

    .prologue
    .line 11163
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v0

    return-object v0
.end method

.method public getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;
    .locals 1

    .prologue
    .line 11159
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v0

    return-object v0
.end method

.method public getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;
    .locals 3
    .param p1, "displayId"    # I

    .prologue
    .line 11143
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v2, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/DisplayContent;

    .line 11144
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v1, :cond_0

    .line 11145
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManager:Landroid/hardware/display/DisplayManager;

    invoke-virtual {v2, p1}, Landroid/hardware/display/DisplayManager;->getDisplay(I)Landroid/view/Display;

    move-result-object v0

    .line 11146
    .local v0, "display":Landroid/view/Display;
    if-eqz v0, :cond_0

    .line 11147
    invoke-direct {p0, v0}, Lcom/android/server/wm/WindowManagerService;->newDisplayContentLocked(Landroid/view/Display;)Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    .line 11150
    .end local v0    # "display":Landroid/view/Display;
    :cond_0
    return-object v1
.end method

.method public getDockedDividerInsetsLw()I
    .locals 1

    .prologue
    .line 10570
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DockedStackDividerController;->getContentInsets()I

    move-result v0

    return v0
.end method

.method public getDockedStackSide()I
    .locals 3

    .prologue
    .line 11325
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11326
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    invoke-virtual {v1}, Lcom/android/server/wm/DisplayContent;->getDockedStackVisibleForUserLocked()Lcom/android/server/wm/TaskStack;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 11328
    .local v0, "dockedStack":Lcom/android/server/wm/TaskStack;
    if-nez v0, :cond_0

    const/4 v1, -0x1

    :goto_0
    monitor-exit v2

    return v1

    :cond_0
    :try_start_1
    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->getDockSide()I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v1

    goto :goto_0

    .line 11325
    .end local v0    # "dockedStack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method getDragLayerLocked()I
    .locals 2

    .prologue
    .line 575
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const/16 v1, 0x7e0

    invoke-interface {v0, v1}, Landroid/view/WindowManagerPolicy;->windowTypeToLayerLw(I)I

    move-result v0

    mul-int/lit16 v0, v0, 0x2710

    add-int/lit16 v0, v0, 0x3e8

    return v0
.end method

.method getImeFocusStackLocked()Lcom/android/server/wm/TaskStack;
    .locals 2

    .prologue
    const/4 v0, 0x0

    .line 8125
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-eqz v1, :cond_0

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    iget-object v1, v1, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    if-eqz v1, :cond_0

    .line 8126
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    iget-object v0, v0, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    iget-object v0, v0, Lcom/android/server/wm/Task;->mStack:Lcom/android/server/wm/TaskStack;

    .line 8125
    :cond_0
    return-object v0
.end method

.method public getInitialDisplayDensity(I)I
    .locals 3
    .param p1, "displayId"    # I

    .prologue
    .line 9265
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 9266
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9267
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/DisplayContent;->hasAccess(I)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 9268
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayDensity:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    return v1

    :cond_0
    monitor-exit v2

    .line 9271
    const/4 v1, -0x1

    return v1

    .line 9265
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getInitialDisplaySize(ILandroid/graphics/Point;)V
    .locals 3
    .param p1, "displayId"    # I
    .param p2, "size"    # Landroid/graphics/Point;

    .prologue
    .line 9098
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 9099
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9100
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/DisplayContent;->hasAccess(I)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 9101
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayWidth:I

    iput v1, p2, Landroid/graphics/Point;->x:I

    .line 9102
    iget v1, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayHeight:I

    iput v1, p2, Landroid/graphics/Point;->y:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 9097
    return-void

    .line 9098
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getInputMonitor()Lcom/android/server/wm/InputMonitor;
    .locals 1

    .prologue
    .line 1083
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    return-object v0
.end method

.method public getLidState()I
    .locals 5

    .prologue
    const/4 v4, -0x1

    const/4 v3, 0x0

    .line 5811
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    const/16 v2, -0x100

    invoke-virtual {v1, v4, v2, v3}, Lcom/android/server/input/InputManagerService;->getSwitchState(III)I

    move-result v0

    .line 5813
    .local v0, "sw":I
    if-lez v0, :cond_0

    .line 5815
    return v3

    .line 5816
    :cond_0
    if-nez v0, :cond_1

    .line 5818
    const/4 v1, 0x1

    return v1

    .line 5821
    :cond_1
    return v4
.end method

.method public getOrientationLocked()I
    .locals 9

    .prologue
    const/4 v8, 0x3

    const/4 v7, -0x1

    const/4 v0, 0x0

    .line 3629
    iget-boolean v6, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-eqz v6, :cond_1

    .line 3630
    iget v6, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    if-eq v6, v7, :cond_0

    .line 3638
    iget v6, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    return v6

    .line 3639
    :cond_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v6}, Landroid/view/WindowManagerPolicy;->isKeyguardLocked()Z

    move-result v6

    if-eqz v6, :cond_a

    .line 3648
    iget v6, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    return v6

    .line 3652
    :cond_1
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v5

    .line 3653
    .local v5, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v5}, Lcom/android/server/wm/WindowList;->size()I

    move-result v6

    add-int/lit8 v1, v6, -0x1

    .local v1, "pos":I
    :goto_0
    if-ltz v1, :cond_2

    .line 3654
    invoke-virtual {v5, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 3655
    .local v3, "win":Lcom/android/server/wm/WindowState;
    iget-object v6, v3, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v6, :cond_4

    .line 3674
    .end local v3    # "win":Lcom/android/server/wm/WindowState;
    :cond_2
    iput v7, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    .line 3676
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v6}, Landroid/view/WindowManagerPolicy;->isKeyguardLocked()Z

    move-result v6

    if-eqz v6, :cond_a

    .line 3680
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v6}, Landroid/view/WindowManagerPolicy;->getWinShowWhenLockedLw()Landroid/view/WindowManagerPolicy$WindowState;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 3681
    .local v4, "winShowWhenLocked":Lcom/android/server/wm/WindowState;
    if-nez v4, :cond_8

    .line 3683
    .local v0, "appShowWhenLocked":Lcom/android/server/wm/AppWindowToken;
    :goto_1
    if-eqz v0, :cond_9

    .line 3684
    iget v2, v0, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I

    .line 3685
    .local v2, "req":I
    if-ne v2, v8, :cond_3

    .line 3686
    iget v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastKeyguardForcedOrientation:I

    .line 3690
    :cond_3
    return v2

    .line 3660
    .end local v0    # "appShowWhenLocked":Lcom/android/server/wm/AppWindowToken;
    .end local v2    # "req":I
    .end local v4    # "winShowWhenLocked":Lcom/android/server/wm/WindowState;
    .restart local v3    # "win":Lcom/android/server/wm/WindowState;
    :cond_4
    invoke-virtual {v3}, Lcom/android/server/wm/WindowState;->isVisibleLw()Z

    move-result v6

    if-eqz v6, :cond_5

    iget-boolean v6, v3, Lcom/android/server/wm/WindowState;->mPolicyVisibilityAfterAnim:Z

    if-eqz v6, :cond_5

    .line 3663
    iget-object v6, v3, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v2, v6, Landroid/view/WindowManager$LayoutParams;->screenOrientation:I

    .line 3664
    .restart local v2    # "req":I
    if-eq v2, v7, :cond_5

    if-ne v2, v8, :cond_6

    .line 3653
    .end local v2    # "req":I
    :cond_5
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .line 3669
    .restart local v2    # "req":I
    :cond_6
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget-object v7, v3, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-interface {v6, v7}, Landroid/view/WindowManagerPolicy;->isKeyguardHostWindow(Landroid/view/WindowManager$LayoutParams;)Z

    move-result v6

    if-eqz v6, :cond_7

    .line 3670
    iput v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastKeyguardForcedOrientation:I

    .line 3672
    :cond_7
    iput v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastWindowForcedOrientation:I

    return v2

    .line 3682
    .end local v2    # "req":I
    .end local v3    # "win":Lcom/android/server/wm/WindowState;
    .restart local v4    # "winShowWhenLocked":Lcom/android/server/wm/WindowState;
    :cond_8
    iget-object v0, v4, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    goto :goto_1

    .line 3694
    .restart local v0    # "appShowWhenLocked":Lcom/android/server/wm/AppWindowToken;
    :cond_9
    iget v6, p0, Lcom/android/server/wm/WindowManagerService;->mLastKeyguardForcedOrientation:I

    return v6

    .line 3699
    .end local v0    # "appShowWhenLocked":Lcom/android/server/wm/AppWindowToken;
    .end local v1    # "pos":I
    .end local v4    # "winShowWhenLocked":Lcom/android/server/wm/WindowState;
    .end local v5    # "windows":Lcom/android/server/wm/WindowList;
    :cond_a
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getAppSpecifiedOrientation()I

    move-result v6

    return v6
.end method

.method public getPendingAppTransition()I
    .locals 1

    .prologue
    .line 4083
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->getAppTransition()I

    move-result v0

    return v0
.end method

.method public getPreferredOptionsPanelGravity()I
    .locals 8

    .prologue
    const v7, 0x800053

    const/16 v6, 0x55

    const/16 v5, 0x51

    .line 7133
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 7134
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getRotation()I

    move-result v1

    .line 7137
    .local v1, "rotation":I
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 7138
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    iget v2, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayWidth:I

    iget v4, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayHeight:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-ge v2, v4, :cond_0

    .line 7140
    packed-switch v1, :pswitch_data_0

    :pswitch_0
    monitor-exit v3

    .line 7143
    return v5

    :pswitch_1
    monitor-exit v3

    .line 7145
    return v6

    :pswitch_2
    monitor-exit v3

    .line 7147
    return v5

    :pswitch_3
    monitor-exit v3

    .line 7149
    return v7

    .line 7154
    :cond_0
    packed-switch v1, :pswitch_data_1

    :pswitch_4
    monitor-exit v3

    .line 7157
    return v6

    :pswitch_5
    monitor-exit v3

    .line 7159
    return v5

    :pswitch_6
    monitor-exit v3

    .line 7161
    return v7

    :pswitch_7
    monitor-exit v3

    .line 7163
    return v5

    .line 7133
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "rotation":I
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2

    .line 7140
    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_2
        :pswitch_3
    .end packed-switch

    .line 7154
    :pswitch_data_1
    .packed-switch 0x0
        :pswitch_4
        :pswitch_5
        :pswitch_6
        :pswitch_7
    .end packed-switch
.end method

.method public getRotation()I
    .locals 1

    .prologue
    .line 7055
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    return v0
.end method

.method public getSingleHandMode()I
    .locals 1

    .prologue
    .line 11870
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandMode:I

    return v0
.end method

.method public getSmallestWidthForTaskBounds(Landroid/graphics/Rect;)I
    .locals 2
    .param p1, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 11479
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 11480
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v0

    invoke-virtual {v0, p1}, Lcom/android/server/wm/DockedStackDividerController;->getSmallestWidthDpForBounds(Landroid/graphics/Rect;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v0

    monitor-exit v1

    return v0

    .line 11479
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public getStableInsets(Landroid/graphics/Rect;)V
    .locals 2
    .param p1, "outInsets"    # Landroid/graphics/Rect;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Landroid/os/RemoteException;
        }
    .end annotation

    .prologue
    .line 11419
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11420
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getStableInsetsLocked(Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 11418
    return-void

    .line 11419
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method getStableInsetsLocked(Landroid/graphics/Rect;)V
    .locals 5
    .param p1, "outInsets"    # Landroid/graphics/Rect;

    .prologue
    .line 11425
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v0

    .line 11426
    .local v0, "di":Landroid/view/DisplayInfo;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v2, v0, Landroid/view/DisplayInfo;->rotation:I

    iget v3, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v4, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    invoke-interface {v1, v2, v3, v4, p1}, Landroid/view/WindowManagerPolicy;->getStableInsetsLw(IIILandroid/graphics/Rect;)V

    .line 11424
    return-void
.end method

.method public getStackBounds(ILandroid/graphics/Rect;)V
    .locals 3
    .param p1, "stackId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 5334
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5335
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/TaskStack;

    .line 5336
    .local v0, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v0, :cond_0

    .line 5337
    invoke-virtual {v0, p2}, Lcom/android/server/wm/TaskStack;->getBounds(Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 5338
    return-void

    .line 5340
    :cond_0
    :try_start_1
    invoke-virtual {p2}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5333
    return-void

    .line 5334
    .end local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getStackDockedModeBounds(ILandroid/graphics/Rect;Z)V
    .locals 3
    .param p1, "stackId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;
    .param p3, "ignoreVisibility"    # Z

    .prologue
    .line 5322
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5323
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/TaskStack;

    .line 5324
    .local v0, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v0, :cond_0

    .line 5325
    invoke-virtual {v0, p2, p3}, Lcom/android/server/wm/TaskStack;->getStackDockedModeBoundsLocked(Landroid/graphics/Rect;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 5326
    return-void

    .line 5328
    :cond_0
    :try_start_1
    invoke-virtual {p2}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5321
    return-void

    .line 5322
    .end local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getTaskBounds(ILandroid/graphics/Rect;)V
    .locals 3
    .param p1, "taskId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 5484
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5485
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5486
    .local v0, "task":Lcom/android/server/wm/Task;
    if-eqz v0, :cond_0

    .line 5487
    invoke-virtual {v0, p2}, Lcom/android/server/wm/Task;->getBounds(Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 5488
    return-void

    .line 5490
    :cond_0
    :try_start_1
    invoke-virtual {p2}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5483
    return-void

    .line 5484
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getTransitionAnimationScaleLocked()F
    .locals 1

    .prologue
    .line 5763
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z

    if-eqz v0, :cond_0

    const/4 v0, 0x0

    :goto_0
    return v0

    :cond_0
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    goto :goto_0
.end method

.method public getWindowAnimationScaleLocked()F
    .locals 1

    .prologue
    .line 5759
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationsDisabled:Z

    if-eqz v0, :cond_0

    const/4 v0, 0x0

    :goto_0
    return v0

    :cond_0
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    goto :goto_0
.end method

.method public getWindowContentFrameStats(Landroid/os/IBinder;)Landroid/view/WindowContentFrameStats;
    .locals 6
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    const/4 v5, 0x0

    .line 10517
    const-string/jumbo v3, "android.permission.FRAME_STATS"

    .line 10518
    const-string/jumbo v4, "getWindowContentFrameStats()"

    .line 10517
    invoke-direct {p0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v3

    if-nez v3, :cond_0

    .line 10519
    new-instance v3, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Requires FRAME_STATS permission"

    invoke-direct {v3, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v3

    .line 10521
    :cond_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 10522
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v3, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 10523
    .local v2, "windowState":Lcom/android/server/wm/WindowState;
    if-nez v2, :cond_1

    monitor-exit v4

    .line 10524
    return-object v5

    .line 10526
    :cond_1
    :try_start_1
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget-object v1, v3, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 10527
    .local v1, "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    if-nez v1, :cond_2

    monitor-exit v4

    .line 10528
    return-object v5

    .line 10530
    :cond_2
    :try_start_2
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTempWindowRenderStats:Landroid/view/WindowContentFrameStats;

    if-nez v3, :cond_3

    .line 10531
    new-instance v3, Landroid/view/WindowContentFrameStats;

    invoke-direct {v3}, Landroid/view/WindowContentFrameStats;-><init>()V

    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTempWindowRenderStats:Landroid/view/WindowContentFrameStats;

    .line 10533
    :cond_3
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTempWindowRenderStats:Landroid/view/WindowContentFrameStats;

    .line 10534
    .local v0, "stats":Landroid/view/WindowContentFrameStats;
    invoke-virtual {v1, v0}, Lcom/android/server/wm/WindowSurfaceController;->getWindowContentFrameStats(Landroid/view/WindowContentFrameStats;)Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    move-result v3

    if-nez v3, :cond_4

    monitor-exit v4

    .line 10535
    return-object v5

    :cond_4
    monitor-exit v4

    .line 10537
    return-object v0

    .line 10521
    .end local v0    # "stats":Landroid/view/WindowContentFrameStats;
    .end local v1    # "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    .end local v2    # "windowState":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public getWindowDisplayFrame(Lcom/android/server/wm/Session;Landroid/view/IWindow;Landroid/graphics/Rect;)V
    .locals 3
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "outDisplayFrame"    # Landroid/graphics/Rect;

    .prologue
    .line 2756
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 2757
    const/4 v1, 0x0

    :try_start_0
    invoke-virtual {p0, p1, p2, v1}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v0

    .line 2758
    .local v0, "win":Lcom/android/server/wm/WindowState;
    if-nez v0, :cond_0

    .line 2759
    invoke-virtual {p3}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 2760
    return-void

    .line 2762
    :cond_0
    :try_start_1
    iget-object v1, v0, Lcom/android/server/wm/WindowState;->mDisplayFrame:Landroid/graphics/Rect;

    invoke-virtual {p3, v1}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 2755
    return-void

    .line 2756
    .end local v0    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getWindowId(Landroid/os/IBinder;)Landroid/view/IWindowId;
    .locals 4
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    const/4 v1, 0x0

    .line 2779
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 2780
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v3, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowState;

    .line 2781
    .local v0, "window":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_0

    iget-object v1, v0, Lcom/android/server/wm/WindowState;->mWindowId:Landroid/view/IWindowId;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    return-object v1

    .line 2779
    .end local v0    # "window":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public getWindowListLocked(I)Lcom/android/server/wm/WindowList;
    .locals 2
    .param p1, "displayId"    # I

    .prologue
    const/4 v1, 0x0

    .line 11181
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 11182
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v1

    :cond_0
    return-object v1
.end method

.method public getWindowListLocked(Landroid/view/Display;)Lcom/android/server/wm/WindowList;
    .locals 1
    .param p1, "display"    # Landroid/view/Display;

    .prologue
    .line 11172
    invoke-virtual {p1}, Landroid/view/Display;->getDisplayId()I

    move-result v0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->getWindowListLocked(I)Lcom/android/server/wm/WindowList;

    move-result-object v0

    return-object v0
.end method

.method public getWindowManagerLock()Ljava/lang/Object;
    .locals 1

    .prologue
    .line 11237
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    return-object v0
.end method

.method handleAnimatingStoppedAndTransitionLocked()I
    .locals 12

    .prologue
    const/4 v11, 0x1

    const/4 v10, 0x0

    .line 9615
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v9}, Lcom/android/server/wm/AppTransition;->setIdle()V

    .line 9617
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mNoAnimationNotifyOnTransitionFinished:Ljava/util/List;

    invoke-interface {v9}, Ljava/util/List;->size()I

    move-result v9

    add-int/lit8 v1, v9, -0x1

    .local v1, "i":I
    :goto_0
    if-ltz v1, :cond_0

    .line 9618
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mNoAnimationNotifyOnTransitionFinished:Ljava/util/List;

    invoke-interface {v9, v1}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Landroid/os/IBinder;

    .line 9619
    .local v6, "token":Landroid/os/IBinder;
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v9, v6}, Lcom/android/server/wm/AppTransition;->notifyAppTransitionFinishedLocked(Landroid/os/IBinder;)V

    .line 9617
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .line 9621
    .end local v6    # "token":Landroid/os/IBinder;
    :cond_0
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mNoAnimationNotifyOnTransitionFinished:Ljava/util/List;

    invoke-interface {v9}, Ljava/util/List;->clear()V

    .line 9623
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v9}, Lcom/android/server/wm/WallpaperController;->hideDeferredWallpapersIfNeeded()V

    .line 9626
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v9

    invoke-virtual {v9}, Lcom/android/server/wm/DisplayContent;->getStacks()Ljava/util/ArrayList;

    move-result-object v3

    .line 9627
    .local v3, "stacks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/TaskStack;>;"
    invoke-virtual {v3}, Ljava/util/ArrayList;->size()I

    move-result v9

    add-int/lit8 v2, v9, -0x1

    .local v2, "stackNdx":I
    :goto_1
    if-ltz v2, :cond_3

    .line 9628
    invoke-virtual {v3, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/TaskStack;

    invoke-virtual {v9}, Lcom/android/server/wm/TaskStack;->getTasks()Ljava/util/ArrayList;

    move-result-object v5

    .line 9629
    .local v5, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    invoke-virtual {v5}, Ljava/util/ArrayList;->size()I

    move-result v9

    add-int/lit8 v4, v9, -0x1

    .local v4, "taskNdx":I
    :goto_2
    if-ltz v4, :cond_2

    .line 9630
    invoke-virtual {v5, v4}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/Task;

    iget-object v8, v9, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 9631
    .local v8, "tokens":Lcom/android/server/wm/AppTokenList;
    invoke-virtual {v8}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v9

    add-int/lit8 v7, v9, -0x1

    .local v7, "tokenNdx":I
    :goto_3
    if-ltz v7, :cond_1

    .line 9632
    invoke-virtual {v8, v7}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/AppWindowToken;

    iput-boolean v10, v9, Lcom/android/server/wm/AppWindowToken;->sendingToBottom:Z

    .line 9631
    add-int/lit8 v7, v7, -0x1

    goto :goto_3

    .line 9629
    :cond_1
    add-int/lit8 v4, v4, -0x1

    goto :goto_2

    .line 9627
    .end local v7    # "tokenNdx":I
    .end local v8    # "tokens":Lcom/android/server/wm/AppTokenList;
    :cond_2
    add-int/lit8 v2, v2, -0x1

    goto :goto_1

    .line 9636
    .end local v4    # "taskNdx":I
    .end local v5    # "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    :cond_3
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->rebuildAppWindowListLocked()V

    .line 9638
    const/4 v0, 0x1

    .line 9641
    .local v0, "changes":I
    invoke-virtual {p0, v11}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodWindowsIfNeededLocked(Z)Z

    .line 9642
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iput-boolean v11, v9, Lcom/android/server/wm/WindowSurfacePlacer;->mWallpaperMayChange:Z

    .line 9646
    iput-boolean v11, p0, Lcom/android/server/wm/WindowManagerService;->mFocusMayChange:Z

    .line 9648
    return v0
.end method

.method public handleDisplayAdded(I)V
    .locals 3
    .param p1, "displayId"    # I

    .prologue
    .line 11190
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11191
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManager:Landroid/hardware/display/DisplayManager;

    invoke-virtual {v1, p1}, Landroid/hardware/display/DisplayManager;->getDisplay(I)Landroid/view/Display;

    move-result-object v0

    .line 11192
    .local v0, "display":Landroid/view/Display;
    if-eqz v0, :cond_0

    .line 11193
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->createDisplayContentLocked(Landroid/view/Display;)V

    .line 11194
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->displayReady(I)V

    .line 11196
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11189
    return-void

    .line 11190
    .end local v0    # "display":Landroid/view/Display;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method hasDockedTasksForUser(I)Z
    .locals 8
    .param p1, "userId"    # I

    .prologue
    const/4 v7, 0x0

    .line 5923
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    const/4 v6, 0x3

    invoke-virtual {v5, v6}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/TaskStack;

    .line 5924
    .local v2, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v2, :cond_0

    .line 5925
    return v7

    .line 5928
    :cond_0
    invoke-virtual {v2}, Lcom/android/server/wm/TaskStack;->getTasks()Ljava/util/ArrayList;

    move-result-object v4

    .line 5929
    .local v4, "tasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    const/4 v0, 0x0

    .line 5930
    .local v0, "hasUserTask":Z
    invoke-virtual {v4}, Ljava/util/ArrayList;->size()I

    move-result v5

    add-int/lit8 v1, v5, -0x1

    .local v1, "i":I
    :goto_0
    if-ltz v1, :cond_1

    if-eqz v0, :cond_2

    .line 5934
    :cond_1
    return v0

    .line 5931
    :cond_2
    invoke-virtual {v4, v1}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/Task;

    .line 5932
    .local v3, "task":Lcom/android/server/wm/Task;
    iget v5, v3, Lcom/android/server/wm/Task;->mUserId:I

    if-ne v5, p1, :cond_3

    const/4 v0, 0x1

    .line 5930
    :goto_1
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .line 5932
    :cond_3
    const/4 v0, 0x0

    goto :goto_1
.end method

.method public hasNavigationBar()Z
    .locals 1

    .prologue
    .line 10474
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->hasNavigationBar()Z

    move-result v0

    return v0
.end method

.method public hideBootMessagesLocked()V
    .locals 1

    .prologue
    .line 6191
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    if-eqz v0, :cond_0

    .line 6192
    const/4 v0, 0x0

    iput-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    .line 6193
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->hideBootMessages()V

    .line 6182
    :cond_0
    return-void
.end method

.method public inKeyguardRestrictedInputMode()Z
    .locals 1

    .prologue
    .line 5618
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->inKeyguardRestrictedKeyInputMode()Z

    move-result v0

    return v0
.end method

.method public inputMethodClientHasFocus(Lcom/android/internal/view/IInputMethodClient;)Z
    .locals 10
    .param p1, "client"    # Lcom/android/internal/view/IInputMethodClient;

    .prologue
    const/4 v9, 0x1

    const/4 v8, 0x0

    .line 9037
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v5

    .line 9040
    const/4 v4, 0x0

    :try_start_0
    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->findDesiredInputMethodWindowIndexLocked(Z)I

    move-result v1

    .line 9041
    .local v1, "idx":I
    if-lez v1, :cond_2

    .line 9043
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v4

    add-int/lit8 v6, v1, -0x1

    invoke-virtual {v4, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 9049
    .local v2, "imFocus":Lcom/android/server/wm/WindowState;
    if-eqz v2, :cond_2

    .line 9052
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v6, 0x3

    if-ne v4, v6, :cond_0

    .line 9053
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_0

    .line 9056
    const/4 v0, 0x0

    .local v0, "i":I
    :goto_0
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v4, v4, Lcom/android/server/wm/AppWindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v4

    if-ge v0, v4, :cond_0

    .line 9057
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v4, v4, Lcom/android/server/wm/AppWindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 9058
    .local v3, "w":Lcom/android/server/wm/WindowState;
    if-eq v3, v2, :cond_1

    .line 9059
    const-string/jumbo v4, "WindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v7, "Switching to real app window: "

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v4, v6}, Landroid/util/Log;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9060
    move-object v2, v3

    .line 9073
    .end local v0    # "i":I
    .end local v3    # "w":Lcom/android/server/wm/WindowState;
    :cond_0
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    iget-object v4, v4, Lcom/android/server/wm/Session;->mClient:Lcom/android/internal/view/IInputMethodClient;

    if-eqz v4, :cond_2

    .line 9074
    iget-object v4, v2, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    iget-object v4, v4, Lcom/android/server/wm/Session;->mClient:Lcom/android/internal/view/IInputMethodClient;

    invoke-interface {v4}, Lcom/android/internal/view/IInputMethodClient;->asBinder()Landroid/os/IBinder;

    move-result-object v4

    invoke-interface {p1}, Lcom/android/internal/view/IInputMethodClient;->asBinder()Landroid/os/IBinder;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v6

    if-ne v4, v6, :cond_2

    monitor-exit v5

    .line 9075
    return v9

    .line 9056
    .restart local v0    # "i":I
    .restart local v3    # "w":Lcom/android/server/wm/WindowState;
    :cond_1
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .line 9088
    .end local v0    # "i":I
    .end local v2    # "imFocus":Lcom/android/server/wm/WindowState;
    .end local v3    # "w":Lcom/android/server/wm/WindowState;
    :cond_2
    :try_start_1
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eqz v4, :cond_3

    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    iget-object v4, v4, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    iget-object v4, v4, Lcom/android/server/wm/Session;->mClient:Lcom/android/internal/view/IInputMethodClient;

    if-eqz v4, :cond_3

    .line 9089
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    iget-object v4, v4, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    iget-object v4, v4, Lcom/android/server/wm/Session;->mClient:Lcom/android/internal/view/IInputMethodClient;

    invoke-interface {v4}, Lcom/android/internal/view/IInputMethodClient;->asBinder()Landroid/os/IBinder;

    move-result-object v4

    invoke-interface {p1}, Lcom/android/internal/view/IInputMethodClient;->asBinder()Landroid/os/IBinder;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result-object v6

    if-ne v4, v6, :cond_3

    monitor-exit v5

    .line 9090
    return v9

    :cond_3
    monitor-exit v5

    .line 9093
    return v8

    .line 9037
    .end local v1    # "idx":I
    :catchall_0
    move-exception v4

    monitor-exit v5

    throw v4
.end method

.method isCurrentProfileLocked(I)Z
    .locals 3
    .param p1, "userId"    # I

    .prologue
    const/4 v2, 0x1

    .line 5939
    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    if-ne p1, v1, :cond_0

    return v2

    .line 5940
    :cond_0
    const/4 v0, 0x0

    .local v0, "i":I
    :goto_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentProfileIds:[I

    array-length v1, v1

    if-ge v0, v1, :cond_2

    .line 5941
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentProfileIds:[I

    aget v1, v1, v0

    if-ne v1, p1, :cond_1

    return v2

    .line 5940
    :cond_1
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .line 5943
    :cond_2
    const/4 v1, 0x0

    return v1
.end method

.method public isKeyguardLocked()Z
    .locals 1

    .prologue
    .line 5623
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->isKeyguardLocked()Z

    move-result v0

    return v0
.end method

.method public isKeyguardSecure()Z
    .locals 4

    .prologue
    .line 5628
    invoke-static {}, Landroid/os/UserHandle;->getCallingUserId()I

    move-result v2

    .line 5629
    .local v2, "userId":I
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 5631
    .local v0, "origId":J
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v3, v2}, Landroid/view/WindowManagerPolicy;->isKeyguardSecure(I)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    .line 5633
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5631
    return v3

    .line 5632
    :catchall_0
    move-exception v3

    .line 5633
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5632
    throw v3
.end method

.method public isRotationFrozen()Z
    .locals 2

    .prologue
    const/4 v0, 0x1

    .line 7060
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy;->getUserRotationMode()I

    move-result v1

    if-ne v1, v0, :cond_0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public isSafeModeEnabled()Z
    .locals 1

    .prologue
    .line 10493
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mSafeMode:Z

    return v0
.end method

.method isScreenCaptureDisabledLocked(I)Z
    .locals 2
    .param p1, "userId"    # I

    .prologue
    .line 2344
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mScreenCaptureDisabled:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/lang/Boolean;

    .line 2345
    .local v0, "disabled":Ljava/lang/Boolean;
    if-nez v0, :cond_0

    .line 2346
    const/4 v1, 0x0

    return v1

    .line 2348
    :cond_0
    invoke-virtual {v0}, Ljava/lang/Boolean;->booleanValue()Z

    move-result v1

    return v1
.end method

.method isSecureLocked(Lcom/android/server/wm/WindowState;)Z
    .locals 3
    .param p1, "w"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v2, 0x1

    const/4 v1, 0x0

    .line 2352
    iget-object v0, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    and-int/lit16 v0, v0, 0x2000

    if-eqz v0, :cond_0

    .line 2353
    return v2

    .line 2355
    :cond_0
    iget v0, p1, Lcom/android/server/wm/WindowState;->mOwnerUid:I

    invoke-static {v0}, Landroid/os/UserHandle;->getUserId(I)I

    move-result v0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->isScreenCaptureDisabledLocked(I)Z

    move-result v0

    if-eqz v0, :cond_1

    .line 2356
    return v2

    .line 2358
    :cond_1
    return v1
.end method

.method isStackVisibleLocked(I)Z
    .locals 2
    .param p1, "stackId"    # I

    .prologue
    .line 5152
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/TaskStack;

    .line 5153
    .local v0, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->isVisibleLocked()Z

    move-result v1

    :goto_0
    return v1

    :cond_0
    const/4 v1, 0x0

    goto :goto_0
.end method

.method public isValidTaskId(I)Z
    .locals 2
    .param p1, "taskId"    # I

    .prologue
    .line 5496
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5497
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v0, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    if-eqz v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    monitor-exit v1

    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0

    .line 5496
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public isViewServerRunning()Z
    .locals 3

    .prologue
    const/4 v0, 0x0

    .line 7250
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 7251
    return v0

    .line 7254
    :cond_0
    const-string/jumbo v1, "android.permission.DUMP"

    const-string/jumbo v2, "isViewServerRunning"

    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_1

    .line 7255
    return v0

    .line 7258
    :cond_1
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    if-eqz v1, :cond_2

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    invoke-virtual {v0}, Lcom/android/server/wm/ViewServer;->isRunning()Z

    move-result v0

    :cond_2
    return v0
.end method

.method public keyguardGoingAway(I)V
    .locals 3
    .param p1, "flags"    # I

    .prologue
    .line 5650
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.DISABLE_KEYGUARD"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 5652
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires DISABLE_KEYGUARD permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5656
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5657
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v2, 0x1

    iput-boolean v2, v0, Lcom/android/server/wm/WindowAnimator;->mKeyguardGoingAway:Z

    .line 5658
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    iput p1, v0, Lcom/android/server/wm/WindowAnimator;->mKeyguardGoingAwayFlags:I

    .line 5659
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 5649
    return-void

    .line 5656
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public keyguardWaitingForActivityDrawn()V
    .locals 2

    .prologue
    .line 5665
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 5666
    const/4 v1, 0x1

    :try_start_0
    iput-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardWaitingForActivityDrawn:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 5663
    return-void

    .line 5665
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method public lockDeviceNow()V
    .locals 1

    .prologue
    .line 5828
    const/4 v0, 0x0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->lockNow(Landroid/os/Bundle;)V

    .line 5827
    return-void
.end method

.method public lockNow(Landroid/os/Bundle;)V
    .locals 1
    .param p1, "options"    # Landroid/os/Bundle;

    .prologue
    .line 10484
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->lockNow(Landroid/os/Bundle;)V

    .line 10483
    return-void
.end method

.method logWindowList(Lcom/android/server/wm/WindowList;Ljava/lang/String;)V
    .locals 4
    .param p1, "windows"    # Lcom/android/server/wm/WindowList;
    .param p2, "prefix"    # Ljava/lang/String;

    .prologue
    .line 1705
    invoke-virtual {p1}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 1706
    .local v0, "N":I
    :goto_0
    if-lez v0, :cond_0

    .line 1707
    add-int/lit8 v0, v0, -0x1

    .line 1708
    const-string/jumbo v1, "WindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string/jumbo v3, "#"

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string/jumbo v3, ": "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {p1, v0}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v1, v2}, Landroid/util/Slog;->v(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 1704
    :cond_0
    return-void
.end method

.method makeWindowFreezingScreenIfNeededLocked(Lcom/android/server/wm/WindowState;)V
    .locals 5
    .param p1, "w"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/16 v4, 0xb

    const/4 v3, 0x1

    const/4 v2, 0x0

    .line 9593
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z

    move-result v0

    if-nez v0, :cond_0

    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    const/4 v1, 0x2

    if-eq v0, v1, :cond_0

    .line 9595
    iput-boolean v3, p1, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    .line 9596
    iput v2, p1, Lcom/android/server/wm/WindowState;->mLastFreezeDuration:I

    .line 9597
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iput-boolean v2, v0, Lcom/android/server/wm/WindowSurfacePlacer;->mOrientationChangeComplete:Z

    .line 9598
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    if-nez v0, :cond_0

    .line 9599
    iput v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    .line 9602
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v0, v4}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 9603
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    .line 9604
    const-wide/16 v2, 0x7d0

    .line 9603
    invoke-virtual {v0, v4, v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 9589
    :cond_0
    return-void
.end method

.method markForSeamlessRotation(Lcom/android/server/wm/WindowState;Z)V
    .locals 2
    .param p1, "w"    # Lcom/android/server/wm/WindowState;
    .param p2, "seamlesslyRotated"    # Z

    .prologue
    const/4 v1, 0x0

    .line 11583
    iget-boolean v0, p1, Lcom/android/server/wm/WindowState;->mSeamlesslyRotated:Z

    if-ne p2, v0, :cond_0

    .line 11584
    return-void

    .line 11586
    :cond_0
    iput-boolean p2, p1, Lcom/android/server/wm/WindowState;->mSeamlesslyRotated:Z

    .line 11587
    if-eqz p2, :cond_2

    .line 11588
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    add-int/lit8 v0, v0, 0x1

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    .line 11592
    :goto_0
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    if-nez v0, :cond_1

    .line 11596
    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked(Z)Z

    move-result v0

    if-eqz v0, :cond_1

    .line 11597
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v1, 0x12

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 11582
    :cond_1
    return-void

    .line 11590
    :cond_2
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    add-int/lit8 v0, v0, -0x1

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    goto :goto_0
.end method

.method public monitor()V
    .locals 1

    .prologue
    .line 11100
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    monitor-exit v0

    .line 11099
    return-void
.end method

.method moveInputMethodDialogsLocked(I)V
    .locals 9
    .param p1, "pos"    # I

    .prologue
    const/4 v8, 0x0

    .line 1713
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    .line 1716
    .local v1, "dialogs":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/WindowState;>;"
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v5

    .line 1717
    .local v5, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v1}, Ljava/util/ArrayList;->size()I

    move-result v0

    .line 1719
    .local v0, "N":I
    const/4 v2, 0x0

    .local v2, "i":I
    :goto_0
    if-ge v2, v0, :cond_0

    .line 1720
    invoke-virtual {v1, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowState;

    invoke-direct {p0, p1, v7}, Lcom/android/server/wm/WindowManagerService;->tmpRemoveWindowLocked(ILcom/android/server/wm/WindowState;)I

    move-result p1

    .line 1719
    add-int/lit8 v2, v2, 0x1

    goto :goto_0

    .line 1727
    :cond_0
    if-ltz p1, :cond_4

    .line 1728
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v3, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1730
    .local v3, "targetAppToken":Lcom/android/server/wm/AppWindowToken;
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-eqz v7, :cond_2

    .line 1731
    :goto_1
    invoke-virtual {v5}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    if-ge p1, v7, :cond_2

    .line 1732
    invoke-virtual {v5, p1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v6

    check-cast v6, Lcom/android/server/wm/WindowState;

    .line 1733
    .local v6, "wp":Lcom/android/server/wm/WindowState;
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-eq v6, v7, :cond_1

    iget-object v7, v6, Lcom/android/server/wm/WindowState;->mAttachedWindow:Lcom/android/server/wm/WindowState;

    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-ne v7, v8, :cond_2

    .line 1734
    :cond_1
    add-int/lit8 p1, p1, 0x1

    .line 1735
    goto :goto_1

    .line 1741
    .end local v6    # "wp":Lcom/android/server/wm/WindowState;
    :cond_2
    const/4 v2, 0x0

    :goto_2
    if-ge v2, v0, :cond_3

    .line 1742
    invoke-virtual {v1, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 1743
    .local v4, "win":Lcom/android/server/wm/WindowState;
    iput-object v3, v4, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1744
    invoke-direct {p0, p1, v4}, Lcom/android/server/wm/WindowManagerService;->reAddWindowLocked(ILcom/android/server/wm/WindowState;)I

    move-result p1

    .line 1741
    add-int/lit8 v2, v2, 0x1

    goto :goto_2

    .line 1750
    .end local v4    # "win":Lcom/android/server/wm/WindowState;
    :cond_3
    return-void

    .line 1752
    .end local v3    # "targetAppToken":Lcom/android/server/wm/AppWindowToken;
    :cond_4
    const/4 v2, 0x0

    :goto_3
    if-ge v2, v0, :cond_5

    .line 1753
    invoke-virtual {v1, v2}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 1754
    .restart local v4    # "win":Lcom/android/server/wm/WindowState;
    iput-object v8, v4, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1755
    invoke-direct {p0, v4}, Lcom/android/server/wm/WindowManagerService;->reAddWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;)V

    .line 1752
    add-int/lit8 v2, v2, 0x1

    goto :goto_3

    .line 1712
    .end local v4    # "win":Lcom/android/server/wm/WindowState;
    :cond_5
    return-void
.end method

.method moveInputMethodWindowsIfNeededLocked(Z)Z
    .locals 14
    .param p1, "needAssignLayers"    # Z

    .prologue
    const/4 v13, 0x1

    const/4 v12, -0x1

    const/4 v11, 0x0

    const/4 v10, 0x0

    .line 1764
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 1765
    .local v6, "imWin":Lcom/android/server/wm/WindowState;
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v9}, Ljava/util/ArrayList;->size()I

    move-result v0

    .line 1766
    .local v0, "DN":I
    if-nez v6, :cond_0

    if-nez v0, :cond_0

    .line 1767
    return v10

    .line 1771
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v8

    .line 1773
    .local v8, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {p0, v13}, Lcom/android/server/wm/WindowManagerService;->findDesiredInputMethodWindowIndexLocked(Z)I

    move-result v5

    .line 1774
    .local v5, "imPos":I
    if-ltz v5, :cond_d

    .line 1780
    invoke-virtual {v8}, Lcom/android/server/wm/WindowList;->size()I

    move-result v1

    .line 1781
    .local v1, "N":I
    if-ge v5, v1, :cond_5

    .line 1782
    invoke-virtual {v8, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 1786
    :goto_0
    if-eqz v6, :cond_6

    move-object v2, v6

    .line 1788
    .local v2, "baseImWin":Lcom/android/server/wm/WindowState;
    :goto_1
    iget-object v9, v2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowList;->size()I

    move-result v9

    if-lez v9, :cond_1

    .line 1789
    iget-object v9, v2, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v9, v10}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 1790
    .local v3, "cw":Lcom/android/server/wm/WindowState;
    iget v9, v3, Lcom/android/server/wm/WindowState;->mSubLayer:I

    if-gez v9, :cond_1

    move-object v2, v3

    .line 1793
    .end local v3    # "cw":Lcom/android/server/wm/WindowState;
    :cond_1
    if-ne v4, v2, :cond_9

    .line 1796
    add-int/lit8 v7, v5, 0x1

    .line 1797
    .local v7, "pos":I
    :goto_2
    if-ge v7, v1, :cond_2

    .line 1798
    invoke-virtual {v8, v7}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/WindowState;

    iget-boolean v9, v9, Lcom/android/server/wm/WindowState;->mIsImWindow:Z

    if-nez v9, :cond_7

    .line 1803
    :cond_2
    add-int/lit8 v7, v7, 0x1

    .line 1805
    :goto_3
    if-ge v7, v1, :cond_3

    .line 1806
    invoke-virtual {v8, v7}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/WindowState;

    iget-boolean v9, v9, Lcom/android/server/wm/WindowState;->mIsImWindow:Z

    if-eqz v9, :cond_8

    .line 1811
    :cond_3
    if-lt v7, v1, :cond_9

    .line 1814
    if-eqz v6, :cond_4

    .line 1815
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v9, v9, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iput-object v9, v6, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1817
    :cond_4
    return v10

    .line 1782
    .end local v2    # "baseImWin":Lcom/android/server/wm/WindowState;
    .end local v7    # "pos":I
    :cond_5
    const/4 v4, 0x0

    .local v4, "firstImWin":Lcom/android/server/wm/WindowState;
    goto :goto_0

    .line 1787
    .end local v4    # "firstImWin":Lcom/android/server/wm/WindowState;
    :cond_6
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v9, v10}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/WindowState;

    move-object v2, v9

    goto :goto_1

    .line 1801
    .restart local v2    # "baseImWin":Lcom/android/server/wm/WindowState;
    .restart local v7    # "pos":I
    :cond_7
    add-int/lit8 v7, v7, 0x1

    goto :goto_2

    .line 1809
    :cond_8
    add-int/lit8 v7, v7, 0x1

    goto :goto_3

    .line 1821
    .end local v7    # "pos":I
    :cond_9
    if-eqz v6, :cond_c

    .line 1826
    invoke-direct {p0, v5, v6}, Lcom/android/server/wm/WindowManagerService;->tmpRemoveWindowLocked(ILcom/android/server/wm/WindowState;)I

    move-result v5

    .line 1831
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v9, v9, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iput-object v9, v6, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1832
    invoke-direct {p0, v5, v6}, Lcom/android/server/wm/WindowManagerService;->reAddWindowLocked(ILcom/android/server/wm/WindowState;)I

    .line 1837
    if-lez v0, :cond_a

    add-int/lit8 v9, v5, 0x1

    invoke-virtual {p0, v9}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    .line 1862
    .end local v1    # "N":I
    .end local v2    # "baseImWin":Lcom/android/server/wm/WindowState;
    :cond_a
    :goto_4
    if-eqz p1, :cond_b

    .line 1863
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {v9, v8}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    .line 1866
    :cond_b
    return v13

    .line 1839
    .restart local v1    # "N":I
    .restart local v2    # "baseImWin":Lcom/android/server/wm/WindowState;
    :cond_c
    invoke-virtual {p0, v5}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    goto :goto_4

    .line 1846
    .end local v1    # "N":I
    .end local v2    # "baseImWin":Lcom/android/server/wm/WindowState;
    :cond_d
    if-eqz v6, :cond_e

    .line 1848
    invoke-direct {p0, v10, v6}, Lcom/android/server/wm/WindowManagerService;->tmpRemoveWindowLocked(ILcom/android/server/wm/WindowState;)I

    .line 1849
    iput-object v11, v6, Lcom/android/server/wm/WindowState;->mTargetAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 1850
    invoke-direct {p0, v6}, Lcom/android/server/wm/WindowManagerService;->reAddWindowToListInOrderLocked(Lcom/android/server/wm/WindowState;)V

    .line 1855
    if-lez v0, :cond_a

    invoke-virtual {p0, v12}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    goto :goto_4

    .line 1857
    :cond_e
    invoke-virtual {p0, v12}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodDialogsLocked(I)V

    goto :goto_4
.end method

.method moveStackWindowsLocked(Lcom/android/server/wm/DisplayContent;)V
    .locals 12
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;

    .prologue
    const/4 v10, 0x1

    const/4 v11, 0x0

    .line 5054
    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v8

    .line 5055
    .local v8, "windows":Lcom/android/server/wm/WindowList;
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mTmpWindows:Ljava/util/ArrayList;

    invoke-virtual {v9, v8}, Ljava/util/ArrayList;->addAll(Ljava/util/Collection;)Z

    .line 5057
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->rebuildAppWindowListLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 5060
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mTmpWindows:Ljava/util/ArrayList;

    invoke-virtual {v9}, Ljava/util/ArrayList;->size()I

    move-result v3

    .line 5061
    .local v3, "tmpSize":I
    invoke-virtual {v8}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    .line 5062
    .local v7, "winSize":I
    const/4 v1, 0x0

    .local v1, "tmpNdx":I
    const/4 v5, 0x0

    .line 5063
    .local v5, "winNdx":I
    :goto_0
    if-ge v1, v3, :cond_2

    if-ge v5, v7, :cond_2

    .line 5067
    :goto_1
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mTmpWindows:Ljava/util/ArrayList;

    add-int/lit8 v2, v1, 0x1

    .end local v1    # "tmpNdx":I
    .local v2, "tmpNdx":I
    invoke-virtual {v9, v1}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowState;

    .line 5068
    .local v0, "tmp":Lcom/android/server/wm/WindowState;
    if-ge v2, v3, :cond_0

    iget-object v9, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v9, :cond_0

    iget-object v9, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-boolean v9, v9, Lcom/android/server/wm/AppWindowToken;->mIsExiting:Z

    if-eqz v9, :cond_0

    move v1, v2

    .end local v2    # "tmpNdx":I
    .restart local v1    # "tmpNdx":I
    goto :goto_1

    .line 5072
    .end local v1    # "tmpNdx":I
    .restart local v2    # "tmpNdx":I
    :cond_0
    :goto_2
    add-int/lit8 v6, v5, 0x1

    .end local v5    # "winNdx":I
    .local v6, "winNdx":I
    invoke-virtual {v8, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 5073
    .local v4, "win":Lcom/android/server/wm/WindowState;
    if-ge v6, v7, :cond_1

    iget-object v9, v4, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v9, :cond_1

    iget-object v9, v4, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-boolean v9, v9, Lcom/android/server/wm/AppWindowToken;->mIsExiting:Z

    if-eqz v9, :cond_1

    move v5, v6

    .end local v6    # "winNdx":I
    .restart local v5    # "winNdx":I
    goto :goto_2

    .line 5075
    .end local v5    # "winNdx":I
    .restart local v6    # "winNdx":I
    :cond_1
    if-eq v0, v4, :cond_5

    .line 5077
    iput-boolean v10, p1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    move v5, v6

    .end local v6    # "winNdx":I
    .restart local v5    # "winNdx":I
    move v1, v2

    .line 5081
    .end local v0    # "tmp":Lcom/android/server/wm/WindowState;
    .end local v2    # "tmpNdx":I
    .end local v4    # "win":Lcom/android/server/wm/WindowState;
    .restart local v1    # "tmpNdx":I
    :cond_2
    if-eq v1, v5, :cond_3

    .line 5083
    iput-boolean v10, p1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5085
    :cond_3
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mTmpWindows:Ljava/util/ArrayList;

    invoke-virtual {v9}, Ljava/util/ArrayList;->clear()V

    .line 5087
    const/4 v9, 0x3

    invoke-virtual {p0, v9, v11}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    move-result v9

    if-nez v9, :cond_4

    .line 5089
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {p1}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v10

    invoke-virtual {v9, v10}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    .line 5092
    :cond_4
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v9}, Lcom/android/server/wm/InputMonitor;->setUpdateInputWindowsNeededLw()V

    .line 5093
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 5094
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v9, v11}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 5053
    return-void

    .end local v1    # "tmpNdx":I
    .end local v5    # "winNdx":I
    .restart local v0    # "tmp":Lcom/android/server/wm/WindowState;
    .restart local v2    # "tmpNdx":I
    .restart local v4    # "win":Lcom/android/server/wm/WindowState;
    .restart local v6    # "winNdx":I
    :cond_5
    move v5, v6

    .end local v6    # "winNdx":I
    .restart local v5    # "winNdx":I
    move v1, v2

    .end local v2    # "tmpNdx":I
    .restart local v1    # "tmpNdx":I
    goto :goto_0
.end method

.method public moveTaskToBottom(I)V
    .locals 8
    .param p1, "taskId"    # I

    .prologue
    .line 5130
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 5132
    .local v0, "origId":J
    :try_start_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v5
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 5133
    :try_start_1
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v4, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/Task;

    .line 5134
    .local v3, "task":Lcom/android/server/wm/Task;
    if-nez v3, :cond_0

    .line 5135
    const-string/jumbo v4, "WindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v7, "moveTaskToBottom: taskId="

    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 5136
    const-string/jumbo v7, " not found in mTaskIdToTask"

    .line 5135
    invoke-virtual {v6, v7}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v4, v6}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :try_start_2
    monitor-exit v5
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 5147
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5137
    return-void

    .line 5139
    :cond_0
    :try_start_3
    iget-object v2, v3, Lcom/android/server/wm/Task;->mStack:Lcom/android/server/wm/TaskStack;

    .line 5140
    .local v2, "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual {v2, v3}, Lcom/android/server/wm/TaskStack;->moveTaskToBottom(Lcom/android/server/wm/Task;)V

    .line 5141
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v4}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v4

    if-eqz v4, :cond_1

    .line 5142
    const/4 v4, 0x1

    invoke-virtual {v3, v4}, Lcom/android/server/wm/Task;->setSendingToBottom(Z)V

    .line 5144
    :cond_1
    invoke-virtual {v2}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v4

    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->moveStackWindowsLocked(Lcom/android/server/wm/DisplayContent;)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :try_start_4
    monitor-exit v5
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 5147
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5129
    return-void

    .line 5132
    .end local v2    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v3    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v4

    :try_start_5
    monitor-exit v5

    throw v4
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    .line 5146
    :catchall_1
    move-exception v4

    .line 5147
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5146
    throw v4
.end method

.method public moveTaskToStack(IIZ)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "stackId"    # I
    .param p3, "toTop"    # Z

    .prologue
    .line 5301
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 5304
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v3, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/Task;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5305
    .local v2, "task":Lcom/android/server/wm/Task;
    if-nez v2, :cond_0

    monitor-exit v4

    .line 5307
    return-void

    .line 5309
    :cond_0
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v3, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5310
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v1, :cond_1

    monitor-exit v4

    .line 5312
    return-void

    .line 5314
    :cond_1
    :try_start_2
    invoke-virtual {v2, v1, p3}, Lcom/android/server/wm/Task;->moveTaskToStack(Lcom/android/server/wm/TaskStack;Z)V

    .line 5315
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5316
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const/4 v3, 0x1

    iput-boolean v3, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5317
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v4

    .line 5300
    return-void

    .line 5301
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v2    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public moveTaskToTop(I)V
    .locals 8
    .param p1, "taskId"    # I

    .prologue
    .line 5099
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 5101
    .local v2, "origId":J
    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v7
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 5102
    :try_start_1
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v6, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/Task;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5103
    .local v5, "task":Lcom/android/server/wm/Task;
    if-nez v5, :cond_0

    :try_start_2
    monitor-exit v7
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 5125
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5105
    return-void

    .line 5107
    :cond_0
    :try_start_3
    iget-object v4, v5, Lcom/android/server/wm/Task;->mStack:Lcom/android/server/wm/TaskStack;

    .line 5108
    .local v4, "stack":Lcom/android/server/wm/TaskStack;
    invoke-virtual {v5}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5109
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const/4 v6, 0x1

    invoke-virtual {v0, v4, v6}, Lcom/android/server/wm/DisplayContent;->moveStack(Lcom/android/server/wm/TaskStack;Z)V

    .line 5110
    iget-boolean v6, v0, Lcom/android/server/wm/DisplayContent;->isDefaultDisplay:Z

    if-eqz v6, :cond_1

    .line 5111
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getHomeStack()Lcom/android/server/wm/TaskStack;

    move-result-object v1

    .line 5112
    .local v1, "homeStack":Lcom/android/server/wm/TaskStack;
    if-eq v1, v4, :cond_1

    .line 5115
    const/4 v6, 0x0

    invoke-virtual {v0, v1, v6}, Lcom/android/server/wm/DisplayContent;->moveStack(Lcom/android/server/wm/TaskStack;Z)V

    .line 5118
    .end local v1    # "homeStack":Lcom/android/server/wm/TaskStack;
    :cond_1
    invoke-virtual {v4, v5}, Lcom/android/server/wm/TaskStack;->moveTaskToTop(Lcom/android/server/wm/Task;)V

    .line 5119
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v6}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v6

    if-eqz v6, :cond_2

    .line 5120
    const/4 v6, 0x0

    invoke-virtual {v5, v6}, Lcom/android/server/wm/Task;->setSendingToBottom(Z)V

    .line 5122
    :cond_2
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->moveStackWindowsLocked(Lcom/android/server/wm/DisplayContent;)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :try_start_4
    monitor-exit v7
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 5125
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5098
    return-void

    .line 5101
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v4    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v5    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v6

    :try_start_5
    monitor-exit v7

    throw v6
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    .line 5124
    :catchall_1
    move-exception v6

    .line 5125
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5124
    throw v6
.end method

.method needsLayout()Z
    .locals 4

    .prologue
    .line 9832
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v3}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 9833
    .local v2, "numDisplays":I
    const/4 v1, 0x0

    .local v1, "displayNdx":I
    :goto_0
    if-ge v1, v2, :cond_1

    .line 9834
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v3, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 9835
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    iget-boolean v3, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    if-eqz v3, :cond_0

    .line 9836
    const/4 v3, 0x1

    return v3

    .line 9833
    :cond_0
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 9839
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :cond_1
    const/4 v3, 0x0

    return v3
.end method

.method public needsNavigationBar()Z
    .locals 1

    .prologue
    .line 10479
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->needsNavigationBar()Z

    move-result v0

    return v0
.end method

.method public notifyActivityDrawnForKeyguard()V
    .locals 2

    .prologue
    .line 5673
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5674
    :try_start_0
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardWaitingForActivityDrawn:Z

    if-eqz v0, :cond_0

    .line 5675
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->notifyActivityDrawnForKeyguardLw()V

    .line 5676
    const/4 v0, 0x0

    iput-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardWaitingForActivityDrawn:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v1

    .line 5670
    return-void

    .line 5673
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public notifyAppRelaunchesCleared(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 10560
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 10561
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 10562
    .local v0, "appWindow":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    .line 10563
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->clearRelaunching()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 10559
    return-void

    .line 10560
    .end local v0    # "appWindow":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public notifyAppRelaunching(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 10542
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 10543
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 10544
    .local v0, "appWindow":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    .line 10545
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->startRelaunching()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 10541
    return-void

    .line 10542
    .end local v0    # "appWindow":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public notifyAppRelaunchingFinished(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 10551
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 10552
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 10553
    .local v0, "appWindow":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    .line 10554
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->finishRelaunching()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 10550
    return-void

    .line 10551
    .end local v0    # "appWindow":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public notifyAppResumed(Landroid/os/IBinder;ZZ)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "wasStopped"    # Z
    .param p3, "allowSavedSurface"    # Z

    .prologue
    .line 4613
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 4614
    const-string/jumbo v2, "notifyAppResumed()"

    .line 4613
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 4615
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 4618
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 4620
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 4621
    .local v0, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v0, :cond_1

    .line 4622
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to notify resumed of non-existing app token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 4623
    return-void

    .line 4625
    :cond_1
    :try_start_1
    invoke-virtual {v0, p2, p3}, Lcom/android/server/wm/AppWindowToken;->notifyAppResumed(ZZ)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 4612
    return-void

    .line 4618
    .end local v0    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public notifyAppStopped(Landroid/os/IBinder;)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 4631
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 4632
    const-string/jumbo v2, "notifyAppStopped()"

    .line 4631
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 4633
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 4636
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 4638
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 4639
    .local v0, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v0, :cond_1

    .line 4640
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to notify stopped of non-existing app token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 4641
    return-void

    .line 4643
    :cond_1
    :try_start_1
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->notifyAppStopped()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 4630
    return-void

    .line 4636
    .end local v0    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method notifyHardKeyboardStatusChange()V
    .locals 4

    .prologue
    .line 7819
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 7820
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mHardKeyboardStatusChangeListener:Landroid/view/WindowManagerInternal$OnHardKeyboardStatusChangeListener;

    .line 7821
    .local v1, "listener":Landroid/view/WindowManagerInternal$OnHardKeyboardStatusChangeListener;
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mHardKeyboardAvailable:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .local v0, "available":Z
    monitor-exit v3

    .line 7823
    if-eqz v1, :cond_0

    .line 7824
    invoke-interface {v1, v0}, Landroid/view/WindowManagerInternal$OnHardKeyboardStatusChangeListener;->onHardKeyboardStatusChange(Z)V

    .line 7816
    :cond_0
    return-void

    .line 7819
    .end local v0    # "available":Z
    .end local v1    # "listener":Landroid/view/WindowManagerInternal$OnHardKeyboardStatusChangeListener;
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method okToDisplay()Z
    .locals 1

    .prologue
    .line 3431
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-nez v0, :cond_0

    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    if-eqz v0, :cond_0

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->isScreenOn()Z

    move-result v0

    :goto_0
    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0
.end method

.method public onDisplayAdded(I)V
    .locals 4
    .param p1, "displayId"    # I

    .prologue
    .line 11186
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x1b

    const/4 v3, 0x0

    invoke-virtual {v1, v2, p1, v3}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(III)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 11185
    return-void
.end method

.method public onDisplayChanged(I)V
    .locals 4
    .param p1, "displayId"    # I

    .prologue
    .line 11224
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x1d

    const/4 v3, 0x0

    invoke-virtual {v1, v2, p1, v3}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(III)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 11223
    return-void
.end method

.method public onDisplayRemoved(I)V
    .locals 4
    .param p1, "displayId"    # I

    .prologue
    .line 11201
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x1c

    const/4 v3, 0x0

    invoke-virtual {v1, v2, p1, v3}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(III)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 11200
    return-void
.end method

.method public onRectangleOnScreenRequested(Landroid/os/IBinder;Landroid/graphics/Rect;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "rectangle"    # Landroid/graphics/Rect;

    .prologue
    .line 2767
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 2768
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v1, :cond_0

    .line 2769
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowState;

    .line 2771
    .local v0, "window":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v1

    if-nez v1, :cond_0

    .line 2772
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    invoke-virtual {v1, p2}, Lcom/android/server/wm/AccessibilityController;->onRectangleOnScreenRequestedLocked(Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .end local v0    # "window":Lcom/android/server/wm/WindowState;
    :cond_0
    monitor-exit v2

    .line 2766
    return-void

    .line 2767
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
    .locals 3
    .param p1, "code"    # I
    .param p2, "data"    # Landroid/os/Parcel;
    .param p3, "reply"    # Landroid/os/Parcel;
    .param p4, "flags"    # I
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Landroid/os/RemoteException;
        }
    .end annotation

    .prologue
    .line 1090
    :try_start_0
    invoke-super {p0, p1, p2, p3, p4}, Landroid/view/IWindowManager$Stub;->onTransact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z
    :try_end_0
    .catch Ljava/lang/RuntimeException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v1

    return v1

    .line 1091
    :catch_0
    move-exception v0

    .line 1094
    .local v0, "e":Ljava/lang/RuntimeException;
    instance-of v1, v0, Ljava/lang/SecurityException;

    if-nez v1, :cond_0

    .line 1095
    const-string/jumbo v1, "WindowManager"

    const-string/jumbo v2, "Window Manager Crash"

    invoke-static {v1, v2, v0}, Landroid/util/Slog;->wtf(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 1097
    :cond_0
    throw v0
.end method

.method public openSession(Landroid/view/IWindowSessionCallback;Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;)Landroid/view/IWindowSession;
    .locals 3
    .param p1, "callback"    # Landroid/view/IWindowSessionCallback;
    .param p2, "client"    # Lcom/android/internal/view/IInputMethodClient;
    .param p3, "inputContext"    # Lcom/android/internal/view/IInputContext;

    .prologue
    .line 9029
    if-nez p2, :cond_0

    new-instance v1, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v2, "null client"

    invoke-direct {v1, v2}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9030
    :cond_0
    if-nez p3, :cond_1

    new-instance v1, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v2, "null inputContext"

    invoke-direct {v1, v2}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9031
    :cond_1
    new-instance v0, Lcom/android/server/wm/Session;

    invoke-direct {v0, p0, p1, p2, p3}, Lcom/android/server/wm/Session;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IWindowSessionCallback;Lcom/android/internal/view/IInputMethodClient;Lcom/android/internal/view/IInputContext;)V

    .line 9032
    .local v0, "session":Lcom/android/server/wm/Session;
    return-object v0
.end method

.method public outOfMemoryWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)Z
    .locals 7
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;

    .prologue
    const/4 v5, 0x0

    .line 3245
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 3248
    .local v0, "origId":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 3249
    const/4 v3, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result-object v2

    .line 3250
    .local v2, "win":Lcom/android/server/wm/WindowState;
    if-nez v2, :cond_0

    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 3256
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3251
    return v5

    .line 3253
    :cond_0
    :try_start_3
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    const-string/jumbo v5, "from-client"

    const/4 v6, 0x0

    invoke-virtual {p0, v3, v5, v6}, Lcom/android/server/wm/WindowManagerService;->reclaimSomeSurfaceMemoryLocked(Lcom/android/server/wm/WindowStateAnimator;Ljava/lang/String;Z)Z
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    move-result v3

    :try_start_4
    monitor-exit v4
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 3256
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3253
    return v3

    .line 3248
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    :try_start_5
    monitor-exit v4

    throw v3
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    .line 3255
    :catchall_1
    move-exception v3

    .line 3256
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3255
    throw v3
.end method

.method public overridePendingAppTransition(Ljava/lang/String;IILandroid/os/IRemoteCallback;)V
    .locals 2
    .param p1, "packageName"    # Ljava/lang/String;
    .param p2, "enterAnim"    # I
    .param p3, "exitAnim"    # I
    .param p4, "startedCallback"    # Landroid/os/IRemoteCallback;

    .prologue
    .line 4089
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4090
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2, p3, p4}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransition(Ljava/lang/String;IILandroid/os/IRemoteCallback;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4088
    return-void

    .line 4089
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionAspectScaledThumb(Landroid/graphics/Bitmap;IIIILandroid/os/IRemoteCallback;Z)V
    .locals 9
    .param p1, "srcThumb"    # Landroid/graphics/Bitmap;
    .param p2, "startX"    # I
    .param p3, "startY"    # I
    .param p4, "targetWidth"    # I
    .param p5, "targetHeight"    # I
    .param p6, "startedCallback"    # Landroid/os/IRemoteCallback;
    .param p7, "scaleUp"    # Z

    .prologue
    .line 4126
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v8

    .line 4127
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    move-object v1, p1

    move v2, p2

    move v3, p3

    move v4, p4

    move v5, p5

    move-object v6, p6

    move/from16 v7, p7

    invoke-virtual/range {v0 .. v7}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionAspectScaledThumb(Landroid/graphics/Bitmap;IIIILandroid/os/IRemoteCallback;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v8

    .line 4125
    return-void

    .line 4126
    :catchall_0
    move-exception v0

    monitor-exit v8

    throw v0
.end method

.method public overridePendingAppTransitionClipReveal(IIII)V
    .locals 2
    .param p1, "startX"    # I
    .param p2, "startY"    # I
    .param p3, "startWidth"    # I
    .param p4, "startHeight"    # I

    .prologue
    .line 4107
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4108
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2, p3, p4}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionClipReveal(IIII)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4106
    return-void

    .line 4107
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionInPlace(Ljava/lang/String;I)V
    .locals 2
    .param p1, "packageName"    # Ljava/lang/String;
    .param p2, "anim"    # I

    .prologue
    .line 4167
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4168
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/wm/AppTransition;->overrideInPlaceAppTransition(Ljava/lang/String;I)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4166
    return-void

    .line 4167
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionMultiThumb([Landroid/view/AppTransitionAnimationSpec;Landroid/os/IRemoteCallback;Landroid/os/IRemoteCallback;Z)V
    .locals 2
    .param p1, "specs"    # [Landroid/view/AppTransitionAnimationSpec;
    .param p2, "onAnimationStartedCallback"    # Landroid/os/IRemoteCallback;
    .param p3, "onAnimationFinishedCallback"    # Landroid/os/IRemoteCallback;
    .param p4, "scaleUp"    # Z

    .prologue
    .line 4136
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4137
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2, p3, p4}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionMultiThumb([Landroid/view/AppTransitionAnimationSpec;Landroid/os/IRemoteCallback;Landroid/os/IRemoteCallback;Z)V

    .line 4139
    invoke-virtual {p0, p1, p4}, Lcom/android/server/wm/WindowManagerService;->prolongAnimationsFromSpecs([Landroid/view/AppTransitionAnimationSpec;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4135
    return-void

    .line 4136
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionMultiThumbFuture(Landroid/view/IAppTransitionAnimationSpecsFuture;Landroid/os/IRemoteCallback;Z)V
    .locals 2
    .param p1, "specsFuture"    # Landroid/view/IAppTransitionAnimationSpecsFuture;
    .param p2, "callback"    # Landroid/os/IRemoteCallback;
    .param p3, "scaleUp"    # Z

    .prologue
    .line 4176
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4177
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2, p3}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionMultiThumbFuture(Landroid/view/IAppTransitionAnimationSpecsFuture;Landroid/os/IRemoteCallback;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4175
    return-void

    .line 4176
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionScaleUp(IIII)V
    .locals 2
    .param p1, "startX"    # I
    .param p2, "startY"    # I
    .param p3, "startWidth"    # I
    .param p4, "startHeight"    # I

    .prologue
    .line 4098
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 4099
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2, p3, p4}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionScaleUp(IIII)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 4097
    return-void

    .line 4098
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public overridePendingAppTransitionThumb(Landroid/graphics/Bitmap;IILandroid/os/IRemoteCallback;Z)V
    .locals 7
    .param p1, "srcThumb"    # Landroid/graphics/Bitmap;
    .param p2, "startX"    # I
    .param p3, "startY"    # I
    .param p4, "startedCallback"    # Landroid/os/IRemoteCallback;
    .param p5, "scaleUp"    # Z

    .prologue
    .line 4116
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 4117
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    move-object v1, p1

    move v2, p2

    move v3, p3

    move-object v4, p4

    move v5, p5

    invoke-virtual/range {v0 .. v5}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransitionThumb(Landroid/graphics/Bitmap;IILandroid/os/IRemoteCallback;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v6

    .line 4115
    return-void

    .line 4116
    :catchall_0
    move-exception v0

    monitor-exit v6

    throw v0
.end method

.method public overridePlayingAppAnimationsLw(Landroid/view/animation/Animation;)V
    .locals 1
    .param p1, "a"    # Landroid/view/animation/Animation;

    .prologue
    .line 5346
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0, p1}, Lcom/android/server/wm/DisplayContent;->overridePlayingAppAnimationsLw(Landroid/view/animation/Animation;)V

    .line 5345
    return-void
.end method

.method public pauseKeyDispatching(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "_token"    # Landroid/os/IBinder;

    .prologue
    .line 8067
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 8068
    const-string/jumbo v2, "pauseKeyDispatching()"

    .line 8067
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 8069
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 8072
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 8073
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowToken;

    .line 8074
    .local v0, "token":Lcom/android/server/wm/WindowToken;
    if-eqz v0, :cond_1

    .line 8075
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v1, v0}, Lcom/android/server/wm/InputMonitor;->pauseDispatchingLw(Lcom/android/server/wm/WindowToken;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1
    monitor-exit v2

    .line 8066
    return-void

    .line 8072
    .end local v0    # "token":Lcom/android/server/wm/WindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method pauseRotationLocked()V
    .locals 1

    .prologue
    .line 6801
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    add-int/lit8 v0, v0, 0x1

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    .line 6800
    return-void
.end method

.method public performBootTimeout()V
    .locals 3

    .prologue
    .line 5997
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5998
    :try_start_0
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v0, :cond_0

    monitor-exit v1

    .line 5999
    return-void

    .line 6001
    :cond_0
    :try_start_1
    const-string/jumbo v0, "WindowManager"

    const-string/jumbo v2, "***** BOOT TIMEOUT: forcing display enabled"

    invoke-static {v0, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 6002
    const/4 v0, 0x1

    iput-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mForceDisplayEnabled:Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v1

    .line 6004
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->performEnableScreen()V

    .line 5996
    return-void

    .line 5997
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public performDeferredDestroyWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)V
    .locals 5
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;

    .prologue
    .line 3228
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 3231
    .local v0, "origId":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 3232
    const/4 v3, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v2

    .line 3233
    .local v2, "win":Lcom/android/server/wm/WindowState;
    if-eqz v2, :cond_0

    iget-boolean v3, v2, Lcom/android/server/wm/WindowState;->mWillReplaceWindow:Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    if-eqz v3, :cond_1

    :cond_0
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 3240
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3234
    return-void

    .line 3237
    :cond_1
    :try_start_3
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowStateAnimator;->destroyDeferredSurfaceLocked()V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :try_start_4
    monitor-exit v4
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 3240
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3227
    return-void

    .line 3231
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    :try_start_5
    monitor-exit v4

    throw v3
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    .line 3239
    :catchall_1
    move-exception v3

    .line 3240
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3239
    throw v3
.end method

.method public performEnableScreen()V
    .locals 13

    .prologue
    const/4 v12, 0x0

    .line 6065
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v8

    .line 6072
    :try_start_0
    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-eqz v7, :cond_0

    monitor-exit v8

    .line 6073
    return-void

    .line 6075
    :cond_0
    :try_start_1
    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z

    if-nez v7, :cond_1

    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    if-eqz v7, :cond_2

    .line 6080
    :cond_1
    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mForceDisplayEnabled:Z

    if-nez v7, :cond_3

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->checkWaitingForWindowsLocked()Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v7

    if-eqz v7, :cond_3

    monitor-exit v8

    .line 6081
    return-void

    :cond_2
    monitor-exit v8

    .line 6076
    return-void

    .line 6084
    :cond_3
    :try_start_2
    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mBootAnimationStopped:Z

    if-nez v7, :cond_5

    .line 6086
    const-string/jumbo v7, "Stop bootanim"

    const-wide/16 v10, 0x20

    const/4 v9, 0x0

    invoke-static {v10, v11, v7, v9}, Landroid/os/Trace;->asyncTraceBegin(JLjava/lang/String;I)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    .line 6088
    :try_start_3
    const-string/jumbo v7, "SurfaceFlinger"

    invoke-static {v7}, Landroid/os/ServiceManager;->getService(Ljava/lang/String;)Landroid/os/IBinder;

    move-result-object v6

    .line 6089
    .local v6, "surfaceFlinger":Landroid/os/IBinder;
    if-eqz v6, :cond_4

    .line 6091
    invoke-static {}, Landroid/os/Parcel;->obtain()Landroid/os/Parcel;

    move-result-object v1

    .line 6092
    .local v1, "data":Landroid/os/Parcel;
    const-string/jumbo v7, "android.ui.ISurfaceComposer"

    invoke-virtual {v1, v7}, Landroid/os/Parcel;->writeInterfaceToken(Ljava/lang/String;)V

    .line 6093
    const/4 v7, 0x1

    .line 6094
    const/4 v9, 0x0

    const/4 v10, 0x0

    .line 6093
    invoke-interface {v6, v7, v1, v9, v10}, Landroid/os/IBinder;->transact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z

    .line 6095
    invoke-virtual {v1}, Landroid/os/Parcel;->recycle()V
    :try_end_3
    .catch Landroid/os/RemoteException; {:try_start_3 .. :try_end_3} :catch_0
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 6100
    .end local v1    # "data":Landroid/os/Parcel;
    .end local v6    # "surfaceFlinger":Landroid/os/IBinder;
    :cond_4
    :goto_0
    const/4 v7, 0x1

    :try_start_4
    iput-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mBootAnimationStopped:Z

    .line 6103
    :cond_5
    iget-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mForceDisplayEnabled:Z

    if-nez v7, :cond_6

    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->checkBootAnimationCompleteLocked()Z

    move-result v7

    if-eqz v7, :cond_9

    .line 6108
    :cond_6
    invoke-static {}, Landroid/os/SystemClock;->uptimeMillis()J

    move-result-wide v10

    const/16 v7, 0x791f

    invoke-static {v7, v10, v11}, Landroid/util/EventLog;->writeEvent(IJ)I

    .line 6109
    const-string/jumbo v7, "Stop bootanim"

    const-wide/16 v10, 0x20

    const/4 v9, 0x0

    invoke-static {v10, v11, v7, v9}, Landroid/os/Trace;->asyncTraceEnd(JLjava/lang/String;I)V

    .line 6110
    const/4 v7, 0x1

    iput-boolean v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    .line 6114
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    iget-boolean v9, p0, Lcom/android/server/wm/WindowManagerService;->mEventDispatchingEnabled:Z

    invoke-virtual {v7, v9}, Lcom/android/server/wm/InputMonitor;->setEventDispatchingLw(Z)V
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    monitor-exit v8

    .line 6118
    :try_start_5
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    invoke-interface {v7}, Landroid/app/IActivityManager;->bootAnimationComplete()V
    :try_end_5
    .catch Landroid/os/RemoteException; {:try_start_5 .. :try_end_5} :catch_1

    .line 6122
    :goto_1
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v7}, Landroid/view/WindowManagerPolicy;->enableScreenAfterBoot()V

    .line 6126
    const-class v7, Lcom/android/server/lights/LightsManager;

    invoke-static {v7}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/lights/LightsManager;

    .line 6127
    .local v4, "lm":Lcom/android/server/lights/LightsManager;
    const/4 v7, 0x3

    invoke-virtual {v4, v7}, Lcom/android/server/lights/LightsManager;->getLight(I)Lcom/android/server/lights/Light;

    move-result-object v0

    .line 6128
    .local v0, "batteryLight":Lcom/android/server/lights/Light;
    const/4 v7, 0x4

    invoke-virtual {v4, v7}, Lcom/android/server/lights/LightsManager;->getLight(I)Lcom/android/server/lights/Light;

    move-result-object v5

    .line 6129
    .local v5, "notifLight":Lcom/android/server/lights/Light;
    if-eqz v0, :cond_7

    .line 6130
    invoke-virtual {v0}, Lcom/android/server/lights/Light;->turnOff()V

    .line 6132
    :cond_7
    if-eqz v5, :cond_8

    .line 6133
    invoke-virtual {v5}, Lcom/android/server/lights/Light;->turnOff()V

    .line 6136
    :cond_8
    invoke-virtual {p0, v12, v12}, Lcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V

    .line 6064
    return-void

    .line 6097
    .end local v0    # "batteryLight":Lcom/android/server/lights/Light;
    .end local v4    # "lm":Lcom/android/server/lights/LightsManager;
    .end local v5    # "notifLight":Lcom/android/server/lights/Light;
    :catch_0
    move-exception v3

    .line 6098
    .local v3, "ex":Landroid/os/RemoteException;
    :try_start_6
    const-string/jumbo v7, "WindowManager"

    const-string/jumbo v9, "Boot completed: SurfaceFlinger is dead!"

    invoke-static {v7, v9}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_0

    goto :goto_0

    .line 6065
    .end local v3    # "ex":Landroid/os/RemoteException;
    :catchall_0
    move-exception v7

    monitor-exit v8

    throw v7

    :cond_9
    monitor-exit v8

    .line 6105
    return-void

    .line 6119
    :catch_1
    move-exception v2

    .local v2, "e":Landroid/os/RemoteException;
    goto :goto_1
.end method

.method public pokeDrawLock(Lcom/android/server/wm/Session;Landroid/os/IBinder;)V
    .locals 6
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "token"    # Landroid/os/IBinder;

    .prologue
    .line 2786
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 2787
    const/4 v1, 0x0

    :try_start_0
    invoke-virtual {p0, p1, p2, v1}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/os/IBinder;Z)Lcom/android/server/wm/WindowState;

    move-result-object v0

    .line 2788
    .local v0, "window":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_0

    .line 2789
    iget-wide v4, p0, Lcom/android/server/wm/WindowManagerService;->mDrawLockTimeoutMillis:J

    invoke-virtual {v0, v4, v5}, Lcom/android/server/wm/WindowState;->pokeDrawLockLw(J)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 2785
    return-void

    .line 2786
    .end local v0    # "window":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public positionTaskInStack(IIILandroid/graphics/Rect;Landroid/content/res/Configuration;)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "stackId"    # I
    .param p3, "position"    # I
    .param p4, "bounds"    # Landroid/graphics/Rect;
    .param p5, "config"    # Landroid/content/res/Configuration;

    .prologue
    .line 5388
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 5391
    :try_start_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v3, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/Task;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5392
    .local v2, "task":Lcom/android/server/wm/Task;
    if-nez v2, :cond_0

    monitor-exit v4

    .line 5395
    return-void

    .line 5397
    :cond_0
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v3, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/TaskStack;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5398
    .local v1, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v1, :cond_1

    monitor-exit v4

    .line 5401
    return-void

    .line 5403
    :cond_1
    :try_start_2
    invoke-virtual {v2, v1, p3, p4, p5}, Lcom/android/server/wm/Task;->positionTaskInStack(Lcom/android/server/wm/TaskStack;ILandroid/graphics/Rect;Landroid/content/res/Configuration;)V

    .line 5404
    invoke-virtual {v1}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5405
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    const/4 v3, 0x1

    iput-boolean v3, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5406
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v4

    .line 5387
    return-void

    .line 5388
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v2    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public prepareAppTransition(IZ)V
    .locals 3
    .param p1, "transit"    # I
    .param p2, "alwaysKeepCurrent"    # Z

    .prologue
    .line 4068
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 4069
    const-string/jumbo v2, "prepareAppTransition()"

    .line 4068
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 4070
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 4072
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 4073
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v1, p1, p2}, Lcom/android/server/wm/AppTransition;->prepareAppTransitionLocked(IZ)Z

    move-result v0

    .line 4075
    .local v0, "prepared":Z
    if-eqz v0, :cond_1

    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z

    move-result v1

    if-eqz v1, :cond_1

    .line 4076
    const/4 v1, 0x0

    iput-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mSkipAppTransitionAnimation:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1
    monitor-exit v2

    .line 4067
    return-void

    .line 4072
    .end local v0    # "prepared":Z
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method prepareDragSurface(Landroid/view/IWindow;Landroid/view/SurfaceSession;IIILandroid/view/Surface;)Landroid/os/IBinder;
    .locals 20
    .param p1, "window"    # Landroid/view/IWindow;
    .param p2, "session"    # Landroid/view/SurfaceSession;
    .param p3, "flags"    # I
    .param p4, "width"    # I
    .param p5, "height"    # I
    .param p6, "outSurface"    # Landroid/view/Surface;

    .prologue
    .line 8003
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v10

    .line 8004
    .local v10, "callerPid":I
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v11

    .line 8005
    .local v11, "callerUid":I
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v16

    .line 8006
    .local v16, "origId":J
    const/16 v18, 0x0

    .line 8009
    .local v18, "token":Landroid/os/IBinder;
    :try_start_0
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v19, v0

    monitor-enter v19
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_2

    .line 8011
    :try_start_1
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    if-nez v3, :cond_2

    .line 8013
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v13

    .line 8014
    .local v13, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v13}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v12

    .line 8016
    .local v12, "display":Landroid/view/Display;
    new-instance v2, Landroid/view/SurfaceControl;

    const-string/jumbo v4, "drag surface"

    .line 8017
    const/4 v7, -0x3

    const/4 v8, 0x4

    move-object/from16 v3, p2

    move/from16 v5, p4

    move/from16 v6, p5

    .line 8016
    invoke-direct/range {v2 .. v8}, Landroid/view/SurfaceControl;-><init>(Landroid/view/SurfaceSession;Ljava/lang/String;IIII)V

    .line 8018
    .local v2, "surface":Landroid/view/SurfaceControl;
    invoke-virtual {v12}, Landroid/view/Display;->getLayerStack()I

    move-result v3

    invoke-virtual {v2, v3}, Landroid/view/SurfaceControl;->setLayerStack(I)V

    .line 8019
    const/high16 v9, 0x3f800000    # 1.0f

    .line 8020
    .local v9, "alpha":F
    move/from16 v0, p3

    and-int/lit16 v3, v0, 0x200

    if-nez v3, :cond_0

    .line 8021
    const v9, 0x3f350481    # 0.7071f

    .line 8023
    :cond_0
    invoke-virtual {v2, v9}, Landroid/view/SurfaceControl;->setAlpha(F)V

    .line 8027
    move-object/from16 v0, p6

    invoke-virtual {v0, v2}, Landroid/view/Surface;->copyFrom(Landroid/view/SurfaceControl;)V

    .line 8028
    invoke-interface/range {p1 .. p1}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v8

    .line 8029
    .local v8, "winBinder":Landroid/os/IBinder;
    new-instance v5, Landroid/os/Binder;

    invoke-direct {v5}, Landroid/os/Binder;-><init>()V
    :try_end_1
    .catch Landroid/view/Surface$OutOfResourcesException; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_3

    .line 8030
    .local v5, "token":Landroid/os/IBinder;
    :try_start_2
    new-instance v3, Lcom/android/server/wm/DragState;

    .end local v18    # "token":Landroid/os/IBinder;
    move-object/from16 v4, p0

    move-object v6, v2

    move/from16 v7, p3

    invoke-direct/range {v3 .. v8}, Lcom/android/server/wm/DragState;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;Landroid/view/SurfaceControl;ILandroid/os/IBinder;)V

    move-object/from16 v0, p0

    iput-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    .line 8031
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    iput v10, v3, Lcom/android/server/wm/DragState;->mPid:I

    .line 8032
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    iput v11, v3, Lcom/android/server/wm/DragState;->mUid:I

    .line 8033
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    iput v9, v3, Lcom/android/server/wm/DragState;->mOriginalAlpha:F

    .line 8034
    new-instance v18, Landroid/os/Binder;

    invoke-direct/range {v18 .. v18}, Landroid/os/Binder;-><init>()V

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    move-object/from16 v0, v18

    iput-object v0, v3, Lcom/android/server/wm/DragState;->mToken:Landroid/os/IBinder;
    :try_end_2
    .catch Landroid/view/Surface$OutOfResourcesException; {:try_start_2 .. :try_end_2} :catch_1
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    .line 8037
    .end local v5    # "token":Landroid/os/IBinder;
    .local v18, "token":Landroid/os/IBinder;
    :try_start_3
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x14

    invoke-virtual {v3, v4, v8}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(ILjava/lang/Object;)V

    .line 8038
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x14

    invoke-virtual {v3, v4, v8}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v15

    .line 8039
    .local v15, "msg":Landroid/os/Message;
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v6, 0x1388

    invoke-virtual {v3, v15, v6, v7}, Lcom/android/server/wm/WindowManagerService$H;->sendMessageDelayed(Landroid/os/Message;J)Z
    :try_end_3
    .catch Landroid/view/Surface$OutOfResourcesException; {:try_start_3 .. :try_end_3} :catch_0
    .catchall {:try_start_3 .. :try_end_3} :catchall_3

    move-object/from16 v5, v18

    .end local v2    # "surface":Landroid/view/SurfaceControl;
    .end local v8    # "winBinder":Landroid/os/IBinder;
    .end local v9    # "alpha":F
    .end local v12    # "display":Landroid/view/Display;
    .end local v13    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v15    # "msg":Landroid/os/Message;
    .end local v18    # "token":Landroid/os/IBinder;
    .restart local v5    # "token":Landroid/os/IBinder;
    :cond_1
    :goto_0
    :try_start_4
    monitor-exit v19
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 8052
    invoke-static/range {v16 .. v17}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 8055
    return-object v5

    .line 8041
    .end local v5    # "token":Landroid/os/IBinder;
    .local v18, "token":Landroid/os/IBinder;
    :cond_2
    :try_start_5
    const-string/jumbo v3, "WindowManager"

    const-string/jumbo v4, "Drag already in progress"

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_5
    .catch Landroid/view/Surface$OutOfResourcesException; {:try_start_5 .. :try_end_5} :catch_0
    .catchall {:try_start_5 .. :try_end_5} :catchall_3

    move-object/from16 v5, v18

    .restart local v5    # "token":Landroid/os/IBinder;
    goto :goto_0

    .line 8043
    .end local v5    # "token":Landroid/os/IBinder;
    .end local v18    # "token":Landroid/os/IBinder;
    :catch_0
    move-exception v14

    .local v14, "e":Landroid/view/Surface$OutOfResourcesException;
    move-object/from16 v5, v18

    .line 8044
    .restart local v5    # "token":Landroid/os/IBinder;
    :goto_1
    :try_start_6
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v6, "Can\'t allocate drag surface w="

    invoke-virtual {v4, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move/from16 v0, p4

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    const-string/jumbo v6, " h="

    invoke-virtual {v4, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move/from16 v0, p5

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4, v14}, Landroid/util/Slog;->e(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 8045
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    if-eqz v3, :cond_1

    .line 8046
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;

    invoke-virtual {v3}, Lcom/android/server/wm/DragState;->reset()V

    .line 8047
    const/4 v3, 0x0

    move-object/from16 v0, p0

    iput-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_0

    goto :goto_0

    .line 8009
    .end local v14    # "e":Landroid/view/Surface$OutOfResourcesException;
    :catchall_0
    move-exception v3

    :goto_2
    :try_start_7
    monitor-exit v19

    throw v3
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_1

    .line 8051
    :catchall_1
    move-exception v3

    .line 8052
    :goto_3
    invoke-static/range {v16 .. v17}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 8051
    throw v3

    .end local v5    # "token":Landroid/os/IBinder;
    .restart local v18    # "token":Landroid/os/IBinder;
    :catchall_2
    move-exception v3

    move-object/from16 v5, v18

    .restart local v5    # "token":Landroid/os/IBinder;
    goto :goto_3

    .line 8009
    .end local v5    # "token":Landroid/os/IBinder;
    .end local v18    # "token":Landroid/os/IBinder;
    :catchall_3
    move-exception v3

    move-object/from16 v5, v18

    .restart local v5    # "token":Landroid/os/IBinder;
    goto :goto_2

    .line 8043
    .restart local v2    # "surface":Landroid/view/SurfaceControl;
    .restart local v8    # "winBinder":Landroid/os/IBinder;
    .restart local v9    # "alpha":F
    .restart local v12    # "display":Landroid/view/Display;
    .restart local v13    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catch_1
    move-exception v14

    .restart local v14    # "e":Landroid/view/Surface$OutOfResourcesException;
    goto :goto_1
.end method

.method public prepareFreezingTaskBounds(I)V
    .locals 5
    .param p1, "stackId"    # I

    .prologue
    .line 5376
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5377
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/TaskStack;

    .line 5378
    .local v0, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v0, :cond_0

    .line 5379
    new-instance v1, Ljava/lang/IllegalArgumentException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "prepareFreezingTaskBounds: stackId "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5380
    const-string/jumbo v4, " not found."

    .line 5379
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5376
    .end local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1

    .line 5382
    .restart local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_0
    :try_start_1
    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->prepareFreezingTaskBounds()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5375
    return-void
.end method

.method prolongAnimationsFromSpecs([Landroid/view/AppTransitionAnimationSpec;Z)V
    .locals 9
    .param p1, "specs"    # [Landroid/view/AppTransitionAnimationSpec;
    .param p2, "scaleUp"    # Z

    .prologue
    const/4 v8, 0x0

    const/4 v7, -0x1

    .line 4148
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mTmpTaskIds:Landroid/util/SparseIntArray;

    invoke-virtual {v5}, Landroid/util/SparseIntArray;->clear()V

    .line 4149
    array-length v5, p1

    add-int/lit8 v1, v5, -0x1

    .local v1, "i":I
    :goto_0
    if-ltz v1, :cond_0

    .line 4150
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mTmpTaskIds:Landroid/util/SparseIntArray;

    aget-object v6, p1, v1

    iget v6, v6, Landroid/view/AppTransitionAnimationSpec;->taskId:I

    invoke-virtual {v5, v6, v8}, Landroid/util/SparseIntArray;->put(II)V

    .line 4149
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .line 4152
    :cond_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v5}, Ljava/util/HashMap;->values()Ljava/util/Collection;

    move-result-object v5

    invoke-interface {v5}, Ljava/lang/Iterable;->iterator()Ljava/util/Iterator;

    move-result-object v4

    .local v4, "win$iterator":Ljava/util/Iterator;
    :cond_1
    :goto_1
    invoke-interface {v4}, Ljava/util/Iterator;->hasNext()Z

    move-result v5

    if-eqz v5, :cond_3

    invoke-interface {v4}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 4153
    .local v3, "win":Lcom/android/server/wm/WindowState;
    invoke-virtual {v3}, Lcom/android/server/wm/WindowState;->getTask()Lcom/android/server/wm/Task;

    move-result-object v2

    .line 4154
    .local v2, "task":Lcom/android/server/wm/Task;
    if-eqz v2, :cond_1

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mTmpTaskIds:Landroid/util/SparseIntArray;

    iget v6, v2, Lcom/android/server/wm/Task;->mTaskId:I

    invoke-virtual {v5, v6, v7}, Landroid/util/SparseIntArray;->get(II)I

    move-result v5

    if-eq v5, v7, :cond_1

    .line 4155
    invoke-virtual {v2}, Lcom/android/server/wm/Task;->inFreeformWorkspace()Z

    move-result v5

    .line 4154
    if-eqz v5, :cond_1

    .line 4156
    iget-object v0, v3, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 4157
    .local v0, "appToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_1

    iget-object v5, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    if-eqz v5, :cond_1

    .line 4158
    iget-object v6, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    if-eqz p2, :cond_2

    .line 4159
    const/4 v5, 0x2

    .line 4158
    :goto_2
    invoke-virtual {v6, v5}, Lcom/android/server/wm/AppWindowAnimator;->startProlongAnimation(I)V

    goto :goto_1

    .line 4159
    :cond_2
    const/4 v5, 0x1

    goto :goto_2

    .line 4144
    .end local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .end local v2    # "task":Lcom/android/server/wm/Task;
    .end local v3    # "win":Lcom/android/server/wm/WindowState;
    :cond_3
    return-void
.end method

.method public reboot(Z)V
    .locals 2
    .param p1, "confirm"    # Z

    .prologue
    .line 5867
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "userrequested"

    invoke-static {v0, v1, p1}, Lcom/android/server/power/ShutdownThread;->reboot(Landroid/content/Context;Ljava/lang/String;Z)V

    .line 5866
    return-void
.end method

.method public rebootSafeMode(Z)V
    .locals 1
    .param p1, "confirm"    # Z

    .prologue
    .line 5873
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-static {v0, p1}, Lcom/android/server/power/ShutdownThread;->rebootSafeMode(Landroid/content/Context;Z)V

    .line 5872
    return-void
.end method

.method final rebuildAppWindowListLocked()V
    .locals 1

    .prologue
    .line 9492
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-direct {p0, v0}, Lcom/android/server/wm/WindowManagerService;->rebuildAppWindowListLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 9491
    return-void
.end method

.method reclaimSomeSurfaceMemoryLocked(Lcom/android/server/wm/WindowStateAnimator;Ljava/lang/String;Z)Z
    .locals 23
    .param p1, "winAnimator"    # Lcom/android/server/wm/WindowStateAnimator;
    .param p2, "operation"    # Ljava/lang/String;
    .param p3, "secure"    # Z

    .prologue
    .line 9858
    move-object/from16 v0, p1

    iget-object v15, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    .line 9859
    .local v15, "surfaceController":Lcom/android/server/wm/WindowSurfaceController;
    const/4 v10, 0x0

    .line 9860
    .local v10, "leakedSurface":Z
    const/4 v9, 0x0

    .line 9862
    .local v9, "killedApps":Z
    const/16 v20, 0x3

    move/from16 v0, v20

    new-array v0, v0, [Ljava/lang/Object;

    move-object/from16 v20, v0

    move-object/from16 v0, p1

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mWin:Lcom/android/server/wm/WindowState;

    move-object/from16 v21, v0

    invoke-virtual/range {v21 .. v21}, Lcom/android/server/wm/WindowState;->toString()Ljava/lang/String;

    move-result-object v21

    const/16 v22, 0x0

    aput-object v21, v20, v22

    .line 9863
    move-object/from16 v0, p1

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v21, v0

    move-object/from16 v0, v21

    iget v0, v0, Lcom/android/server/wm/Session;->mPid:I

    move/from16 v21, v0

    invoke-static/range {v21 .. v21}, Ljava/lang/Integer;->valueOf(I)Ljava/lang/Integer;

    move-result-object v21

    const/16 v22, 0x1

    aput-object v21, v20, v22

    const/16 v21, 0x2

    aput-object p2, v20, v21

    .line 9862
    const/16 v21, 0x7918

    move/from16 v0, v21

    move-object/from16 v1, v20

    invoke-static {v0, v1}, Landroid/util/EventLog;->writeEvent(I[Ljava/lang/Object;)I

    .line 9865
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v4

    .line 9870
    .local v4, "callingIdentity":J
    :try_start_0
    const-string/jumbo v20, "WindowManager"

    const-string/jumbo v21, "Out of memory for surface!  Looking for leaks..."

    invoke-static/range {v20 .. v21}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 9871
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    move-object/from16 v20, v0

    invoke-virtual/range {v20 .. v20}, Landroid/util/SparseArray;->size()I

    move-result v11

    .line 9872
    .local v11, "numDisplays":I
    const/4 v6, 0x0

    .local v6, "displayNdx":I
    :goto_0
    if-ge v6, v11, :cond_4

    .line 9873
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    invoke-virtual {v0, v6}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v20

    check-cast v20, Lcom/android/server/wm/DisplayContent;

    invoke-virtual/range {v20 .. v20}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v17

    .line 9874
    .local v17, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual/range {v17 .. v17}, Lcom/android/server/wm/WindowList;->size()I

    move-result v12

    .line 9875
    .local v12, "numWindows":I
    const/16 v16, 0x0

    .local v16, "winNdx":I
    :goto_1
    move/from16 v0, v16

    if-ge v0, v12, :cond_3

    .line 9876
    move-object/from16 v0, v17

    move/from16 v1, v16

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v18

    check-cast v18, Lcom/android/server/wm/WindowState;

    .line 9877
    .local v18, "ws":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v19, v0

    .line 9878
    .local v19, "wsa":Lcom/android/server/wm/WindowStateAnimator;
    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v20, v0

    if-nez v20, :cond_1

    .line 9875
    :cond_0
    :goto_2
    add-int/lit8 v16, v16, 0x1

    goto :goto_1

    .line 9881
    :cond_1
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mSessions:Landroid/util/ArraySet;

    move-object/from16 v20, v0

    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v21, v0

    invoke-virtual/range {v20 .. v21}, Landroid/util/ArraySet;->contains(Ljava/lang/Object;)Z

    move-result v20

    if-nez v20, :cond_2

    .line 9882
    const-string/jumbo v20, "WindowManager"

    new-instance v21, Ljava/lang/StringBuilder;

    invoke-direct/range {v21 .. v21}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v22, "LEAKED SURFACE (session doesn\'t exist): "

    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    move-object/from16 v0, v21

    move-object/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9883
    const-string/jumbo v22, " surface="

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9883
    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v22, v0

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9884
    const-string/jumbo v22, " token="

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9884
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    move-object/from16 v22, v0

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9885
    const-string/jumbo v22, " pid="

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9885
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v22, v0

    move-object/from16 v0, v22

    iget v0, v0, Lcom/android/server/wm/Session;->mPid:I

    move/from16 v22, v0

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9886
    const-string/jumbo v22, " uid="

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9886
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v22, v0

    move-object/from16 v0, v22

    iget v0, v0, Lcom/android/server/wm/Session;->mUid:I

    move/from16 v22, v0

    .line 9882
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v21

    invoke-virtual/range {v21 .. v21}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v21

    invoke-static/range {v20 .. v21}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9887
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowStateAnimator;->destroySurface()V

    .line 9888
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    move-object/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 9889
    const/4 v10, 0x1

    goto/16 :goto_2

    .line 9890
    :cond_2
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v20, v0

    if-eqz v20, :cond_0

    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    iget-boolean v0, v0, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    move/from16 v20, v0

    if-eqz v20, :cond_0

    .line 9891
    const-string/jumbo v20, "WindowManager"

    new-instance v21, Ljava/lang/StringBuilder;

    invoke-direct/range {v21 .. v21}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v22, "LEAKED SURFACE (app token hidden): "

    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    move-object/from16 v0, v21

    move-object/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9892
    const-string/jumbo v22, " surface="

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9892
    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v22, v0

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9893
    const-string/jumbo v22, " token="

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9893
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v22, v0

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9894
    const-string/jumbo v22, " saved="

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v21

    .line 9894
    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/WindowState;->hasSavedSurface()Z

    move-result v22

    .line 9891
    invoke-virtual/range {v21 .. v22}, Ljava/lang/StringBuilder;->append(Z)Ljava/lang/StringBuilder;

    move-result-object v21

    invoke-virtual/range {v21 .. v21}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v21

    invoke-static/range {v20 .. v21}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9896
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowStateAnimator;->destroySurface()V

    .line 9897
    const/4 v10, 0x1

    goto/16 :goto_2

    .line 9872
    .end local v18    # "ws":Lcom/android/server/wm/WindowState;
    .end local v19    # "wsa":Lcom/android/server/wm/WindowStateAnimator;
    :cond_3
    add-int/lit8 v6, v6, 0x1

    goto/16 :goto_0

    .line 9902
    .end local v12    # "numWindows":I
    .end local v16    # "winNdx":I
    .end local v17    # "windows":Lcom/android/server/wm/WindowList;
    :cond_4
    if-nez v10, :cond_a

    .line 9903
    const-string/jumbo v20, "WindowManager"

    const-string/jumbo v21, "No leaked surfaces; killing applicatons!"

    invoke-static/range {v20 .. v21}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9904
    new-instance v13, Landroid/util/SparseIntArray;

    invoke-direct {v13}, Landroid/util/SparseIntArray;-><init>()V

    .line 9905
    .local v13, "pidCandidates":Landroid/util/SparseIntArray;
    const/4 v6, 0x0

    :goto_3
    if-ge v6, v11, :cond_a

    .line 9906
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    invoke-virtual {v0, v6}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v20

    check-cast v20, Lcom/android/server/wm/DisplayContent;

    invoke-virtual/range {v20 .. v20}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v17

    .line 9907
    .restart local v17    # "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual/range {v17 .. v17}, Lcom/android/server/wm/WindowList;->size()I

    move-result v12

    .line 9908
    .restart local v12    # "numWindows":I
    const/16 v16, 0x0

    .restart local v16    # "winNdx":I
    :goto_4
    move/from16 v0, v16

    if-ge v0, v12, :cond_7

    .line 9909
    move-object/from16 v0, v17

    move/from16 v1, v16

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v18

    check-cast v18, Lcom/android/server/wm/WindowState;

    .line 9910
    .restart local v18    # "ws":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mForceRemoves:Ljava/util/ArrayList;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    move-object/from16 v1, v18

    invoke-virtual {v0, v1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v20

    if-eqz v20, :cond_6

    .line 9908
    :cond_5
    :goto_5
    add-int/lit8 v16, v16, 0x1

    goto :goto_4

    .line 9913
    :cond_6
    move-object/from16 v0, v18

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v19, v0

    .line 9914
    .restart local v19    # "wsa":Lcom/android/server/wm/WindowStateAnimator;
    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v20, v0

    if-eqz v20, :cond_5

    .line 9915
    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    iget v0, v0, Lcom/android/server/wm/Session;->mPid:I

    move/from16 v20, v0

    move-object/from16 v0, v19

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mSession:Lcom/android/server/wm/Session;

    move-object/from16 v21, v0

    move-object/from16 v0, v21

    iget v0, v0, Lcom/android/server/wm/Session;->mPid:I

    move/from16 v21, v0

    move/from16 v0, v20

    move/from16 v1, v21

    invoke-virtual {v13, v0, v1}, Landroid/util/SparseIntArray;->append(II)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    goto :goto_5

    .line 9949
    .end local v6    # "displayNdx":I
    .end local v11    # "numDisplays":I
    .end local v12    # "numWindows":I
    .end local v13    # "pidCandidates":Landroid/util/SparseIntArray;
    .end local v16    # "winNdx":I
    .end local v17    # "windows":Lcom/android/server/wm/WindowList;
    .end local v18    # "ws":Lcom/android/server/wm/WindowState;
    .end local v19    # "wsa":Lcom/android/server/wm/WindowStateAnimator;
    :catchall_0
    move-exception v20

    .line 9950
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9949
    throw v20

    .line 9918
    .restart local v6    # "displayNdx":I
    .restart local v11    # "numDisplays":I
    .restart local v12    # "numWindows":I
    .restart local v13    # "pidCandidates":Landroid/util/SparseIntArray;
    .restart local v16    # "winNdx":I
    .restart local v17    # "windows":Lcom/android/server/wm/WindowList;
    :cond_7
    :try_start_1
    invoke-virtual {v13}, Landroid/util/SparseIntArray;->size()I

    move-result v20

    if-lez v20, :cond_9

    .line 9919
    invoke-virtual {v13}, Landroid/util/SparseIntArray;->size()I

    move-result v20

    move/from16 v0, v20

    new-array v14, v0, [I

    .line 9920
    .local v14, "pids":[I
    const/4 v8, 0x0

    .local v8, "i":I
    :goto_6
    array-length v0, v14

    move/from16 v20, v0

    move/from16 v0, v20

    if-ge v8, v0, :cond_8

    .line 9921
    invoke-virtual {v13, v8}, Landroid/util/SparseIntArray;->keyAt(I)I

    move-result v20

    aput v20, v14, v8
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 9920
    add-int/lit8 v8, v8, 0x1

    goto :goto_6

    .line 9924
    :cond_8
    :try_start_2
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    move-object/from16 v20, v0

    const-string/jumbo v21, "Free memory"

    move-object/from16 v0, v20

    move-object/from16 v1, v21

    move/from16 v2, p3

    invoke-interface {v0, v14, v1, v2}, Landroid/app/IActivityManager;->killPids([ILjava/lang/String;Z)Z
    :try_end_2
    .catch Landroid/os/RemoteException; {:try_start_2 .. :try_end_2} :catch_1
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    move-result v20

    if-eqz v20, :cond_9

    .line 9925
    const/4 v9, 0x1

    .line 9905
    .end local v8    # "i":I
    .end local v14    # "pids":[I
    :cond_9
    :goto_7
    add-int/lit8 v6, v6, 0x1

    goto/16 :goto_3

    .line 9933
    .end local v12    # "numWindows":I
    .end local v13    # "pidCandidates":Landroid/util/SparseIntArray;
    .end local v16    # "winNdx":I
    .end local v17    # "windows":Lcom/android/server/wm/WindowList;
    :cond_a
    if-nez v10, :cond_b

    if-eqz v9, :cond_d

    .line 9936
    :cond_b
    :try_start_3
    const-string/jumbo v20, "WindowManager"

    const-string/jumbo v21, "Looks like we have reclaimed some memory, clearing surface for retry."

    invoke-static/range {v20 .. v21}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 9937
    if-eqz v15, :cond_c

    .line 9940
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/WindowStateAnimator;->destroySurface()V

    .line 9941
    move-object/from16 v0, p1

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mWin:Lcom/android/server/wm/WindowState;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v20, v0

    move-object/from16 v0, p0

    move-object/from16 v1, v20

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService;->scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 9945
    :cond_c
    :try_start_4
    move-object/from16 v0, p1

    iget-object v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mWin:Lcom/android/server/wm/WindowState;

    move-object/from16 v20, v0

    move-object/from16 v0, v20

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    move-object/from16 v20, v0

    invoke-interface/range {v20 .. v20}, Landroid/view/IWindow;->dispatchGetNewSurface()V
    :try_end_4
    .catch Landroid/os/RemoteException; {:try_start_4 .. :try_end_4} :catch_0
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    .line 9950
    :cond_d
    :goto_8
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9953
    if-nez v10, :cond_e

    .end local v9    # "killedApps":Z
    :goto_9
    return v9

    .restart local v9    # "killedApps":Z
    :cond_e
    const/4 v9, 0x1

    goto :goto_9

    .line 9946
    :catch_0
    move-exception v7

    .local v7, "e":Landroid/os/RemoteException;
    goto :goto_8

    .line 9927
    .end local v7    # "e":Landroid/os/RemoteException;
    .restart local v8    # "i":I
    .restart local v12    # "numWindows":I
    .restart local v13    # "pidCandidates":Landroid/util/SparseIntArray;
    .restart local v14    # "pids":[I
    .restart local v16    # "winNdx":I
    .restart local v17    # "windows":Lcom/android/server/wm/WindowList;
    :catch_1
    move-exception v7

    .restart local v7    # "e":Landroid/os/RemoteException;
    goto :goto_7
.end method

.method public reenableKeyguard(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 5577
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.DISABLE_KEYGUARD"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 5579
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires DISABLE_KEYGUARD permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5582
    :cond_0
    if-nez p1, :cond_1

    .line 5583
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "token == null"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5586
    :cond_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mKeyguardDisableHandler:Lcom/android/server/wm/KeyguardDisableHandler;

    .line 5587
    const/4 v2, 0x2

    .line 5586
    invoke-virtual {v1, v2, p1}, Lcom/android/server/wm/KeyguardDisableHandler;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/KeyguardDisableHandler;->sendMessage(Landroid/os/Message;)Z

    .line 5576
    return-void
.end method

.method public reevaluateStatusBarVisibility()V
    .locals 4

    .prologue
    .line 10399
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 10400
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    invoke-interface {v1, v3}, Landroid/view/WindowManagerPolicy;->adjustSystemUiVisibilityLw(I)I

    move-result v0

    .line 10401
    .local v0, "visibility":I
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->updateStatusBarVisibilityLocked(I)Z

    move-result v1

    if-eqz v1, :cond_0

    .line 10402
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 10398
    return-void

    .line 10399
    .end local v0    # "visibility":I
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public registerDockedStackListener(Landroid/view/IDockedStackListener;)V
    .locals 2
    .param p1, "listener"    # Landroid/view/IDockedStackListener;

    .prologue
    .line 11397
    const-string/jumbo v0, "android.permission.REGISTER_WINDOW_MANAGER_LISTENERS"

    .line 11398
    const-string/jumbo v1, "registerDockedStackListener()"

    .line 11397
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 11399
    return-void

    .line 11402
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    iget-object v0, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    invoke-virtual {v0, p1}, Lcom/android/server/wm/DockedStackDividerController;->registerDockedStackListener(Landroid/view/IDockedStackListener;)V

    .line 11396
    return-void
.end method

.method public registerPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V
    .locals 1
    .param p1, "listener"    # Landroid/view/WindowManagerPolicy$PointerEventListener;

    .prologue
    .line 5795
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPointerEventDispatcher:Lcom/android/server/wm/PointerEventDispatcher;

    invoke-virtual {v0, p1}, Lcom/android/server/wm/PointerEventDispatcher;->registerInputEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 5794
    return-void
.end method

.method public registerShortcutKey(JLcom/android/internal/policy/IShortcutService;)V
    .locals 3
    .param p1, "shortcutCode"    # J
    .param p3, "shortcutKeyReceiver"    # Lcom/android/internal/policy/IShortcutService;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Landroid/os/RemoteException;
        }
    .end annotation

    .prologue
    .line 11574
    const-string/jumbo v0, "android.permission.REGISTER_WINDOW_MANAGER_LISTENERS"

    .line 11575
    const-string/jumbo v1, "registerShortcutKey"

    .line 11574
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 11576
    new-instance v0, Ljava/lang/SecurityException;

    .line 11577
    const-string/jumbo v1, "Requires REGISTER_WINDOW_MANAGER_LISTENERS permission"

    .line 11576
    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 11579
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1, p2, p3}, Landroid/view/WindowManagerPolicy;->registerShortcutKey(JLcom/android/internal/policy/IShortcutService;)V

    .line 11573
    return-void
.end method

.method public relayoutWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/view/WindowManager$LayoutParams;IIIILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/content/res/Configuration;Landroid/view/Surface;)I
    .locals 28
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "seq"    # I
    .param p4, "attrs"    # Landroid/view/WindowManager$LayoutParams;
    .param p5, "requestedWidth"    # I
    .param p6, "requestedHeight"    # I
    .param p7, "viewVisibility"    # I
    .param p8, "flags"    # I
    .param p9, "outFrame"    # Landroid/graphics/Rect;
    .param p10, "outOverscanInsets"    # Landroid/graphics/Rect;
    .param p11, "outContentInsets"    # Landroid/graphics/Rect;
    .param p12, "outVisibleInsets"    # Landroid/graphics/Rect;
    .param p13, "outStableInsets"    # Landroid/graphics/Rect;
    .param p14, "outOutsets"    # Landroid/graphics/Rect;
    .param p15, "outBackdropFrame"    # Landroid/graphics/Rect;
    .param p16, "outConfig"    # Landroid/content/res/Configuration;
    .param p17, "outSurface"    # Landroid/view/Surface;

    .prologue
    .line 2858
    const/4 v6, 0x0

    .line 2861
    .local v6, "result":I
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v5, "android.permission.STATUS_BAR"

    invoke-virtual {v4, v5}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v4

    if-nez v4, :cond_0

    const/16 v16, 0x1

    .line 2864
    .local v16, "hasStatusBarPermission":Z
    :goto_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v20

    .line 2865
    .local v20, "origId":J
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v25, v0

    monitor-enter v25

    .line 2866
    const/4 v4, 0x0

    :try_start_0
    move-object/from16 v0, p0

    move-object/from16 v1, p1

    move-object/from16 v2, p2

    invoke-virtual {v0, v1, v2, v4}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v7

    .line 2867
    .local v7, "win":Lcom/android/server/wm/WindowState;
    if-nez v7, :cond_1

    .line 2868
    const/4 v4, 0x0

    monitor-exit v25

    return v4

    .line 2861
    .end local v7    # "win":Lcom/android/server/wm/WindowState;
    .end local v16    # "hasStatusBarPermission":Z
    .end local v20    # "origId":J
    :cond_0
    const/16 v16, 0x0

    .restart local v16    # "hasStatusBarPermission":Z
    goto :goto_0

    .restart local v7    # "win":Lcom/android/server/wm/WindowState;
    .restart local v20    # "origId":J
    :cond_1
    :try_start_1
    move-object/from16 v0, p0

    move/from16 v1, p7

    invoke-static {v0, v1, v7}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->resetOnWindowChanged(Lcom/android/server/wm/WindowManagerService;ILcom/android/server/wm/WindowState;)V

    iget-object v8, v7, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .local v8, "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    const/16 v4, 0x8

    move/from16 v0, p7

    if-eq v0, v4, :cond_2

    .line 2873
    move/from16 v0, p5

    move/from16 v1, p6

    invoke-virtual {v7, v0, v1}, Lcom/android/server/wm/WindowState;->setRequestedSize(II)V

    .line 2876
    :cond_2
    const/4 v9, 0x0

    .line 2877
    .local v9, "attrChanges":I
    const/4 v14, 0x0

    .line 2878
    .local v14, "flagChanges":I
    if-eqz p4, :cond_7

    .line 2879
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p4

    invoke-interface {v4, v0}, Landroid/view/WindowManagerPolicy;->adjustWindowParamsLw(Landroid/view/WindowManager$LayoutParams;)V

    .line 2881
    iget v4, v7, Lcom/android/server/wm/WindowState;->mSeq:I

    move/from16 v0, p3

    if-ne v0, v4, :cond_4

    .line 2882
    move-object/from16 v0, p4

    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->systemUiVisibility:I

    .line 2883
    move-object/from16 v0, p4

    iget v5, v0, Landroid/view/WindowManager$LayoutParams;->subtreeSystemUiVisibility:I

    .line 2882
    or-int v19, v4, v5

    .line 2884
    .local v19, "systemUiVisibility":I
    const/high16 v4, 0x3ff0000

    and-int v4, v4, v19

    if-eqz v4, :cond_3

    .line 2885
    if-nez v16, :cond_3

    .line 2886
    const v4, -0x3ff0001

    and-int v19, v19, v4

    .line 2889
    :cond_3
    move/from16 v0, v19

    iput v0, v7, Lcom/android/server/wm/WindowState;->mSystemUiVisibility:I

    .line 2891
    .end local v19    # "systemUiVisibility":I
    :cond_4
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->type:I

    move-object/from16 v0, p4

    iget v5, v0, Landroid/view/WindowManager$LayoutParams;->type:I

    if-eq v4, v5, :cond_5

    .line 2892
    new-instance v4, Ljava/lang/IllegalArgumentException;

    .line 2893
    const-string/jumbo v5, "Window type can not be changed after the window is added."

    .line 2892
    invoke-direct {v4, v5}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v4
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 2865
    .end local v7    # "win":Lcom/android/server/wm/WindowState;
    .end local v8    # "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    .end local v9    # "attrChanges":I
    .end local v14    # "flagChanges":I
    :catchall_0
    move-exception v4

    monitor-exit v25

    throw v4

    .line 2897
    .restart local v7    # "win":Lcom/android/server/wm/WindowState;
    .restart local v8    # "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    .restart local v9    # "attrChanges":I
    .restart local v14    # "flagChanges":I
    :cond_5
    :try_start_2
    move-object/from16 v0, p4

    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    and-int/lit16 v4, v4, 0x2000

    if-eqz v4, :cond_6

    .line 2899
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->x:I

    move-object/from16 v0, p4

    iput v4, v0, Landroid/view/WindowManager$LayoutParams;->x:I

    .line 2900
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->y:I

    move-object/from16 v0, p4

    iput v4, v0, Landroid/view/WindowManager$LayoutParams;->y:I

    .line 2901
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->width:I

    move-object/from16 v0, p4

    iput v4, v0, Landroid/view/WindowManager$LayoutParams;->width:I

    .line 2902
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->height:I

    move-object/from16 v0, p4

    iput v4, v0, Landroid/view/WindowManager$LayoutParams;->height:I

    .line 2905
    :cond_6
    move-object/from16 v0, p0

    move-object/from16 v1, p4

    invoke-static {v0, v1, v7}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->adjustBackupWindowFlag(Lcom/android/server/wm/WindowManagerService;Landroid/view/WindowManager$LayoutParams;Lcom/android/server/wm/WindowState;)V

    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v5, v4, Landroid/view/WindowManager$LayoutParams;->flags:I

    move-object/from16 v0, p4

    iget v0, v0, Landroid/view/WindowManager$LayoutParams;->flags:I

    move/from16 v26, v0

    xor-int v14, v5, v26

    iput v14, v4, Landroid/view/WindowManager$LayoutParams;->flags:I

    .line 2906
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    move-object/from16 v0, p4

    invoke-virtual {v4, v0}, Landroid/view/WindowManager$LayoutParams;->copyFrom(Landroid/view/WindowManager$LayoutParams;)I

    move-result v9

    and-int/lit16 v4, v9, 0x4001

    if-eqz v4, :cond_flyme_0

    const/4 v4, 0x1

    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mLayoutNeeded:Z

    :cond_flyme_0

    move-object/from16 v0, p0

    move-object/from16 v1, p4

    invoke-static {v0, v1, v7}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->adjustFlymeKeyguardFlags(Lcom/android/server/wm/WindowManagerService;Landroid/view/WindowManager$LayoutParams;Lcom/android/server/wm/WindowState;)V

    :cond_7
    and-int/lit8 v4, p8, 0x2

    if-eqz v4, :cond_19

    const/4 v4, 0x1

    :goto_1
    iput-boolean v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceDestroyDeferred:Z

    .line 2917
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->privateFlags:I

    and-int/lit16 v4, v4, 0x80

    if-eqz v4, :cond_1a

    const/4 v4, 0x1

    .line 2916
    :goto_2
    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mEnforceSizeCompat:Z

    .line 2918
    and-int/lit16 v4, v9, 0x80

    if-eqz v4, :cond_8

    .line 2919
    move-object/from16 v0, p4

    iget v4, v0, Landroid/view/WindowManager$LayoutParams;->alpha:F

    iput v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mAlpha:F

    .line 2921
    :cond_8
    iget v4, v7, Lcom/android/server/wm/WindowState;->mRequestedWidth:I

    iget v5, v7, Lcom/android/server/wm/WindowState;->mRequestedHeight:I

    invoke-virtual {v7, v4, v5}, Lcom/android/server/wm/WindowState;->setWindowScale(II)V

    .line 2923
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-object v4, v4, Landroid/view/WindowManager$LayoutParams;->surfaceInsets:Landroid/graphics/Rect;

    iget v4, v4, Landroid/graphics/Rect;->left:I

    if-nez v4, :cond_9

    .line 2924
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-object v4, v4, Landroid/view/WindowManager$LayoutParams;->surfaceInsets:Landroid/graphics/Rect;

    iget v4, v4, Landroid/graphics/Rect;->top:I

    if-eqz v4, :cond_1b

    .line 2927
    :cond_9
    :goto_3
    const/4 v4, 0x0

    invoke-virtual {v8, v4}, Lcom/android/server/wm/WindowStateAnimator;->setOpaqueLocked(Z)V

    .line 2930
    :cond_a
    const v4, 0x20008

    and-int/2addr v4, v14

    if-eqz v4, :cond_1c

    const/16 v17, 0x1

    .line 2931
    .local v17, "imMayMove":Z
    :goto_4
    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->isDefaultDisplay()Z

    move-result v18

    .line 2932
    .local v18, "isDefaultDisplay":Z
    if-eqz v18, :cond_1f

    iget v4, v7, Lcom/android/server/wm/WindowState;->mViewVisibility:I

    move/from16 v0, p7

    if-ne v4, v0, :cond_b

    .line 2933
    and-int/lit8 v4, v14, 0x8

    if-eqz v4, :cond_1d

    .line 2932
    :cond_b
    const/4 v15, 0x1

    .line 2936
    .local v15, "focusMayChange":Z
    :goto_5
    iget v4, v7, Lcom/android/server/wm/WindowState;->mViewVisibility:I

    move/from16 v0, p7

    if-eq v4, v0, :cond_21

    .line 2937
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v5, 0x100000

    and-int/2addr v4, v5

    if-eqz v4, :cond_20

    const/16 v24, 0x1

    .line 2938
    .local v24, "wallpaperMayMove":Z
    :goto_6
    const/high16 v4, 0x100000

    and-int/2addr v4, v14

    if-eqz v4, :cond_22

    const/4 v4, 0x1

    :goto_7
    or-int v24, v24, v4

    .line 2939
    .local v24, "wallpaperMayMove":Z
    and-int/lit16 v4, v14, 0x2000

    if-eqz v4, :cond_c

    iget-object v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    if-eqz v4, :cond_c

    .line 2940
    iget-object v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v0, p0

    invoke-virtual {v0, v7}, Lcom/android/server/wm/WindowManagerService;->isSecureLocked(Lcom/android/server/wm/WindowState;)Z

    move-result v5

    invoke-virtual {v4, v5}, Lcom/android/server/wm/WindowSurfaceController;->setSecure(Z)V

    .line 2943
    :cond_c
    const/4 v4, 0x1

    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mRelayoutCalled:Z

    .line 2944
    const/4 v4, 0x1

    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mInRelayout:Z

    .line 2946
    iget v10, v7, Lcom/android/server/wm/WindowState;->mViewVisibility:I

    .line 2947
    .local v10, "oldVisibility":I
    move/from16 v0, p7

    iput v0, v7, Lcom/android/server/wm/WindowState;->mViewVisibility:I

    .line 2954
    if-nez p7, :cond_d

    .line 2955
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_23

    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-boolean v4, v4, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    if-eqz v4, :cond_23

    .line 2978
    :cond_d
    const/4 v4, 0x0

    iput-boolean v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mEnterAnimationPending:Z

    .line 2979
    const/4 v4, 0x0

    iput-boolean v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mEnteringAnimation:Z

    .line 2981
    if-eqz v10, :cond_26

    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->isAnimatingWithSavedSurface()Z

    move-result v23

    .line 2989
    :goto_8
    invoke-virtual {v8}, Lcom/android/server/wm/WindowStateAnimator;->hasSurface()Z

    move-result v4

    if-eqz v4, :cond_e

    iget-boolean v4, v7, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    if-eqz v4, :cond_27

    .line 3008
    .end local v15    # "focusMayChange":Z
    :cond_e
    :goto_9
    if-nez p7, :cond_29

    invoke-virtual {v8}, Lcom/android/server/wm/WindowStateAnimator;->hasSurface()Z

    move-result v4

    if-eqz v4, :cond_29

    .line 3012
    iget-object v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    move-object/from16 v0, p17

    invoke-virtual {v4, v0}, Lcom/android/server/wm/WindowSurfaceController;->getSurface(Landroid/view/Surface;)V

    .line 3026
    :goto_a
    if-eqz v15, :cond_f

    .line 3028
    const/4 v4, 0x3

    .line 3029
    const/4 v5, 0x0

    .line 3028
    move-object/from16 v0, p0

    invoke-virtual {v0, v4, v5}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    move-result v4

    if-eqz v4, :cond_f

    .line 3030
    const/16 v17, 0x0

    .line 3037
    :cond_f
    and-int/lit8 v4, v6, 0x2

    if-eqz v4, :cond_2a

    const/16 v22, 0x1

    .line 3038
    .local v22, "toBeDisplayed":Z
    :goto_b
    if-eqz v17, :cond_11

    const/4 v4, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v4}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodWindowsIfNeededLocked(Z)Z

    move-result v4

    if-nez v4, :cond_10

    if-eqz v22, :cond_11

    .line 3044
    :cond_10
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v5

    invoke-virtual {v4, v5}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    .line 3047
    :cond_11
    if-eqz v24, :cond_12

    .line 3048
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v4

    iget v5, v4, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v5, v5, 0x4

    iput v5, v4, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    .line 3052
    :cond_12
    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 3053
    and-int/lit8 v4, p8, 0x1

    if-eqz v4, :cond_2b

    const/4 v4, 0x1

    :goto_c
    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mGivenInsetsPending:Z

    .line 3054
    const/4 v4, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v4}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z

    move-result v11

    .line 3055
    .local v11, "configChanged":Z
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 3056
    if-eqz v22, :cond_13

    iget-boolean v4, v7, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v4, :cond_13

    .line 3057
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v12

    .line 3058
    .local v12, "displayInfo":Landroid/view/DisplayInfo;
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    .line 3059
    iget v5, v12, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v0, v12, Landroid/view/DisplayInfo;->logicalHeight:I

    move/from16 v26, v0

    const/16 v27, 0x0

    move/from16 v0, v26

    move/from16 v1, v27

    invoke-virtual {v4, v7, v5, v0, v1}, Lcom/android/server/wm/WallpaperController;->updateWallpaperOffset(Lcom/android/server/wm/WindowState;IIZ)Z

    .end local v12    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_13
    move-object/from16 v0, p0

    move/from16 v1, p7

    invoke-static {v0, v1, v7}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->adjustInputWindow(Lcom/android/server/wm/WindowManagerService;ILcom/android/server/wm/WindowState;)V

    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_14

    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {v4}, Lcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V

    :cond_14
    iget-boolean v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mReportSurfaceResized:Z

    if-eqz v4, :cond_15

    const/4 v4, 0x0

    iput-boolean v4, v8, Lcom/android/server/wm/WindowStateAnimator;->mReportSurfaceResized:Z

    or-int/lit8 v6, v6, 0x20

    :cond_15
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v4, v7}, Landroid/view/WindowManagerPolicy;->isNavBarForcedShownLw(Landroid/view/WindowManagerPolicy$WindowState;)Z

    move-result v4

    if-eqz v4, :cond_16

    .line 3069
    or-int/lit8 v6, v6, 0x40

    .line 3071
    :cond_16
    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->isGoneForLayoutLw()Z

    move-result v4

    if-nez v4, :cond_17

    .line 3072
    const/4 v4, 0x0

    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mResizedWhileGone:Z

    .line 3074
    :cond_17
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mCompatFrame:Landroid/graphics/Rect;

    move-object/from16 v0, p9

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3075
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mOverscanInsets:Landroid/graphics/Rect;

    move-object/from16 v0, p10

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3076
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mContentInsets:Landroid/graphics/Rect;

    move-object/from16 v0, p11

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3077
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mVisibleInsets:Landroid/graphics/Rect;

    move-object/from16 v0, p12

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3078
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mStableInsets:Landroid/graphics/Rect;

    move-object/from16 v0, p13

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3079
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mOutsets:Landroid/graphics/Rect;

    move-object/from16 v0, p14

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3080
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mFrame:Landroid/graphics/Rect;

    invoke-virtual {v7, v4}, Lcom/android/server/wm/WindowState;->getBackdropFrame(Landroid/graphics/Rect;)Landroid/graphics/Rect;

    move-result-object v4

    move-object/from16 v0, p15

    invoke-virtual {v0, v4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 3092
    move-object/from16 v0, p0

    iget-boolean v4, v0, Lcom/android/server/wm/WindowManagerService;->mInTouchMode:Z

    if-eqz v4, :cond_2c

    const/4 v4, 0x1

    :goto_d
    or-int/2addr v6, v4

    .line 3094
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v5, 0x1

    invoke-virtual {v4, v5}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 3099
    const/4 v4, 0x0

    iput-boolean v4, v7, Lcom/android/server/wm/WindowState;->mInRelayout:Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v25

    .line 3102
    if-eqz v11, :cond_18

    .line 3103
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->sendNewConfiguration()V

    .line 3105
    :cond_18
    invoke-static/range {v20 .. v21}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3106
    return v6

    .line 2915
    .end local v10    # "oldVisibility":I
    .end local v11    # "configChanged":Z
    .end local v17    # "imMayMove":Z
    .end local v18    # "isDefaultDisplay":Z
    .end local v22    # "toBeDisplayed":Z
    .end local v24    # "wallpaperMayMove":Z
    :cond_19
    const/4 v4, 0x0

    goto/16 :goto_1

    .line 2917
    :cond_1a
    const/4 v4, 0x0

    goto/16 :goto_2

    .line 2925
    :cond_1b
    :try_start_3
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-object v4, v4, Landroid/view/WindowManager$LayoutParams;->surfaceInsets:Landroid/graphics/Rect;

    iget v4, v4, Landroid/graphics/Rect;->right:I

    if-nez v4, :cond_9

    .line 2926
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-object v4, v4, Landroid/view/WindowManager$LayoutParams;->surfaceInsets:Landroid/graphics/Rect;

    iget v4, v4, Landroid/graphics/Rect;->bottom:I

    if-eqz v4, :cond_a

    goto/16 :goto_3

    .line 2930
    :cond_1c
    const/16 v17, 0x0

    .restart local v17    # "imMayMove":Z
    goto/16 :goto_4

    .line 2934
    .restart local v18    # "isDefaultDisplay":Z
    :cond_1d
    iget-boolean v4, v7, Lcom/android/server/wm/WindowState;->mRelayoutCalled:Z

    if-eqz v4, :cond_1e

    const/4 v15, 0x0

    .restart local v15    # "focusMayChange":Z
    goto/16 :goto_5

    .end local v15    # "focusMayChange":Z
    :cond_1e
    const/4 v15, 0x1

    .restart local v15    # "focusMayChange":Z
    goto/16 :goto_5

    .line 2932
    .end local v15    # "focusMayChange":Z
    :cond_1f
    const/4 v15, 0x0

    .restart local v15    # "focusMayChange":Z
    goto/16 :goto_5

    .line 2937
    :cond_20
    const/16 v24, 0x0

    .local v24, "wallpaperMayMove":Z
    goto/16 :goto_6

    .line 2936
    .end local v24    # "wallpaperMayMove":Z
    :cond_21
    const/16 v24, 0x0

    .restart local v24    # "wallpaperMayMove":Z
    goto/16 :goto_6

    .line 2938
    :cond_22
    const/4 v4, 0x0

    goto/16 :goto_7

    .restart local v10    # "oldVisibility":I
    .local v24, "wallpaperMayMove":Z
    :cond_23
    move-object/from16 v4, p0

    move-object/from16 v5, p16

    .line 2956
    invoke-direct/range {v4 .. v10}, Lcom/android/server/wm/WindowManagerService;->relayoutVisibleWindow(Landroid/content/res/Configuration;ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;II)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    move-result v6

    .line 2959
    :try_start_4
    move-object/from16 v0, p0

    move-object/from16 v1, p17

    invoke-direct {v0, v1, v6, v7, v8}, Lcom/android/server/wm/WindowManagerService;->createSurfaceControl(Landroid/view/Surface;ILcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;)I
    :try_end_4
    .catch Ljava/lang/Exception; {:try_start_4 .. :try_end_4} :catch_0
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    move-result v6

    .line 2969
    and-int/lit8 v4, v6, 0x2

    if-eqz v4, :cond_24

    .line 2970
    move/from16 v15, v18

    .line 2972
    .end local v15    # "focusMayChange":Z
    :cond_24
    :try_start_5
    iget-object v4, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v4, v4, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v5, 0x7db

    if-ne v4, v5, :cond_25

    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-nez v4, :cond_25

    .line 2973
    move-object/from16 v0, p0

    iput-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 2974
    const/16 v17, 0x1

    .line 2976
    :cond_25
    invoke-virtual {v7}, Lcom/android/server/wm/WindowState;->adjustStartingWindowFlags()V

    goto/16 :goto_a

    .line 2960
    .restart local v15    # "focusMayChange":Z
    :catch_0
    move-exception v13

    .line 2961
    .local v13, "e":Ljava/lang/Exception;
    move-object/from16 v0, p0

    iget-object v4, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v5, 0x1

    invoke-virtual {v4, v5}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 2963
    const-string/jumbo v4, "WindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v26, "Exception thrown when creating surface for client "

    move-object/from16 v0, v26

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    move-object/from16 v0, p2

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 2964
    const-string/jumbo v26, " ("

    .line 2963
    move-object/from16 v0, v26

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 2964
    iget-object v0, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    move-object/from16 v26, v0

    invoke-virtual/range {v26 .. v26}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v26

    .line 2963
    move-object/from16 v0, v26

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 2964
    const-string/jumbo v26, ")"

    .line 2963
    move-object/from16 v0, v26

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v4, v5, v13}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 2966
    invoke-static/range {v20 .. v21}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_0

    .line 2967
    const/4 v4, 0x0

    monitor-exit v25

    return v4

    .line 2981
    .end local v13    # "e":Ljava/lang/Exception;
    :cond_26
    const/16 v23, 0x0

    .local v23, "usingSavedSurfaceBeforeVisible":Z
    goto/16 :goto_8

    .line 2990
    .end local v23    # "usingSavedSurfaceBeforeVisible":Z
    :cond_27
    if-nez v23, :cond_e

    .line 3002
    :try_start_6
    iget-boolean v4, v7, Lcom/android/server/wm/WindowState;->mWillReplaceWindow:Z

    if-nez v4, :cond_28

    .line 3003
    move-object/from16 v0, p0

    move/from16 v1, v18

    invoke-direct {v0, v7, v8, v1, v15}, Lcom/android/server/wm/WindowManagerService;->tryStartExitingAnimation(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowStateAnimator;ZZ)Z
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_0

    move-result v15

    .line 3006
    .end local v15    # "focusMayChange":Z
    :cond_28
    const/4 v6, 0x4

    goto/16 :goto_9

    .line 3017
    :cond_29
    :try_start_7
    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "wmReleaseOutSurface_"

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    .line 3018
    iget-object v5, v7, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-virtual {v5}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v5

    .line 3017
    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    const-wide/16 v26, 0x20

    move-wide/from16 v0, v26

    invoke-static {v0, v1, v4}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 3019
    invoke-virtual/range {p17 .. p17}, Landroid/view/Surface;->release()V
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_1

    .line 3021
    const-wide/16 v4, 0x20

    :try_start_8
    invoke-static {v4, v5}, Landroid/os/Trace;->traceEnd(J)V

    goto/16 :goto_a

    .line 3020
    :catchall_1
    move-exception v4

    .line 3021
    const-wide/16 v26, 0x20

    invoke-static/range {v26 .. v27}, Landroid/os/Trace;->traceEnd(J)V

    .line 3020
    throw v4
    :try_end_8
    .catchall {:try_start_8 .. :try_end_8} :catchall_0

    .line 3037
    :cond_2a
    const/16 v22, 0x0

    .restart local v22    # "toBeDisplayed":Z
    goto/16 :goto_b

    .line 3053
    :cond_2b
    const/4 v4, 0x0

    goto/16 :goto_c

    .line 3092
    .restart local v11    # "configChanged":Z
    :cond_2c
    const/4 v4, 0x0

    goto/16 :goto_d
.end method

.method public removeAppStartingWindow(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 4422
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 4423
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowToken;

    iget-object v0, v1, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    .line 4424
    .local v0, "wtoken":Lcom/android/server/wm/AppWindowToken;
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 4421
    return-void

    .line 4422
    .end local v0    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public removeAppToken(Landroid/os/IBinder;)V
    .locals 14
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    .line 4875
    const-string/jumbo v0, "android.permission.MANAGE_APP_TOKENS"

    .line 4876
    const-string/jumbo v2, "removeAppToken()"

    .line 4875
    invoke-direct {p0, v0, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 4877
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v0, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 4880
    :cond_0
    const/4 v1, 0x0

    .line 4881
    .local v1, "wtoken":Lcom/android/server/wm/AppWindowToken;
    const/4 v12, 0x0

    .line 4882
    .local v12, "startingToken":Lcom/android/server/wm/AppWindowToken;
    const/4 v8, 0x0

    .line 4884
    .local v8, "delayed":Z
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v10

    .line 4885
    .local v10, "origId":J
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v13

    .line 4886
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v0, p1}, Ljava/util/HashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/WindowToken;

    .line 4887
    .local v7, "basewtoken":Lcom/android/server/wm/WindowToken;
    if-eqz v7, :cond_8

    iget-object v1, v7, Lcom/android/server/wm/WindowToken;->appWindowToken:Lcom/android/server/wm/AppWindowToken;

    .local v1, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v1, :cond_8

    .line 4890
    iget-boolean v6, v1, Lcom/android/server/wm/AppWindowToken;->voiceInteraction:Z

    .line 4889
    const/4 v2, 0x0

    const/4 v3, 0x0

    .line 4890
    const/4 v4, -0x1

    const/4 v5, 0x1

    move-object v0, p0

    .line 4889
    invoke-virtual/range {v0 .. v6}, Lcom/android/server/wm/WindowManagerService;->setTokenVisibilityLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;ZIZZ)Z

    move-result v8

    .line 4891
    .local v8, "delayed":Z
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->inPendingTransaction:Z

    .line 4892
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->remove(Ljava/lang/Object;)Z

    .line 4893
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->waitingToShow:Z

    .line 4894
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->contains(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_6

    .line 4895
    const/4 v8, 0x1

    .line 4906
    .end local v8    # "delayed":Z
    :cond_1
    :goto_0
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    iget-object v9, v0, Lcom/android/server/wm/Task;->mStack:Lcom/android/server/wm/TaskStack;

    .line 4907
    .local v9, "stack":Lcom/android/server/wm/TaskStack;
    if-eqz v8, :cond_2

    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowList;->isEmpty()Z

    move-result v0

    if-eqz v0, :cond_7

    .line 4917
    :cond_2
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowAnimator;->clearAnimation()V

    .line 4918
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    const/4 v2, 0x0

    iput-boolean v2, v0, Lcom/android/server/wm/AppWindowAnimator;->animating:Z

    .line 4919
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->removeAppFromTaskLocked()V

    .line 4922
    :goto_1
    const/4 v0, 0x1

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->removed:Z

    .line 4923
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    if-eqz v0, :cond_3

    .line 4924
    move-object v12, v1

    .line 4926
    .end local v12    # "startingToken":Lcom/android/server/wm/AppWindowToken;
    :cond_3
    const/4 v0, 0x1

    const/4 v2, 0x1

    invoke-virtual {p0, v1, v0, v2}, Lcom/android/server/wm/WindowManagerService;->unsetAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;ZZ)V

    .line 4927
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-ne v0, v1, :cond_4

    .line 4929
    const/4 v0, 0x0

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    .line 4930
    const/4 v0, 0x0

    const/4 v2, 0x1

    invoke-virtual {p0, v0, v2}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 4931
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v2, 0x0

    invoke-virtual {v0, v2}, Lcom/android/server/wm/InputMonitor;->setFocusedAppLw(Lcom/android/server/wm/AppWindowToken;)V

    .line 4937
    .end local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    .end local v9    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_4
    :goto_2
    if-nez v8, :cond_5

    if-eqz v1, :cond_5

    .line 4938
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V

    .line 4942
    :cond_5
    invoke-virtual {p0, v12}, Lcom/android/server/wm/WindowManagerService;->scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v13

    .line 4944
    invoke-static {v10, v11}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 4874
    return-void

    .line 4896
    .restart local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    .restart local v8    # "delayed":Z
    .restart local v12    # "startingToken":Lcom/android/server/wm/AppWindowToken;
    :cond_6
    :try_start_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v0

    if-eqz v0, :cond_1

    .line 4897
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 4898
    const/4 v8, 0x1

    .local v8, "delayed":Z
    goto :goto_0

    .line 4911
    .end local v8    # "delayed":Z
    .restart local v9    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_7
    iget-object v0, v9, Lcom/android/server/wm/TaskStack;->mExitingAppTokens:Lcom/android/server/wm/AppTokenList;

    invoke-virtual {v0, v1}, Lcom/android/server/wm/AppTokenList;->add(Ljava/lang/Object;)Z

    .line 4912
    const/4 v0, 0x1

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->mIsExiting:Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto :goto_1

    .line 4885
    .end local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    .end local v7    # "basewtoken":Lcom/android/server/wm/WindowToken;
    .end local v9    # "stack":Lcom/android/server/wm/TaskStack;
    .end local v12    # "startingToken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v0

    monitor-exit v13

    throw v0

    .line 4934
    .restart local v7    # "basewtoken":Lcom/android/server/wm/WindowToken;
    .restart local v8    # "delayed":Z
    .restart local v12    # "startingToken":Lcom/android/server/wm/AppWindowToken;
    :cond_8
    :try_start_2
    const-string/jumbo v0, "WindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Attempted to remove non-existing app token: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v0, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_2
.end method

.method removeInputConsumer()Z
    .locals 4

    .prologue
    const/4 v3, 0x1

    .line 10442
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10443
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    if-eqz v0, :cond_0

    .line 10444
    const/4 v0, 0x0

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    .line 10445
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v2, 0x1

    invoke-virtual {v0, v2}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 10446
    return v3

    .line 10448
    :cond_0
    const/4 v0, 0x0

    monitor-exit v1

    return v0

    .line 10442
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public removeRotationWatcher(Landroid/view/IRotationWatcher;)V
    .locals 8
    .param p1, "watcher"    # Landroid/view/IRotationWatcher;

    .prologue
    .line 7098
    invoke-interface {p1}, Landroid/view/IRotationWatcher;->asBinder()Landroid/os/IBinder;

    move-result-object v4

    .line 7099
    .local v4, "watcherBinder":Landroid/os/IBinder;
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 7100
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    :try_start_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    invoke-virtual {v5}, Ljava/util/ArrayList;->size()I

    move-result v5

    if-ge v1, v5, :cond_2

    .line 7101
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    invoke-virtual {v5, v1}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowManagerService$RotationWatcher;

    .line 7102
    .local v3, "rotationWatcher":Lcom/android/server/wm/WindowManagerService$RotationWatcher;
    iget-object v5, v3, Lcom/android/server/wm/WindowManagerService$RotationWatcher;->watcher:Landroid/view/IRotationWatcher;

    invoke-interface {v5}, Landroid/view/IRotationWatcher;->asBinder()Landroid/os/IBinder;

    move-result-object v5

    if-ne v4, v5, :cond_1

    .line 7103
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    invoke-virtual {v5, v1}, Ljava/util/ArrayList;->remove(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowManagerService$RotationWatcher;

    .line 7104
    .local v2, "removed":Lcom/android/server/wm/WindowManagerService$RotationWatcher;
    iget-object v5, v2, Lcom/android/server/wm/WindowManagerService$RotationWatcher;->watcher:Landroid/view/IRotationWatcher;

    invoke-interface {v5}, Landroid/view/IRotationWatcher;->asBinder()Landroid/os/IBinder;

    move-result-object v0

    .line 7105
    .local v0, "binder":Landroid/os/IBinder;
    if-eqz v0, :cond_0

    .line 7106
    iget-object v5, v2, Lcom/android/server/wm/WindowManagerService$RotationWatcher;->deathRecipient:Landroid/os/IBinder$DeathRecipient;

    const/4 v7, 0x0

    invoke-interface {v0, v5, v7}, Landroid/os/IBinder;->unlinkToDeath(Landroid/os/IBinder$DeathRecipient;I)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7108
    :cond_0
    add-int/lit8 v1, v1, -0x1

    .line 7100
    .end local v0    # "binder":Landroid/os/IBinder;
    .end local v2    # "removed":Lcom/android/server/wm/WindowManagerService$RotationWatcher;
    :cond_1
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .end local v3    # "rotationWatcher":Lcom/android/server/wm/WindowManagerService$RotationWatcher;
    :cond_2
    monitor-exit v6

    .line 7097
    return-void

    .line 7099
    :catchall_0
    move-exception v5

    monitor-exit v6

    throw v5
.end method

.method public removeStack(I)V
    .locals 2
    .param p1, "stackId"    # I

    .prologue
    .line 5247
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 5248
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v0, p1}, Landroid/util/SparseArray;->remove(I)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 5246
    return-void

    .line 5247
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public removeTask(I)V
    .locals 3
    .param p1, "taskId"    # I

    .prologue
    .line 5253
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5254
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5255
    .local v0, "task":Lcom/android/server/wm/Task;
    if-nez v0, :cond_0

    monitor-exit v2

    .line 5257
    return-void

    .line 5259
    :cond_0
    :try_start_1
    invoke-virtual {v0}, Lcom/android/server/wm/Task;->removeLocked()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5252
    return-void

    .line 5253
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public removeWallpaperInputConsumer()V
    .locals 3

    .prologue
    .line 10463
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10464
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    if-eqz v0, :cond_0

    .line 10465
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    invoke-virtual {v0}, Lcom/android/server/wm/InputConsumerImpl;->disposeChannelsLw()V

    .line 10466
    const/4 v0, 0x0

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperInputConsumer:Lcom/android/server/wm/InputConsumerImpl;

    .line 10467
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v2, 0x1

    invoke-virtual {v0, v2}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v1

    .line 10462
    return-void

    .line 10463
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public removeWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;)V
    .locals 3
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;

    .prologue
    .line 2400
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 2401
    const/4 v1, 0x0

    :try_start_0
    invoke-virtual {p0, p1, p2, v1}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 2402
    .local v0, "win":Lcom/android/server/wm/WindowState;
    if-nez v0, :cond_0

    monitor-exit v2

    .line 2403
    return-void

    .line 2405
    :cond_0
    :try_start_1
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->removeWindowLocked(Lcom/android/server/wm/WindowState;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 2399
    return-void

    .line 2400
    .end local v0    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public removeWindowChangeListener(Lcom/android/server/wm/WindowManagerService$WindowChangeListener;)V
    .locals 2
    .param p1, "listener"    # Lcom/android/server/wm/WindowManagerService$WindowChangeListener;

    .prologue
    .line 7469
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 7470
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowChangeListeners:Ljava/util/ArrayList;

    invoke-virtual {v0, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 7468
    return-void

    .line 7469
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method removeWindowInnerLocked(Lcom/android/server/wm/WindowState;)V
    .locals 14
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    const/4 v13, 0x1

    const/4 v12, 0x0

    const/4 v11, 0x0

    .line 2552
    iget-boolean v7, p1, Lcom/android/server/wm/WindowState;->mRemoved:Z

    if-eqz v7, :cond_0

    .line 2556
    return-void

    .line 2559
    :cond_0
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    add-int/lit8 v3, v7, -0x1

    .local v3, "i":I
    :goto_0
    if-ltz v3, :cond_1

    .line 2560
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mChildWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7, v3}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 2561
    .local v1, "cwin":Lcom/android/server/wm/WindowState;
    const-string/jumbo v7, "WindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v9, "Force-removing child win "

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v8

    const-string/jumbo v9, " from container "

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v7, v8}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 2562
    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->removeWindowInnerLocked(Lcom/android/server/wm/WindowState;)V

    .line 2559
    add-int/lit8 v3, v3, -0x1

    goto :goto_0

    .line 2565
    .end local v1    # "cwin":Lcom/android/server/wm/WindowState;
    :cond_1
    iput-boolean v13, p1, Lcom/android/server/wm/WindowState;->mRemoved:Z

    .line 2567
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    if-ne v7, p1, :cond_2

    .line 2568
    invoke-virtual {p0, v12}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodWindowsIfNeededLocked(Z)Z

    .line 2577
    :cond_2
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v5, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    .line 2578
    .local v5, "type":I
    invoke-static {v5}, Lcom/android/server/wm/WindowManagerService;->excludeWindowTypeFromTapOutTask(I)Z

    move-result v7

    if-eqz v7, :cond_3

    .line 2579
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v2

    .line 2580
    .local v2, "displaycontent":Lcom/android/server/wm/DisplayContent;
    iget-object v7, v2, Lcom/android/server/wm/DisplayContent;->mTapExcludedWindows:Ljava/util/ArrayList;

    invoke-virtual {v7, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 2582
    .end local v2    # "displaycontent":Lcom/android/server/wm/DisplayContent;
    :cond_3
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v7, p1}, Landroid/view/WindowManagerPolicy;->removeWindowLw(Landroid/view/WindowManagerPolicy$WindowState;)V

    .line 2583
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->removeLocked()V

    .line 2586
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    iget-object v8, p1, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    invoke-interface {v8}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v8

    invoke-virtual {v7, v8}, Ljava/util/HashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    .line 2587
    iget v7, p1, Lcom/android/server/wm/WindowState;->mAppOp:I

    const/4 v8, -0x1

    if-eq v7, v8, :cond_4

    .line 2588
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    iget v8, p1, Lcom/android/server/wm/WindowState;->mAppOp:I

    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getOwningUid()I

    move-result v9

    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getOwningPackage()Ljava/lang/String;

    move-result-object v10

    invoke-virtual {v7, v8, v9, v10}, Landroid/app/AppOpsManager;->finishOp(IILjava/lang/String;)V

    .line 2591
    :cond_4
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mPendingRemove:Ljava/util/ArrayList;

    invoke-virtual {v7, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 2592
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v7, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 2593
    invoke-virtual {p0, p1, v12}, Lcom/android/server/wm/WindowManagerService;->updateNonSystemOverlayWindowsVisibilityIfNeeded(Lcom/android/server/wm/WindowState;Z)V

    .line 2594
    iput-boolean v13, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsChanged:Z

    .line 2597
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-ne v7, p1, :cond_b

    .line 2598
    iput-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    .line 2603
    :cond_5
    :goto_1
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mToken:Lcom/android/server/wm/WindowToken;

    .line 2604
    .local v4, "token":Lcom/android/server/wm/WindowToken;
    iget-object v0, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 2606
    .local v0, "atoken":Lcom/android/server/wm/AppWindowToken;
    iget-object v7, v4, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7, p1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 2607
    if-eqz v0, :cond_6

    .line 2608
    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7, p1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 2613
    :cond_6
    iget-object v7, v4, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    if-nez v7, :cond_7

    .line 2614
    iget-boolean v7, v4, Lcom/android/server/wm/WindowToken;->explicit:Z

    if-nez v7, :cond_c

    .line 2615
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    iget-object v8, v4, Lcom/android/server/wm/WindowToken;->token:Landroid/os/IBinder;

    invoke-virtual {v7, v8}, Ljava/util/HashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    .line 2622
    :cond_7
    :goto_2
    if-eqz v0, :cond_8

    .line 2623
    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    if-ne v7, p1, :cond_d

    .line 2625
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V

    .line 2639
    :cond_8
    :goto_3
    const/16 v7, 0x7dd

    if-ne v5, v7, :cond_f

    .line 2640
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v7}, Lcom/android/server/wm/WallpaperController;->clearLastWallpaperTimeoutTime()V

    .line 2641
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v7

    iget v8, v7, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v8, v8, 0x4

    iput v8, v7, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    .line 2648
    :cond_9
    :goto_4
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v6

    .line 2649
    .local v6, "windows":Lcom/android/server/wm/WindowList;
    if-eqz v6, :cond_a

    .line 2650
    invoke-virtual {v6, p1}, Lcom/android/server/wm/WindowList;->remove(Ljava/lang/Object;)Z

    .line 2651
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowSurfacePlacer;->isInLayout()Z

    move-result v7

    if-nez v7, :cond_a

    .line 2652
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {v7, v6}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    .line 2653
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 2654
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 2655
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v7, :cond_a

    .line 2656
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {v7}, Lcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V

    .line 2661
    :cond_a
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v7, v13}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 2551
    return-void

    .line 2599
    .end local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .end local v4    # "token":Lcom/android/server/wm/WindowToken;
    .end local v6    # "windows":Lcom/android/server/wm/WindowList;
    :cond_b
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v8, 0x7dc

    if-ne v7, v8, :cond_5

    .line 2600
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodDialogs:Ljava/util/ArrayList;

    invoke-virtual {v7, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    goto :goto_1

    .line 2616
    .restart local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .restart local v4    # "token":Lcom/android/server/wm/WindowToken;
    :cond_c
    if-eqz v0, :cond_7

    .line 2617
    iput-boolean v12, v0, Lcom/android/server/wm/AppWindowToken;->firstWindowDrawn:Z

    .line 2618
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->clearAllDrawn()V

    goto :goto_2

    .line 2627
    :cond_d
    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    if-nez v7, :cond_e

    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    if-eqz v7, :cond_e

    .line 2631
    iput-object v11, v0, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    goto :goto_3

    .line 2632
    :cond_e
    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    if-ne v7, v13, :cond_8

    iget-object v7, v0, Lcom/android/server/wm/AppWindowToken;->startingView:Landroid/view/View;

    if-eqz v7, :cond_8

    .line 2635
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V

    goto :goto_3

    .line 2643
    :cond_f
    iget-object v7, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->flags:I

    const/high16 v8, 0x100000

    and-int/2addr v7, v8

    if-eqz v7, :cond_9

    .line 2644
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v7

    iget v8, v7, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    or-int/lit8 v8, v8, 0x4

    iput v8, v7, Lcom/android/server/wm/DisplayContent;->pendingLayoutChanges:I

    goto :goto_4
.end method

.method removeWindowLocked(Lcom/android/server/wm/WindowState;)V
    .locals 1
    .param p1, "win"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 2410
    const/4 v0, 0x0

    invoke-virtual {p0, p1, v0}, Lcom/android/server/wm/WindowManagerService;->removeWindowLocked(Lcom/android/server/wm/WindowState;Z)V

    .line 2409
    return-void
.end method

.method removeWindowLocked(Lcom/android/server/wm/WindowState;Z)V
    .locals 11
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "keepVisibleDeadWindow"    # Z

    .prologue
    .line 2414
    const/4 v9, 0x1

    iput-boolean v9, p1, Lcom/android/server/wm/WindowState;->mWindowRemovalAllowed:Z

    .line 2418
    iget-object v9, p1, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v9, v9, Landroid/view/WindowManager$LayoutParams;->type:I

    const/4 v10, 0x3

    if-ne v9, v10, :cond_1

    const/4 v3, 0x1

    .line 2419
    .local v3, "startingWindow":Z
    :goto_0
    if-eqz v3, :cond_0

    .line 2429
    :cond_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v4

    .line 2431
    .local v4, "origId":J
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->disposeInputChannel()V

    .line 2448
    const/4 v7, 0x0

    .line 2452
    .local v7, "wasVisible":Z
    iget-boolean v9, p1, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v9, :cond_f

    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z

    move-result v9

    if-eqz v9, :cond_f

    .line 2453
    iget-object v0, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 2454
    .local v0, "appToken":Lcom/android/server/wm/AppWindowToken;
    iget-boolean v9, p1, Lcom/android/server/wm/WindowState;->mWillReplaceWindow:Z

    if-eqz v9, :cond_2

    .line 2463
    const/4 v9, 0x1

    iput-boolean v9, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 2464
    const/4 v9, 0x1

    iput-boolean v9, p1, Lcom/android/server/wm/WindowState;->mReplacingRemoveRequested:Z

    .line 2465
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2466
    return-void

    .line 2418
    .end local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .end local v3    # "startingWindow":Z
    .end local v4    # "origId":J
    .end local v7    # "wasVisible":Z
    :cond_1
    const/4 v3, 0x0

    goto :goto_0

    .line 2469
    .restart local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .restart local v3    # "startingWindow":Z
    .restart local v4    # "origId":J
    .restart local v7    # "wasVisible":Z
    :cond_2
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isAnimatingWithSavedSurface()Z

    move-result v9

    if-eqz v9, :cond_3

    iget-boolean v9, v0, Lcom/android/server/wm/AppWindowToken;->allDrawnExcludingSaved:Z

    if-eqz v9, :cond_4

    .line 2485
    :cond_3
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isWinVisibleLw()Z

    move-result v7

    .line 2487
    .local v7, "wasVisible":Z
    if-eqz p2, :cond_5

    .line 2491
    const/4 v9, 0x1

    iput-boolean v9, p1, Lcom/android/server/wm/WindowState;->mAppDied:Z

    .line 2492
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 2493
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 2497
    const/4 v9, 0x0

    invoke-virtual {p1, v9}, Lcom/android/server/wm/WindowState;->openInputChannel(Landroid/view/InputChannel;)V

    .line 2498
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v10, 0x1

    invoke-virtual {v9, v10}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 2500
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2501
    return-void

    .line 2480
    .local v7, "wasVisible":Z
    :cond_4
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->setupWindowForRemoveOnExit(Lcom/android/server/wm/WindowState;)V

    .line 2481
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2482
    return-void

    .line 2504
    .local v7, "wasVisible":Z
    :cond_5
    iget-object v8, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .line 2505
    .local v8, "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    if-eqz v7, :cond_7

    .line 2506
    if-nez v3, :cond_b

    const/4 v6, 0x2

    .line 2509
    .local v6, "transit":I
    :goto_1
    const/4 v9, 0x0

    invoke-virtual {v8, v6, v9}, Lcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z

    move-result v9

    if-eqz v9, :cond_6

    .line 2510
    const/4 v9, 0x1

    iput-boolean v9, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 2513
    :cond_6
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v9, :cond_7

    .line 2514
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v9

    if-nez v9, :cond_7

    .line 2515
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    invoke-virtual {v9, p1, v6}, Lcom/android/server/wm/AccessibilityController;->onWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 2519
    .end local v6    # "transit":I
    :cond_7
    invoke-virtual {v8}, Lcom/android/server/wm/WindowStateAnimator;->isAnimationSet()Z

    move-result v9

    if-eqz v9, :cond_8

    invoke-virtual {v8}, Lcom/android/server/wm/WindowStateAnimator;->isDummyAnimation()Z

    move-result v9

    if-eqz v9, :cond_c

    :cond_8
    const/4 v1, 0x0

    .line 2520
    .local v1, "isAnimating":Z
    :goto_2
    if-eqz v3, :cond_e

    if-eqz v0, :cond_e

    .line 2521
    iget-object v9, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowList;->size()I

    move-result v9

    const/4 v10, 0x1

    if-ne v9, v10, :cond_d

    const/4 v2, 0x1

    .line 2527
    .local v2, "lastWindowIsStartingWindow":Z
    :goto_3
    invoke-virtual {v8}, Lcom/android/server/wm/WindowStateAnimator;->getShown()Z

    move-result v9

    if-eqz v9, :cond_f

    iget-boolean v9, p1, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    if-eqz v9, :cond_f

    .line 2528
    if-eqz v2, :cond_9

    .line 2527
    if-eqz v1, :cond_f

    .line 2532
    :cond_9
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->setupWindowForRemoveOnExit(Lcom/android/server/wm/WindowState;)V

    .line 2533
    if-eqz v0, :cond_a

    .line 2534
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V

    .line 2536
    :cond_a
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2537
    return-void

    .line 2506
    .end local v1    # "isAnimating":Z
    .end local v2    # "lastWindowIsStartingWindow":Z
    :cond_b
    const/4 v6, 0x5

    goto :goto_1

    .line 2519
    :cond_c
    const/4 v1, 0x1

    .restart local v1    # "isAnimating":Z
    goto :goto_2

    .line 2521
    :cond_d
    const/4 v2, 0x0

    .restart local v2    # "lastWindowIsStartingWindow":Z
    goto :goto_3

    .line 2520
    .end local v2    # "lastWindowIsStartingWindow":Z
    :cond_e
    const/4 v2, 0x0

    .restart local v2    # "lastWindowIsStartingWindow":Z
    goto :goto_3

    .line 2541
    .end local v0    # "appToken":Lcom/android/server/wm/AppWindowToken;
    .end local v1    # "isAnimating":Z
    .end local v2    # "lastWindowIsStartingWindow":Z
    .end local v7    # "wasVisible":Z
    .end local v8    # "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    :cond_f
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->removeWindowInnerLocked(Lcom/android/server/wm/WindowState;)V

    .line 2544
    if-eqz v7, :cond_10

    const/4 v9, 0x0

    invoke-virtual {p0, v9}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z

    move-result v9

    if-eqz v9, :cond_10

    .line 2545
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v10, 0x12

    invoke-virtual {v9, v10}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 2547
    :cond_10
    const/4 v9, 0x0

    const/4 v10, 0x1

    invoke-virtual {p0, v9, v10}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 2548
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2413
    return-void
.end method

.method public removeWindowToken(Landroid/os/IBinder;)V
    .locals 14
    .param p1, "token"    # Landroid/os/IBinder;

    .prologue
    const/16 v13, 0x7dd

    .line 3465
    const-string/jumbo v9, "android.permission.MANAGE_APP_TOKENS"

    .line 3466
    const-string/jumbo v10, "removeWindowToken()"

    .line 3465
    invoke-direct {p0, v9, v10}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v9

    if-nez v9, :cond_0

    .line 3467
    new-instance v9, Ljava/lang/SecurityException;

    const-string/jumbo v10, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v9, v10}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v9

    .line 3470
    :cond_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v6

    .line 3471
    .local v6, "origId":J
    iget-object v10, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v10

    .line 3472
    const/4 v3, 0x0

    .line 3473
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    :try_start_0
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v9, p1}, Ljava/util/HashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/WindowToken;

    .line 3474
    .local v8, "wtoken":Lcom/android/server/wm/WindowToken;
    if-eqz v8, :cond_9

    .line 3475
    const/4 v2, 0x0

    .line 3476
    .local v2, "delayed":Z
    iget-boolean v9, v8, Lcom/android/server/wm/WindowToken;->hidden:Z

    if-nez v9, :cond_8

    .line 3477
    iget-object v9, v8, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 3478
    .local v0, "N":I
    const/4 v1, 0x0

    .line 3480
    .local v1, "changed":Z
    const/4 v4, 0x0

    .end local v3    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .local v4, "i":I
    :goto_0
    if-ge v4, v0, :cond_4

    .line 3481
    iget-object v9, v8, Lcom/android/server/wm/WindowToken;->windows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v9, v4}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/WindowState;

    .line 3482
    .local v5, "win":Lcom/android/server/wm/WindowState;
    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 3484
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    iget-object v9, v5, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowStateAnimator;->isAnimationSet()Z

    move-result v9

    if-eqz v9, :cond_1

    .line 3485
    const/4 v2, 0x1

    .line 3488
    :cond_1
    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v9

    if-eqz v9, :cond_3

    .line 3489
    iget-object v9, v5, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    const/4 v11, 0x2

    .line 3490
    const/4 v12, 0x0

    .line 3489
    invoke-virtual {v9, v11, v12}, Lcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z

    .line 3492
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v9, :cond_2

    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->isDefaultDisplay()Z

    move-result v9

    if-eqz v9, :cond_2

    .line 3493
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    .line 3494
    const/4 v11, 0x2

    .line 3493
    invoke-virtual {v9, v5, v11}, Lcom/android/server/wm/AccessibilityController;->onWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 3496
    :cond_2
    const/4 v1, 0x1

    .line 3497
    if-eqz v3, :cond_3

    .line 3498
    const/4 v9, 0x1

    iput-boolean v9, v3, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 3480
    :cond_3
    add-int/lit8 v4, v4, 0x1

    goto :goto_0

    .line 3503
    .end local v3    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v5    # "win":Lcom/android/server/wm/WindowState;
    :cond_4
    const/4 v9, 0x1

    iput-boolean v9, v8, Lcom/android/server/wm/WindowToken;->hidden:Z

    .line 3505
    if-eqz v1, :cond_5

    .line 3506
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v9}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 3507
    const/4 v9, 0x0

    .line 3508
    const/4 v11, 0x0

    .line 3507
    invoke-virtual {p0, v9, v11}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 3511
    :cond_5
    if-eqz v2, :cond_7

    if-eqz v3, :cond_7

    .line 3512
    iget-object v9, v3, Lcom/android/server/wm/DisplayContent;->mExitingTokens:Ljava/util/ArrayList;

    invoke-virtual {v9, v8}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 3520
    .end local v0    # "N":I
    .end local v1    # "changed":Z
    .end local v4    # "i":I
    :cond_6
    :goto_1
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v11, 0x1

    invoke-virtual {v9, v11}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .end local v2    # "delayed":Z
    :goto_2
    monitor-exit v10

    .line 3525
    invoke-static {v6, v7}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3464
    return-void

    .line 3513
    .restart local v0    # "N":I
    .restart local v1    # "changed":Z
    .restart local v2    # "delayed":Z
    .restart local v4    # "i":I
    :cond_7
    :try_start_1
    iget v9, v8, Lcom/android/server/wm/WindowToken;->windowType:I

    if-ne v9, v13, :cond_6

    .line 3514
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v9, v8}, Lcom/android/server/wm/WallpaperController;->removeWallpaperToken(Lcom/android/server/wm/WindowToken;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto :goto_1

    .line 3471
    .end local v0    # "N":I
    .end local v1    # "changed":Z
    .end local v2    # "delayed":Z
    .end local v4    # "i":I
    .end local v8    # "wtoken":Lcom/android/server/wm/WindowToken;
    :catchall_0
    move-exception v9

    monitor-exit v10

    throw v9

    .line 3516
    .restart local v2    # "delayed":Z
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    .restart local v8    # "wtoken":Lcom/android/server/wm/WindowToken;
    :cond_8
    :try_start_2
    iget v9, v8, Lcom/android/server/wm/WindowToken;->windowType:I

    if-ne v9, v13, :cond_6

    .line 3517
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v9, v8}, Lcom/android/server/wm/WallpaperController;->removeWallpaperToken(Lcom/android/server/wm/WindowToken;)V

    goto :goto_1

    .line 3522
    .end local v2    # "delayed":Z
    :cond_9
    const-string/jumbo v9, "WindowManager"

    new-instance v11, Ljava/lang/StringBuilder;

    invoke-direct {v11}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v12, "Attempted to remove non-existing token: "

    invoke-virtual {v11, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v11

    invoke-virtual {v11}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v11

    invoke-static {v9, v11}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_2
.end method

.method repositionChild(Lcom/android/server/wm/Session;Landroid/view/IWindow;IIIIJLandroid/graphics/Rect;)V
    .locals 11
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "left"    # I
    .param p4, "top"    # I
    .param p5, "right"    # I
    .param p6, "bottom"    # I
    .param p7, "frameNumber"    # J
    .param p9, "outFrame"    # Landroid/graphics/Rect;

    .prologue
    .line 2797
    const-string/jumbo v5, "repositionChild"

    const-wide/16 v6, 0x20

    invoke-static {v6, v7, v5}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 2798
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 2801
    .local v2, "origId":J
    :try_start_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 2802
    const/4 v5, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v5}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result-object v4

    .line 2803
    .local v4, "win":Lcom/android/server/wm/WindowState;
    if-nez v4, :cond_0

    :try_start_2
    monitor-exit v6
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 2847
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2848
    const-wide/16 v6, 0x20

    invoke-static {v6, v7}, Landroid/os/Trace;->traceEnd(J)V

    .line 2804
    return-void

    .line 2806
    :cond_0
    :try_start_3
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mAttachedWindow:Lcom/android/server/wm/WindowState;

    if-nez v5, :cond_1

    .line 2807
    new-instance v5, Ljava/lang/IllegalArgumentException;

    .line 2808
    new-instance v7, Ljava/lang/StringBuilder;

    invoke-direct {v7}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v8, "repositionChild called but window is notattached to a parent win="

    invoke-virtual {v7, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v7

    .line 2807
    invoke-direct {v5, v7}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v5
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 2801
    .end local v4    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v5

    :try_start_4
    monitor-exit v6

    throw v5
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 2846
    :catchall_1
    move-exception v5

    .line 2847
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2848
    const-wide/16 v6, 0x20

    invoke-static {v6, v7}, Landroid/os/Trace;->traceEnd(J)V

    .line 2846
    throw v5

    .line 2812
    .restart local v4    # "win":Lcom/android/server/wm/WindowState;
    :cond_1
    :try_start_5
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iput p3, v5, Landroid/view/WindowManager$LayoutParams;->x:I

    .line 2813
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iput p4, v5, Landroid/view/WindowManager$LayoutParams;->y:I

    .line 2814
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    sub-int v7, p5, p3

    iput v7, v5, Landroid/view/WindowManager$LayoutParams;->width:I

    .line 2815
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    sub-int v7, p6, p4

    iput v7, v5, Landroid/view/WindowManager$LayoutParams;->height:I

    .line 2816
    iget v5, v4, Lcom/android/server/wm/WindowState;->mRequestedWidth:I

    iget v7, v4, Lcom/android/server/wm/WindowState;->mRequestedHeight:I

    invoke-virtual {v4, v5, v7}, Lcom/android/server/wm/WindowState;->setWindowScale(II)V

    .line 2818
    iget-boolean v5, v4, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v5, :cond_3

    .line 2823
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_0

    .line 2827
    :try_start_6
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mContainingFrame:Landroid/graphics/Rect;

    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mDisplayFrame:Landroid/graphics/Rect;

    invoke-virtual {v4, v5, v7}, Lcom/android/server/wm/WindowState;->applyGravityAndUpdateFrame(Landroid/graphics/Rect;Landroid/graphics/Rect;)V

    .line 2828
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowStateAnimator;->computeShownFrameLocked()V

    .line 2830
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    const/4 v7, 0x0

    invoke-virtual {v5, v7}, Lcom/android/server/wm/WindowStateAnimator;->setSurfaceBoundariesLocked(Z)V

    .line 2832
    const-wide/16 v8, 0x0

    cmp-long v5, p7, v8

    if-lez v5, :cond_2

    .line 2833
    iget-object v5, v4, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-wide/from16 v0, p7

    invoke-virtual {v5, v0, v1}, Lcom/android/server/wm/WindowStateAnimator;->deferTransactionUntilParentFrame(J)V
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_2

    .line 2837
    :cond_2
    :try_start_7
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 2844
    :cond_3
    iget-object v0, v4, Lcom/android/server/wm/WindowState;->mCompatFrame:Landroid/graphics/Rect;

    move-object/from16 p9, v0
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_0

    :try_start_8
    monitor-exit v6
    :try_end_8
    .catchall {:try_start_8 .. :try_end_8} :catchall_1

    .line 2847
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2848
    const-wide/16 v6, 0x20

    invoke-static {v6, v7}, Landroid/os/Trace;->traceEnd(J)V

    .line 2796
    return-void

    .line 2836
    :catchall_2
    move-exception v5

    .line 2837
    :try_start_9
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 2836
    throw v5
    :try_end_9
    .catchall {:try_start_9 .. :try_end_9} :catchall_0
.end method

.method public requestAppKeyboardShortcuts(Lcom/android/internal/os/IResultReceiver;I)V
    .locals 3
    .param p1, "receiver"    # Lcom/android/internal/os/IResultReceiver;
    .param p2, "deviceId"    # I

    .prologue
    .line 11409
    :try_start_0
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindow()Lcom/android/server/wm/WindowState;

    move-result-object v1

    .line 11410
    .local v1, "focusedWindow":Lcom/android/server/wm/WindowState;
    if-eqz v1, :cond_0

    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    if-eqz v2, :cond_0

    .line 11411
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindow()Lcom/android/server/wm/WindowState;

    move-result-object v2

    iget-object v2, v2, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    invoke-interface {v2, p1, p2}, Landroid/view/IWindow;->requestAppKeyboardShortcuts(Lcom/android/internal/os/IResultReceiver;I)V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 11407
    .end local v1    # "focusedWindow":Lcom/android/server/wm/WindowState;
    :cond_0
    :goto_0
    return-void

    .line 11413
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method public requestAssistScreenshot(Lcom/android/internal/app/IAssistScreenshotReceiver;)Z
    .locals 2
    .param p1, "receiver"    # Lcom/android/internal/app/IAssistScreenshotReceiver;

    .prologue
    .line 6395
    const-string/jumbo v0, "android.permission.READ_FRAME_BUFFER"

    .line 6396
    const-string/jumbo v1, "requestAssistScreenshot()"

    .line 6395
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 6397
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires READ_FRAME_BUFFER permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 6400
    :cond_0
    invoke-static {}, Lcom/android/server/FgThread;->getHandler()Landroid/os/Handler;

    move-result-object v0

    new-instance v1, Lcom/android/server/wm/WindowManagerService$8;

    invoke-direct {v1, p0, p1}, Lcom/android/server/wm/WindowManagerService$8;-><init>(Lcom/android/server/wm/WindowManagerService;Lcom/android/internal/app/IAssistScreenshotReceiver;)V

    invoke-virtual {v0, v1}, Landroid/os/Handler;->post(Ljava/lang/Runnable;)Z

    .line 6412
    const/4 v0, 0x1

    return v0
.end method

.method requestTraversal()V
    .locals 2

    .prologue
    .line 9818
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 9819
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 9817
    return-void

    .line 9818
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public resizeStack(ILandroid/graphics/Rect;Landroid/util/SparseArray;Landroid/util/SparseArray;Landroid/util/SparseArray;)Z
    .locals 5
    .param p1, "stackId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(I",
            "Landroid/graphics/Rect;",
            "Landroid/util/SparseArray",
            "<",
            "Landroid/content/res/Configuration;",
            ">;",
            "Landroid/util/SparseArray",
            "<",
            "Landroid/graphics/Rect;",
            ">;",
            "Landroid/util/SparseArray",
            "<",
            "Landroid/graphics/Rect;",
            ">;)Z"
        }
    .end annotation

    .prologue
    .line 5360
    .local p3, "configs":Landroid/util/SparseArray;, "Landroid/util/SparseArray<Landroid/content/res/Configuration;>;"
    .local p4, "taskBounds":Landroid/util/SparseArray;, "Landroid/util/SparseArray<Landroid/graphics/Rect;>;"
    .local p5, "taskTempInsetBounds":Landroid/util/SparseArray;, "Landroid/util/SparseArray<Landroid/graphics/Rect;>;"
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5361
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/TaskStack;

    .line 5362
    .local v0, "stack":Lcom/android/server/wm/TaskStack;
    if-nez v0, :cond_0

    .line 5363
    new-instance v1, Ljava/lang/IllegalArgumentException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "resizeStack: stackId "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5364
    const-string/jumbo v4, " not found."

    .line 5363
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5360
    .end local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1

    .line 5366
    .restart local v0    # "stack":Lcom/android/server/wm/TaskStack;
    :cond_0
    :try_start_1
    invoke-virtual {v0, p2, p3, p4, p5}, Lcom/android/server/wm/TaskStack;->setBounds(Landroid/graphics/Rect;Landroid/util/SparseArray;Landroid/util/SparseArray;Landroid/util/SparseArray;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 5367
    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->isVisibleLocked()Z

    move-result v1

    .line 5366
    if-eqz v1, :cond_1

    .line 5368
    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    const/4 v3, 0x1

    iput-boolean v3, v1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5369
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 5371
    :cond_1
    invoke-virtual {v0}, Lcom/android/server/wm/TaskStack;->getRawFullscreen()Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v1

    monitor-exit v2

    return v1
.end method

.method public resizeTask(ILandroid/graphics/Rect;Landroid/content/res/Configuration;ZZ)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;
    .param p3, "configuration"    # Landroid/content/res/Configuration;
    .param p4, "relayout"    # Z
    .param p5, "forced"    # Z

    .prologue
    .line 5417
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5418
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5419
    .local v0, "task":Lcom/android/server/wm/Task;
    if-nez v0, :cond_0

    .line 5420
    new-instance v1, Ljava/lang/IllegalArgumentException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "resizeTask: taskId "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5421
    const-string/jumbo v4, " not found."

    .line 5420
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5417
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1

    .line 5424
    .restart local v0    # "task":Lcom/android/server/wm/Task;
    :cond_0
    :try_start_1
    invoke-virtual {v0, p2, p3, p5}, Lcom/android/server/wm/Task;->resizeLocked(Landroid/graphics/Rect;Landroid/content/res/Configuration;Z)Z

    move-result v1

    if-eqz v1, :cond_1

    if-eqz p4, :cond_1

    .line 5425
    invoke-virtual {v0}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    const/4 v3, 0x1

    iput-boolean v3, v1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5426
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    monitor-exit v2

    .line 5416
    return-void
.end method

.method restorePointerIconLocked(Lcom/android/server/wm/DisplayContent;FF)V
    .locals 5
    .param p1, "displayContent"    # Lcom/android/server/wm/DisplayContent;
    .param p2, "latestX"    # F
    .param p3, "latestY"    # F

    .prologue
    .line 11554
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-virtual {v2, p2, p3}, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;->updatePosition(FF)V

    .line 11557
    invoke-virtual {p1, p2, p3}, Lcom/android/server/wm/DisplayContent;->getTouchableWinAtPointLocked(FF)Lcom/android/server/wm/WindowState;

    move-result-object v1

    .line 11558
    .local v1, "windowUnderPointer":Lcom/android/server/wm/WindowState;
    if-eqz v1, :cond_0

    .line 11560
    :try_start_0
    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    .line 11561
    invoke-virtual {v1, p2}, Lcom/android/server/wm/WindowState;->translateToWindowX(F)F

    move-result v3

    .line 11562
    invoke-virtual {v1, p3}, Lcom/android/server/wm/WindowState;->translateToWindowY(F)F

    move-result v4

    .line 11560
    invoke-interface {v2, v3, v4}, Landroid/view/IWindow;->updatePointerIcon(FF)V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 11552
    :goto_0
    return-void

    .line 11563
    :catch_0
    move-exception v0

    .line 11564
    .local v0, "e":Landroid/os/RemoteException;
    const-string/jumbo v2, "WindowManager"

    const-string/jumbo v3, "unable to restore pointer icon"

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    .line 11567
    .end local v0    # "e":Landroid/os/RemoteException;
    :cond_0
    invoke-static {}, Landroid/hardware/input/InputManager;->getInstance()Landroid/hardware/input/InputManager;

    move-result-object v2

    const/16 v3, 0x3e8

    invoke-virtual {v2, v3}, Landroid/hardware/input/InputManager;->setPointerIconType(I)V

    goto :goto_0
.end method

.method public resumeKeyDispatching(Landroid/os/IBinder;)V
    .locals 3
    .param p1, "_token"    # Landroid/os/IBinder;

    .prologue
    .line 8082
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 8083
    const-string/jumbo v2, "resumeKeyDispatching()"

    .line 8082
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 8084
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 8087
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 8088
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTokenMap:Ljava/util/HashMap;

    invoke-virtual {v1, p1}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/WindowToken;

    .line 8089
    .local v0, "token":Lcom/android/server/wm/WindowToken;
    if-eqz v0, :cond_1

    .line 8090
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v1, v0}, Lcom/android/server/wm/InputMonitor;->resumeDispatchingLw(Lcom/android/server/wm/WindowToken;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1
    monitor-exit v2

    .line 8081
    return-void

    .line 8087
    .end local v0    # "token":Lcom/android/server/wm/WindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method resumeRotationLocked()V
    .locals 3

    .prologue
    const/4 v2, 0x0

    .line 6808
    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    if-lez v1, :cond_0

    .line 6809
    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    add-int/lit8 v1, v1, -0x1

    iput v1, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    .line 6810
    iget v1, p0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    if-nez v1, :cond_0

    .line 6811
    invoke-virtual {p0, v2}, Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked(Z)Z

    move-result v0

    .line 6812
    .local v0, "changed":Z
    if-eqz v0, :cond_0

    .line 6813
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x12

    invoke-virtual {v1, v2}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 6807
    .end local v0    # "changed":Z
    :cond_0
    return-void
.end method

.method rotationNeedsUpdateLocked()Z
    .locals 5

    .prologue
    .line 3891
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    iget v4, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-interface {v2, v3, v4}, Landroid/view/WindowManagerPolicy;->rotationForOrientationLw(II)I

    move-result v1

    .line 3892
    .local v1, "rotation":I
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 3893
    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    .line 3892
    invoke-interface {v2, v3, v1}, Landroid/view/WindowManagerPolicy;->rotationHasCompatibleMetricsLw(II)Z

    move-result v2

    if-eqz v2, :cond_0

    const/4 v0, 0x0

    .line 3894
    .local v0, "altOrientation":Z
    :goto_0
    iget v2, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    if-ne v2, v1, :cond_1

    iget-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    if-ne v2, v0, :cond_1

    .line 3895
    const/4 v2, 0x0

    return v2

    .line 3892
    .end local v0    # "altOrientation":Z
    :cond_0
    const/4 v0, 0x1

    .restart local v0    # "altOrientation":Z
    goto :goto_0

    .line 3897
    :cond_1
    const/4 v2, 0x1

    return v2
.end method

.method public saveANRStateLocked(Lcom/android/server/wm/AppWindowToken;Lcom/android/server/wm/WindowState;Ljava/lang/String;)V
    .locals 8
    .param p1, "appWindowToken"    # Lcom/android/server/wm/AppWindowToken;
    .param p2, "windowState"    # Lcom/android/server/wm/WindowState;
    .param p3, "reason"    # Ljava/lang/String;

    .prologue
    const/16 v7, 0x26

    const/4 v6, 0x1

    const/4 v5, 0x0

    .line 10922
    new-instance v1, Ljava/io/StringWriter;

    invoke-direct {v1}, Ljava/io/StringWriter;-><init>()V

    .line 10923
    .local v1, "sw":Ljava/io/StringWriter;
    new-instance v0, Lcom/android/internal/util/FastPrintWriter;

    const/4 v2, 0x0

    const/16 v3, 0x400

    invoke-direct {v0, v1, v2, v3}, Lcom/android/internal/util/FastPrintWriter;-><init>(Ljava/io/Writer;ZI)V

    .line 10924
    .local v0, "pw":Ljava/io/PrintWriter;
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "  ANR time: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-static {}, Ljava/text/DateFormat;->getInstance()Ljava/text/DateFormat;

    move-result-object v3

    new-instance v4, Ljava/util/Date;

    invoke-direct {v4}, Ljava/util/Date;-><init>()V

    invoke-virtual {v3, v4}, Ljava/text/DateFormat;->format(Ljava/util/Date;)Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v0, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10925
    if-eqz p1, :cond_0

    .line 10926
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "  Application at fault: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    iget-object v3, p1, Lcom/android/server/wm/AppWindowToken;->stringName:Ljava/lang/String;

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v0, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10928
    :cond_0
    if-eqz p2, :cond_1

    .line 10929
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "  Window at fault: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    iget-object v3, p2, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-virtual {v3}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v3

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v0, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10931
    :cond_1
    if-eqz p3, :cond_2

    .line 10932
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "  Reason: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-virtual {v0, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10934
    :cond_2
    invoke-virtual {v0}, Ljava/io/PrintWriter;->println()V

    .line 10935
    invoke-virtual {p0, v0, v6, v5}, Lcom/android/server/wm/WindowManagerService;->dumpWindowsNoHeaderLocked(Ljava/io/PrintWriter;ZLjava/util/ArrayList;)V

    .line 10936
    invoke-virtual {v0}, Ljava/io/PrintWriter;->println()V

    .line 10937
    const-string/jumbo v2, "Last ANR continued"

    invoke-virtual {v0, v2}, Ljava/io/PrintWriter;->println(Ljava/lang/String;)V

    .line 10938
    invoke-virtual {p0, v0, v6}, Lcom/android/server/wm/WindowManagerService;->dumpDisplayContentsLocked(Ljava/io/PrintWriter;Z)V

    .line 10939
    invoke-virtual {v0}, Ljava/io/PrintWriter;->close()V

    .line 10940
    invoke-virtual {v1}, Ljava/io/StringWriter;->toString()Ljava/lang/String;

    move-result-object v2

    iput-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastANRState:Ljava/lang/String;

    .line 10942
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v2, v7}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 10943
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/32 v4, 0x6ddd00

    invoke-virtual {v2, v7, v4, v5}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 10921
    return-void
.end method

.method scheduleAnimationLocked()V
    .locals 2

    .prologue
    .line 9825
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationScheduled:Z

    if-nez v0, :cond_0

    .line 9826
    const/4 v0, 0x1

    iput-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimationScheduled:Z

    .line 9827
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mChoreographer:Landroid/view/Choreographer;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    iget-object v1, v1, Lcom/android/server/wm/WindowAnimator;->mAnimationFrameCallback:Landroid/view/Choreographer$FrameCallback;

    invoke-virtual {v0, v1}, Landroid/view/Choreographer;->postFrameCallback(Landroid/view/Choreographer$FrameCallback;)V

    .line 9824
    :cond_0
    return-void
.end method

.method public scheduleClearReplacingWindowIfNeeded(Landroid/os/IBinder;Z)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "replacing"    # Z

    .prologue
    .line 11298
    const/4 v0, 0x0

    .line 11299
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11300
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 11301
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    if-nez v0, :cond_0

    .line 11302
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to reset replacing window on non-existing app token "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11304
    return-void

    .line 11306
    :cond_0
    if-eqz p2, :cond_1

    .line 11307
    :try_start_1
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->scheduleReplacingWindowTimeouts(Lcom/android/server/wm/AppWindowToken;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :goto_0
    monitor-exit v2

    .line 11297
    return-void

    .line 11309
    :cond_1
    :try_start_2
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->resetReplacingWindows()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_0

    .line 11299
    .end local v0    # "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method scheduleRemoveStartingWindowLocked(Lcom/android/server/wm/AppWindowToken;)V
    .locals 4
    .param p1, "wtoken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/4 v3, 0x6

    const/4 v2, 0x0

    .line 4949
    if-nez p1, :cond_0

    .line 4950
    return-void

    .line 4952
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v1, v3, p1}, Lcom/android/server/wm/WindowManagerService$H;->hasMessages(ILjava/lang/Object;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 4954
    return-void

    .line 4957
    :cond_1
    iget-object v1, p1, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    if-nez v1, :cond_3

    .line 4958
    iget-object v1, p1, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    if-eqz v1, :cond_2

    .line 4963
    iput-object v2, p1, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4965
    :cond_2
    return-void

    .line 4971
    :cond_3
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v1, v3, p1}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v0

    .line 4972
    .local v0, "m":Landroid/os/Message;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v1, v0}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 4948
    return-void
.end method

.method scheduleReplacingWindowTimeouts(Lcom/android/server/wm/AppWindowToken;)V
    .locals 4
    .param p1, "appWindowToken"    # Lcom/android/server/wm/AppWindowToken;

    .prologue
    const/16 v1, 0x2e

    .line 11315
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mReplacingWindowTimeouts:Ljava/util/ArrayList;

    invoke-virtual {v0, p1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 11316
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mReplacingWindowTimeouts:Ljava/util/ArrayList;

    invoke-virtual {v0, p1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 11318
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 11319
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    .line 11320
    const-wide/16 v2, 0x7d0

    .line 11319
    invoke-virtual {v0, v1, v2, v3}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 11314
    return-void
.end method

.method public screenshotApplications(Landroid/os/IBinder;IIIF)Landroid/graphics/Bitmap;
    .locals 9
    .param p1, "appToken"    # Landroid/os/IBinder;
    .param p2, "displayId"    # I
    .param p3, "width"    # I
    .param p4, "height"    # I
    .param p5, "frameScale"    # F

    .prologue
    .line 6427
    const-string/jumbo v0, "android.permission.READ_FRAME_BUFFER"

    .line 6428
    const-string/jumbo v1, "screenshotApplications()"

    .line 6427
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 6429
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires READ_FRAME_BUFFER permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 6432
    :cond_0
    :try_start_0
    const-string/jumbo v0, "screenshotApplications"

    const-wide/16 v2, 0x20

    invoke-static {v2, v3, v0}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 6434
    sget-object v7, Landroid/graphics/Bitmap$Config;->RGB_565:Landroid/graphics/Bitmap$Config;

    .line 6433
    const/4 v5, 0x0

    .line 6434
    const/4 v8, 0x0

    move-object v0, p0

    move-object v1, p1

    move v2, p2

    move v3, p3

    move v4, p4

    move v6, p5

    .line 6433
    invoke-virtual/range {v0 .. v8}, Lcom/android/server/wm/WindowManagerService;->screenshotApplicationsInner(Landroid/os/IBinder;IIIZFLandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 6436
    const-wide/16 v2, 0x20

    invoke-static {v2, v3}, Landroid/os/Trace;->traceEnd(J)V

    .line 6433
    return-object v0

    .line 6435
    :catchall_0
    move-exception v0

    .line 6436
    const-wide/16 v2, 0x20

    invoke-static {v2, v3}, Landroid/os/Trace;->traceEnd(J)V

    .line 6435
    throw v0
.end method

.method screenshotApplicationsInner(Landroid/os/IBinder;IIIZFLandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;
    .locals 42
    .param p1, "appToken"    # Landroid/os/IBinder;
    .param p2, "displayId"    # I
    .param p3, "width"    # I
    .param p4, "height"    # I
    .param p5, "includeFullDisplay"    # Z
    .param p6, "frameScale"    # F
    .param p7, "config"    # Landroid/graphics/Bitmap$Config;
    .param p8, "wallpaperOnly"    # Z

    .prologue
    .line 6456
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v5

    .line 6457
    :try_start_0
    move-object/from16 v0, p0

    move/from16 v1, p2

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v19

    .line 6458
    .local v19, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v19, :cond_0

    .line 6461
    const/4 v6, 0x0

    monitor-exit v5

    return-object v6

    :cond_0
    monitor-exit v5

    .line 6464
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v20

    .line 6465
    .local v20, "displayInfo":Landroid/view/DisplayInfo;
    move-object/from16 v0, v20

    iget v0, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    move/from16 v21, v0

    .line 6466
    .local v21, "dw":I
    move-object/from16 v0, v20

    iget v0, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    move/from16 v18, v0

    .line 6467
    .local v18, "dh":I
    if-eqz v21, :cond_1

    if-nez v18, :cond_2

    .line 6470
    :cond_1
    const/4 v5, 0x0

    return-object v5

    .line 6456
    .end local v18    # "dh":I
    .end local v19    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v20    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v21    # "dw":I
    :catchall_0
    move-exception v6

    monitor-exit v5

    throw v6

    .line 6473
    .restart local v18    # "dh":I
    .restart local v19    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .restart local v20    # "displayInfo":Landroid/view/DisplayInfo;
    .restart local v21    # "dw":I
    :cond_2
    const/4 v13, 0x0

    .line 6475
    .local v13, "bm":Landroid/graphics/Bitmap;
    const/4 v8, 0x0

    .line 6476
    .local v8, "maxLayer":I
    new-instance v23, Landroid/graphics/Rect;

    invoke-direct/range {v23 .. v23}, Landroid/graphics/Rect;-><init>()V

    .line 6477
    .local v23, "frame":Landroid/graphics/Rect;
    new-instance v33, Landroid/graphics/Rect;

    invoke-direct/range {v33 .. v33}, Landroid/graphics/Rect;-><init>()V

    .line 6481
    .local v33, "stackBounds":Landroid/graphics/Rect;
    if-nez p1, :cond_3

    if-eqz p8, :cond_5

    .line 6485
    :cond_3
    const/16 v32, 0x0

    .line 6486
    .local v32, "screenshotReady":Z
    const v7, 0x7fffffff

    .line 6489
    .local v7, "minLayer":I
    :goto_0
    const/4 v12, 0x0

    .line 6492
    .local v12, "appWin":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, p0

    iget-object v6, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 6494
    :try_start_1
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    if-eqz v5, :cond_6

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v0, v5, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    move-object/from16 v25, v0

    .line 6500
    :goto_1
    if-eqz v25, :cond_8

    .line 6501
    move-object/from16 v0, v25

    iget-object v5, v0, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;

    if-eqz v5, :cond_8

    .line 6502
    move-object/from16 v0, v25

    iget-object v5, v0, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;

    invoke-interface {v5}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v5

    move-object/from16 v0, p1

    if-ne v5, v0, :cond_8

    .line 6503
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowState;->isInMultiWindowMode()Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    move-result v5

    if-eqz v5, :cond_7

    const/16 v26, 0x0

    .local v26, "includeImeInScreenshot":Z
    :goto_2
    monitor-exit v6

    .line 6506
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const/4 v6, 0x2

    invoke-interface {v5, v6}, Landroid/view/WindowManagerPolicy;->windowTypeToLayerLw(I)I

    move-result v5

    add-int/lit8 v5, v5, 0x1

    mul-int/lit16 v5, v5, 0x2710

    add-int/lit16 v11, v5, 0x3e8

    .line 6509
    .local v11, "aboveAppLayer":I
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v39, v0

    monitor-enter v39

    .line 6511
    const/4 v12, 0x0

    .line 6512
    :try_start_2
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v37

    .line 6513
    .local v37, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual/range {v37 .. v37}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v24, v5, -0x1

    .end local v12    # "appWin":Lcom/android/server/wm/WindowState;
    .local v24, "i":I
    :goto_3
    if-ltz v24, :cond_10

    .line 6514
    move-object/from16 v0, v37

    move/from16 v1, v24

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v38

    check-cast v38, Lcom/android/server/wm/WindowState;

    .line 6515
    .local v38, "ws":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v38

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mHasSurface:Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_2

    if-nez v5, :cond_9

    .line 6513
    :cond_4
    :goto_4
    add-int/lit8 v24, v24, -0x1

    goto :goto_3

    .line 6482
    .end local v7    # "minLayer":I
    .end local v11    # "aboveAppLayer":I
    .end local v24    # "i":I
    .end local v26    # "includeImeInScreenshot":Z
    .end local v32    # "screenshotReady":Z
    .end local v37    # "windows":Lcom/android/server/wm/WindowList;
    .end local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_5
    const/16 v32, 0x1

    .line 6483
    .restart local v32    # "screenshotReady":Z
    const/4 v7, 0x0

    .line 6481
    .restart local v7    # "minLayer":I
    goto :goto_0

    .line 6494
    .restart local v12    # "appWin":Lcom/android/server/wm/WindowState;
    :cond_6
    const/16 v25, 0x0

    .local v25, "imeTargetAppToken":Lcom/android/server/wm/AppWindowToken;
    goto :goto_1

    .line 6503
    .end local v25    # "imeTargetAppToken":Lcom/android/server/wm/AppWindowToken;
    :cond_7
    const/16 v26, 0x1

    .restart local v26    # "includeImeInScreenshot":Z
    goto :goto_2

    .line 6500
    .end local v26    # "includeImeInScreenshot":Z
    :cond_8
    const/16 v26, 0x0

    .restart local v26    # "includeImeInScreenshot":Z
    goto :goto_2

    .line 6492
    .end local v26    # "includeImeInScreenshot":Z
    :catchall_1
    move-exception v5

    monitor-exit v6

    throw v5

    .line 6518
    .end local v12    # "appWin":Lcom/android/server/wm/WindowState;
    .restart local v11    # "aboveAppLayer":I
    .restart local v24    # "i":I
    .restart local v26    # "includeImeInScreenshot":Z
    .restart local v37    # "windows":Lcom/android/server/wm/WindowList;
    .restart local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_9
    :try_start_3
    move-object/from16 v0, v38

    iget v5, v0, Lcom/android/server/wm/WindowState;->mLayer:I

    if-ge v5, v11, :cond_4

    .line 6521
    if-eqz p8, :cond_a

    move-object/from16 v0, v38

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v5, :cond_4

    .line 6524
    :cond_a
    move-object/from16 v0, v38

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mIsImWindow:Z

    if-eqz v5, :cond_11

    .line 6525
    if-eqz v26, :cond_4

    .line 6557
    :cond_b
    :goto_5
    move-object/from16 v0, v38

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v36, v0

    .line 6558
    .local v36, "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    move-object/from16 v0, v36

    iget-object v5, v0, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowSurfaceController;->getLayer()I

    move-result v27

    .line 6559
    .local v27, "layer":I
    move/from16 v0, v27

    if-ge v8, v0, :cond_c

    .line 6560
    move/from16 v8, v27

    .line 6562
    :cond_c
    move/from16 v0, v27

    if-le v7, v0, :cond_d

    .line 6563
    move/from16 v7, v27

    .line 6567
    :cond_d
    if-nez p5, :cond_e

    move-object/from16 v0, v38

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v5, :cond_14

    .line 6583
    :cond_e
    :goto_6
    move-object/from16 v0, v38

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v5, :cond_15

    move-object/from16 v0, v38

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v5, v5, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    move-object/from16 v0, p1

    if-ne v5, v0, :cond_15

    const/16 v22, 0x1

    .line 6585
    .local v22, "foundTargetWs":Z
    :goto_7
    if-eqz v22, :cond_f

    invoke-virtual/range {v38 .. v38}, Lcom/android/server/wm/WindowState;->isDisplayedLw()Z

    move-result v5

    if-eqz v5, :cond_f

    invoke-virtual/range {v36 .. v36}, Lcom/android/server/wm/WindowStateAnimator;->getShown()Z

    move-result v5

    if-eqz v5, :cond_f

    .line 6586
    const/16 v32, 0x1

    .line 6589
    :cond_f
    move-object/from16 v0, v38

    move-object/from16 v1, v20

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowState;->isObscuringFullscreen(Landroid/view/DisplayInfo;)Z
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_2

    move-result v5

    if-eqz v5, :cond_4

    .line 6594
    .end local v22    # "foundTargetWs":Z
    .end local v27    # "layer":I
    .end local v36    # "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    .end local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_10
    if-eqz p1, :cond_17

    if-nez v12, :cond_17

    .line 6598
    const/4 v5, 0x0

    monitor-exit v39

    return-object v5

    .line 6528
    .restart local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_11
    :try_start_4
    move-object/from16 v0, v38

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v5, :cond_13

    .line 6531
    if-eqz p8, :cond_12

    .line 6532
    move-object/from16 v12, v38

    .line 6535
    :cond_12
    if-nez v12, :cond_b

    goto/16 :goto_4

    .line 6546
    :cond_13
    if-eqz p1, :cond_b

    .line 6547
    move-object/from16 v0, v38

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v5, :cond_4

    move-object/from16 v0, v38

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v5, v5, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    move-object/from16 v0, p1

    if-ne v5, v0, :cond_4

    .line 6552
    move-object/from16 v12, v38

    .local v12, "appWin":Lcom/android/server/wm/WindowState;
    goto :goto_5

    .line 6568
    .end local v12    # "appWin":Lcom/android/server/wm/WindowState;
    .restart local v27    # "layer":I
    .restart local v36    # "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    :cond_14
    move-object/from16 v0, v38

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mFrame:Landroid/graphics/Rect;

    move-object/from16 v35, v0

    .line 6569
    .local v35, "wf":Landroid/graphics/Rect;
    move-object/from16 v0, v38

    iget-object v15, v0, Lcom/android/server/wm/WindowState;->mContentInsets:Landroid/graphics/Rect;

    .line 6570
    .local v15, "cr":Landroid/graphics/Rect;
    move-object/from16 v0, v35

    iget v5, v0, Landroid/graphics/Rect;->left:I

    iget v6, v15, Landroid/graphics/Rect;->left:I

    add-int v28, v5, v6

    .line 6571
    .local v28, "left":I
    move-object/from16 v0, v35

    iget v5, v0, Landroid/graphics/Rect;->top:I

    iget v6, v15, Landroid/graphics/Rect;->top:I

    add-int v34, v5, v6

    .line 6572
    .local v34, "top":I
    move-object/from16 v0, v35

    iget v5, v0, Landroid/graphics/Rect;->right:I

    iget v6, v15, Landroid/graphics/Rect;->right:I

    sub-int v30, v5, v6

    .line 6573
    .local v30, "right":I
    move-object/from16 v0, v35

    iget v5, v0, Landroid/graphics/Rect;->bottom:I

    iget v6, v15, Landroid/graphics/Rect;->bottom:I

    sub-int v14, v5, v6

    .line 6574
    .local v14, "bottom":I
    move-object/from16 v0, v23

    move/from16 v1, v28

    move/from16 v2, v34

    move/from16 v3, v30

    invoke-virtual {v0, v1, v2, v3, v14}, Landroid/graphics/Rect;->union(IIII)V

    .line 6575
    move-object/from16 v0, v38

    move-object/from16 v1, v33

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowState;->getVisibleBounds(Landroid/graphics/Rect;)V

    .line 6576
    move-object/from16 v0, v23

    move-object/from16 v1, v33

    invoke-static {v0, v1}, Landroid/graphics/Rect;->intersects(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z

    move-result v5

    if-nez v5, :cond_e

    .line 6578
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->setEmpty()V
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_2

    goto/16 :goto_6

    .line 6509
    .end local v13    # "bm":Landroid/graphics/Bitmap;
    .end local v14    # "bottom":I
    .end local v15    # "cr":Landroid/graphics/Rect;
    .end local v24    # "i":I
    .end local v27    # "layer":I
    .end local v28    # "left":I
    .end local v30    # "right":I
    .end local v34    # "top":I
    .end local v35    # "wf":Landroid/graphics/Rect;
    .end local v36    # "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    .end local v37    # "windows":Lcom/android/server/wm/WindowList;
    .end local v38    # "ws":Lcom/android/server/wm/WindowState;
    :catchall_2
    move-exception v5

    monitor-exit v39

    throw v5

    .line 6584
    .restart local v13    # "bm":Landroid/graphics/Bitmap;
    .restart local v24    # "i":I
    .restart local v27    # "layer":I
    .restart local v36    # "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    .restart local v37    # "windows":Lcom/android/server/wm/WindowList;
    .restart local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_15
    if-eqz v12, :cond_16

    move/from16 v22, p8

    goto/16 :goto_7

    :cond_16
    const/16 v22, 0x0

    goto/16 :goto_7

    .line 6601
    .end local v27    # "layer":I
    .end local v36    # "winAnim":Lcom/android/server/wm/WindowStateAnimator;
    .end local v38    # "ws":Lcom/android/server/wm/WindowState;
    :cond_17
    if-nez v32, :cond_19

    .line 6602
    :try_start_5
    const-string/jumbo v6, "WindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v40, "Failed to capture screenshot of "

    move-object/from16 v0, v40

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    move-object/from16 v0, p1

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 6603
    const-string/jumbo v40, " appWin="

    .line 6602
    move-object/from16 v0, v40

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v40

    .line 6603
    if-nez v12, :cond_18

    const-string/jumbo v5, "null"

    .line 6602
    :goto_8
    move-object/from16 v0, v40

    invoke-virtual {v0, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v6, v5}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_2

    .line 6605
    const/4 v5, 0x0

    monitor-exit v39

    return-object v5

    .line 6603
    :cond_18
    :try_start_6
    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    invoke-virtual {v5, v12}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    const-string/jumbo v41, " drawState="

    move-object/from16 v0, v41

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    .line 6604
    iget-object v0, v12, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v41, v0

    move-object/from16 v0, v41

    iget v0, v0, Lcom/android/server/wm/WindowStateAnimator;->mDrawState:I

    move/from16 v41, v0

    .line 6603
    move/from16 v0, v41

    invoke-virtual {v5, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_2

    move-result-object v5

    goto :goto_8

    .line 6613
    :cond_19
    if-nez v8, :cond_1a

    .line 6616
    const/4 v5, 0x0

    monitor-exit v39

    return-object v5

    .line 6619
    :cond_1a
    if-nez p5, :cond_1c

    .line 6621
    const/4 v5, 0x0

    const/4 v6, 0x0

    :try_start_7
    move-object/from16 v0, v23

    move/from16 v1, v21

    move/from16 v2, v18

    invoke-virtual {v0, v5, v6, v1, v2}, Landroid/graphics/Rect;->intersect(IIII)Z

    move-result v5

    if-nez v5, :cond_1b

    .line 6622
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->setEmpty()V

    .line 6628
    :cond_1b
    :goto_9
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->isEmpty()Z
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_2

    move-result v5

    if-eqz v5, :cond_1d

    .line 6629
    const/4 v5, 0x0

    monitor-exit v39

    return-object v5

    .line 6626
    :cond_1c
    const/4 v5, 0x0

    const/4 v6, 0x0

    :try_start_8
    move-object/from16 v0, v23

    move/from16 v1, v21

    move/from16 v2, v18

    invoke-virtual {v0, v5, v6, v1, v2}, Landroid/graphics/Rect;->set(IIII)V

    goto :goto_9

    .line 6632
    :cond_1d
    if-gez p3, :cond_1e

    .line 6633
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->width()I

    move-result v5

    int-to-float v5, v5

    mul-float v5, v5, p6

    float-to-int v0, v5

    move/from16 p3, v0

    .line 6635
    :cond_1e
    if-gez p4, :cond_1f

    .line 6636
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->height()I

    move-result v5

    int-to-float v5, v5

    mul-float v5, v5, p6

    float-to-int v0, v5

    move/from16 p4, v0

    .line 6641
    :cond_1f
    new-instance v4, Landroid/graphics/Rect;

    move-object/from16 v0, v23

    invoke-direct {v4, v0}, Landroid/graphics/Rect;-><init>(Landroid/graphics/Rect;)V

    .line 6642
    .local v4, "crop":Landroid/graphics/Rect;
    move/from16 v0, p3

    int-to-float v5, v0

    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->width()I

    move-result v6

    int-to-float v6, v6

    div-float/2addr v5, v6

    move/from16 v0, p4

    int-to-float v6, v0

    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->height()I

    move-result v40

    move/from16 v0, v40

    int-to-float v0, v0

    move/from16 v40, v0

    div-float v6, v6, v40

    cmpg-float v5, v5, v6

    if-gez v5, :cond_22

    .line 6643
    move/from16 v0, p3

    int-to-float v5, v0

    move/from16 v0, p4

    int-to-float v6, v0

    div-float/2addr v5, v6

    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->height()I

    move-result v6

    int-to-float v6, v6

    mul-float/2addr v5, v6

    float-to-int v0, v5

    move/from16 v17, v0

    .line 6644
    .local v17, "cropWidth":I
    iget v5, v4, Landroid/graphics/Rect;->left:I

    add-int v5, v5, v17

    iput v5, v4, Landroid/graphics/Rect;->right:I

    .line 6651
    .end local v17    # "cropWidth":I
    :goto_a
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v5

    invoke-virtual {v5}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v5

    invoke-virtual {v5}, Landroid/view/Display;->getRotation()I

    move-result v10

    .line 6653
    .local v10, "rot":I
    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/wm/WindowManagerService;->mSfHwRotation:I

    add-int/2addr v5, v10

    rem-int/lit8 v10, v5, 0x4

    .line 6655
    const/4 v5, 0x1

    if-eq v10, v5, :cond_20

    const/4 v5, 0x3

    if-ne v10, v5, :cond_21

    .line 6656
    :cond_20
    const/4 v5, 0x1

    if-ne v10, v5, :cond_23

    const/4 v10, 0x3

    .line 6661
    :cond_21
    :goto_b
    move/from16 v0, v21

    move/from16 v1, v18

    invoke-static {v4, v10, v0, v1}, Lcom/android/server/wm/WindowManagerService;->convertCropForSurfaceFlinger(Landroid/graphics/Rect;III)V

    .line 6677
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v6, 0x0

    invoke-virtual {v5, v6}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v31

    .line 6678
    .local v31, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    if-eqz v31, :cond_24

    .line 6679
    invoke-virtual/range {v31 .. v31}, Lcom/android/server/wm/ScreenRotationAnimation;->isAnimating()Z

    move-result v9

    .line 6685
    :goto_c
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V

    .line 6686
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransactionSync()V

    move/from16 v5, p3

    move/from16 v6, p4

    .line 6688
    invoke-static/range {v4 .. v10}, Landroid/view/SurfaceControl;->screenshot(Landroid/graphics/Rect;IIIIZI)Landroid/graphics/Bitmap;

    move-result-object v13

    .line 6690
    .local v13, "bm":Landroid/graphics/Bitmap;
    if-nez v13, :cond_25

    .line 6691
    const-string/jumbo v5, "WindowManager"

    new-instance v6, Ljava/lang/StringBuilder;

    invoke-direct {v6}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v40, "Screenshot failure taking screenshot for ("

    move-object/from16 v0, v40

    invoke-virtual {v6, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    move/from16 v0, v21

    invoke-virtual {v6, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    const-string/jumbo v40, "x"

    move-object/from16 v0, v40

    invoke-virtual {v6, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    move/from16 v0, v18

    invoke-virtual {v6, v0}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    .line 6692
    const-string/jumbo v40, ") to layer "

    .line 6691
    move-object/from16 v0, v40

    invoke-virtual {v6, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6, v8}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v6

    invoke-virtual {v6}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-static {v5, v6}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_8
    .catchall {:try_start_8 .. :try_end_8} :catchall_2

    .line 6693
    const/4 v5, 0x0

    monitor-exit v39

    return-object v5

    .line 6646
    .end local v10    # "rot":I
    .end local v31    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .local v13, "bm":Landroid/graphics/Bitmap;
    :cond_22
    move/from16 v0, p4

    int-to-float v5, v0

    move/from16 v0, p3

    int-to-float v6, v0

    div-float/2addr v5, v6

    :try_start_9
    invoke-virtual/range {v23 .. v23}, Landroid/graphics/Rect;->width()I

    move-result v6

    int-to-float v6, v6

    mul-float/2addr v5, v6

    float-to-int v0, v5

    move/from16 v16, v0

    .line 6647
    .local v16, "cropHeight":I
    iget v5, v4, Landroid/graphics/Rect;->top:I

    add-int v5, v5, v16

    iput v5, v4, Landroid/graphics/Rect;->bottom:I
    :try_end_9
    .catchall {:try_start_9 .. :try_end_9} :catchall_2

    goto/16 :goto_a

    .line 6656
    .end local v16    # "cropHeight":I
    .restart local v10    # "rot":I
    :cond_23
    const/4 v10, 0x1

    goto :goto_b

    .line 6678
    .restart local v31    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    :cond_24
    const/4 v9, 0x0

    .local v9, "inRotation":Z
    goto :goto_c

    .end local v9    # "inRotation":Z
    .local v13, "bm":Landroid/graphics/Bitmap;
    :cond_25
    monitor-exit v39

    .line 6720
    move-object/from16 v0, p7

    invoke-virtual {v13, v0}, Landroid/graphics/Bitmap;->createAshmemBitmap(Landroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;

    move-result-object v29

    .line 6721
    .local v29, "ret":Landroid/graphics/Bitmap;
    invoke-virtual {v13}, Landroid/graphics/Bitmap;->recycle()V

    .line 6722
    return-object v29
.end method

.method public screenshotWallpaper()Landroid/graphics/Bitmap;
    .locals 12

    .prologue
    const-wide/16 v10, 0x20

    .line 6375
    const-string/jumbo v0, "android.permission.READ_FRAME_BUFFER"

    .line 6376
    const-string/jumbo v1, "screenshotWallpaper()"

    .line 6375
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 6377
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires READ_FRAME_BUFFER permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 6380
    :cond_0
    :try_start_0
    const-string/jumbo v0, "screenshotWallpaper"

    const-wide/16 v2, 0x20

    invoke-static {v2, v3, v0}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 6382
    sget-object v7, Landroid/graphics/Bitmap$Config;->ARGB_8888:Landroid/graphics/Bitmap$Config;

    .line 6381
    const/4 v1, 0x0

    const/4 v2, 0x0

    const/4 v3, -0x1

    const/4 v4, -0x1

    const/4 v5, 0x1

    const/high16 v6, 0x3f800000    # 1.0f

    .line 6382
    const/4 v8, 0x1

    move-object v0, p0

    .line 6381
    invoke-virtual/range {v0 .. v8}, Lcom/android/server/wm/WindowManagerService;->screenshotApplicationsInner(Landroid/os/IBinder;IIIZFLandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .line 6384
    invoke-static {v10, v11}, Landroid/os/Trace;->traceEnd(J)V

    .line 6381
    return-object v0

    .line 6383
    :catchall_0
    move-exception v0

    .line 6384
    invoke-static {v10, v11}, Landroid/os/Trace;->traceEnd(J)V

    .line 6383
    throw v0
.end method

.method public scrollTask(ILandroid/graphics/Rect;)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 5449
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5450
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5451
    .local v0, "task":Lcom/android/server/wm/Task;
    if-nez v0, :cond_0

    .line 5452
    new-instance v1, Ljava/lang/IllegalArgumentException;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "scrollTask: taskId "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    .line 5453
    const-string/jumbo v4, " not found."

    .line 5452
    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-direct {v1, v3}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 5449
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1

    .line 5456
    .restart local v0    # "task":Lcom/android/server/wm/Task;
    :cond_0
    :try_start_1
    invoke-virtual {v0, p2}, Lcom/android/server/wm/Task;->scrollLocked(Landroid/graphics/Rect;)Z

    move-result v1

    if-eqz v1, :cond_1

    .line 5457
    invoke-virtual {v0}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    const/4 v3, 0x1

    iput-boolean v3, v1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 5458
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v1}, Lcom/android/server/wm/InputMonitor;->setUpdateInputWindowsNeededLw()V

    .line 5459
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    monitor-exit v2

    .line 5448
    return-void
.end method

.method sendNewConfiguration()V
    .locals 3

    .prologue
    .line 7533
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    const/4 v2, 0x0

    invoke-interface {v1, v2}, Landroid/app/IActivityManager;->updateConfiguration(Landroid/content/res/Configuration;)V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 7531
    :goto_0
    return-void

    .line 7534
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method public setAnimationScale(IF)V
    .locals 2
    .param p1, "which"    # I
    .param p2, "scale"    # F

    .prologue
    .line 5713
    const-string/jumbo v0, "android.permission.SET_ANIMATION_SCALE"

    .line 5714
    const-string/jumbo v1, "setAnimationScale()"

    .line 5713
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 5715
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires SET_ANIMATION_SCALE permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5718
    :cond_0
    invoke-static {p2}, Lcom/android/server/wm/WindowManagerService;->fixScale(F)F

    move-result p2

    .line 5719
    packed-switch p1, :pswitch_data_0

    .line 5726
    :goto_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v1, 0xe

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 5712
    return-void

    .line 5720
    :pswitch_0
    iput p2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    goto :goto_0

    .line 5721
    :pswitch_1
    iput p2, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    goto :goto_0

    .line 5722
    :pswitch_2
    iput p2, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    goto :goto_0

    .line 5719
    nop

    :pswitch_data_0
    .packed-switch 0x0
        :pswitch_0
        :pswitch_1
        :pswitch_2
    .end packed-switch
.end method

.method public setAnimationScales([F)V
    .locals 5
    .param p1, "scales"    # [F

    .prologue
    const/4 v4, 0x0

    const/4 v3, 0x2

    const/4 v2, 0x1

    .line 5731
    const-string/jumbo v0, "android.permission.SET_ANIMATION_SCALE"

    .line 5732
    const-string/jumbo v1, "setAnimationScale()"

    .line 5731
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 5733
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires SET_ANIMATION_SCALE permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 5736
    :cond_0
    if-eqz p1, :cond_3

    .line 5737
    array-length v0, p1

    if-lt v0, v2, :cond_1

    .line 5738
    const/4 v0, 0x0

    aget v0, p1, v0

    invoke-static {v0}, Lcom/android/server/wm/WindowManagerService;->fixScale(F)F

    move-result v0

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowAnimationScaleSetting:F

    .line 5740
    :cond_1
    array-length v0, p1

    if-lt v0, v3, :cond_2

    .line 5741
    aget v0, p1, v2

    invoke-static {v0}, Lcom/android/server/wm/WindowManagerService;->fixScale(F)F

    move-result v0

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mTransitionAnimationScaleSetting:F

    .line 5743
    :cond_2
    array-length v0, p1

    const/4 v1, 0x3

    if-lt v0, v1, :cond_3

    .line 5744
    aget v0, p1, v3

    invoke-static {v0}, Lcom/android/server/wm/WindowManagerService;->fixScale(F)F

    move-result v0

    iput v0, p0, Lcom/android/server/wm/WindowManagerService;->mAnimatorDurationScaleSetting:F

    .line 5745
    invoke-virtual {p0, v4}, Lcom/android/server/wm/WindowManagerService;->dispatchNewAnimatorScaleLocked(Lcom/android/server/wm/Session;)V

    .line 5750
    :cond_3
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v1, 0xe

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 5730
    return-void
.end method

.method public setAppFullscreen(Landroid/os/IBinder;Z)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "toOpaque"    # Z

    .prologue
    .line 4429
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 4430
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 4431
    .local v0, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    .line 4432
    iput-boolean p2, v0, Lcom/android/server/wm/AppWindowToken;->appFullscreen:Z

    .line 4433
    invoke-virtual {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->setWindowOpaqueLocked(Landroid/os/IBinder;Z)V

    .line 4434
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 4428
    return-void

    .line 4429
    .end local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setAppOrientation(Landroid/view/IApplicationToken;I)V
    .locals 5
    .param p1, "token"    # Landroid/view/IApplicationToken;
    .param p2, "requestedOrientation"    # I

    .prologue
    .line 3970
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 3971
    const-string/jumbo v2, "setAppOrientation()"

    .line 3970
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 3972
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 3975
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 3976
    :try_start_0
    invoke-interface {p1}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v1

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 3977
    .local v0, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v0, :cond_1

    .line 3978
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to set orientation of non-existing app token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 3979
    return-void

    .line 3981
    :cond_1
    if-eqz p2, :cond_2

    .line 3982
    const/4 v1, 0x6

    if-ne p2, v1, :cond_4

    .line 3985
    :cond_2
    :goto_0
    :try_start_1
    sget-object v1, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "setAppOrientation token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string/jumbo v4, " requestedOrientation: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 3986
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    const-string/jumbo v3, "single_hand_mode"

    const-string/jumbo v4, ""

    invoke-static {v1, v3, v4}, Landroid/provider/Settings$Global;->putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z

    .line 3988
    :cond_3
    iput p2, v0, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 3969
    return-void

    .line 3983
    :cond_4
    const/16 v1, 0x8

    if-eq p2, v1, :cond_2

    .line 3984
    const/16 v1, 0xb

    if-ne p2, v1, :cond_3

    goto :goto_0

    .line 3975
    .end local v0    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setAppStartingWindow(Landroid/os/IBinder;Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIIILandroid/os/IBinder;Z)Z
    .locals 20
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "pkg"    # Ljava/lang/String;
    .param p3, "theme"    # I
    .param p4, "compatInfo"    # Landroid/content/res/CompatibilityInfo;
    .param p5, "nonLocalizedLabel"    # Ljava/lang/CharSequence;
    .param p6, "labelRes"    # I
    .param p7, "icon"    # I
    .param p8, "logo"    # I
    .param p9, "windowFlags"    # I
    .param p10, "transferFrom"    # Landroid/os/IBinder;
    .param p11, "createIfNeeded"    # Z

    .prologue
    .line 4222
    const-string/jumbo v3, "android.permission.MANAGE_APP_TOKENS"

    .line 4223
    const-string/jumbo v4, "setAppStartingWindow()"

    .line 4222
    move-object/from16 v0, p0

    invoke-direct {v0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v3

    if-nez v3, :cond_0

    .line 4224
    new-instance v3, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v3, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v3

    .line 4227
    :cond_0
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v19, v0

    monitor-enter v19

    .line 4232
    :try_start_0
    invoke-virtual/range {p0 .. p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v18

    .line 4233
    .local v18, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v18, :cond_1

    .line 4234
    const-string/jumbo v3, "WindowManager"

    new-instance v4, Ljava/lang/StringBuilder;

    invoke-direct {v4}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v5, "Attempted to set icon of non-existing app token: "

    invoke-virtual {v4, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v4

    move-object/from16 v0, p1

    invoke-virtual {v4, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v4

    invoke-virtual {v4}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 4235
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4241
    :cond_1
    :try_start_1
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v3

    if-nez v3, :cond_2

    .line 4242
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4245
    :cond_2
    :try_start_2
    move-object/from16 v0, v18

    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    if-eqz v3, :cond_3

    .line 4246
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4255
    :cond_3
    if-eqz p3, :cond_8

    .line 4256
    :try_start_3
    invoke-static {}, Lcom/android/server/AttributeCache;->instance()Lcom/android/server/AttributeCache;

    move-result-object v3

    .line 4257
    sget-object v4, Lcom/android/internal/R$styleable;->Window:[I

    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    .line 4256
    move-object/from16 v0, p2

    move/from16 v1, p3

    invoke-virtual {v3, v0, v1, v4, v5}, Lcom/android/server/AttributeCache;->get(Ljava/lang/String;I[II)Lcom/android/server/AttributeCache$Entry;
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    move-result-object v12

    .line 4258
    .local v12, "ent":Lcom/android/server/AttributeCache$Entry;
    if-nez v12, :cond_4

    .line 4261
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4263
    :cond_4
    :try_start_4
    iget-object v3, v12, Lcom/android/server/AttributeCache$Entry;->array:Landroid/content/res/TypedArray;

    .line 4264
    const/4 v4, 0x5

    const/4 v5, 0x0

    .line 4263
    invoke-virtual {v3, v4, v5}, Landroid/content/res/TypedArray;->getBoolean(IZ)Z

    move-result v16

    .line 4265
    .local v16, "windowIsTranslucent":Z
    iget-object v3, v12, Lcom/android/server/AttributeCache$Entry;->array:Landroid/content/res/TypedArray;

    .line 4266
    const/4 v4, 0x4

    const/4 v5, 0x0

    .line 4265
    invoke-virtual {v3, v4, v5}, Landroid/content/res/TypedArray;->getBoolean(IZ)Z

    move-result v15

    .line 4267
    .local v15, "windowIsFloating":Z
    iget-object v3, v12, Lcom/android/server/AttributeCache$Entry;->array:Landroid/content/res/TypedArray;

    .line 4268
    const/16 v4, 0xe

    const/4 v5, 0x0

    .line 4267
    invoke-virtual {v3, v4, v5}, Landroid/content/res/TypedArray;->getBoolean(IZ)Z

    move-result v17

    .line 4269
    .local v17, "windowShowWallpaper":Z
    iget-object v3, v12, Lcom/android/server/AttributeCache$Entry;->array:Landroid/content/res/TypedArray;

    .line 4270
    const/16 v4, 0xc

    const/4 v5, 0x0

    .line 4269
    invoke-virtual {v3, v4, v5}, Landroid/content/res/TypedArray;->getBoolean(IZ)Z
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    move-result v14

    .line 4274
    .local v14, "windowDisableStarting":Z
    if-eqz v16, :cond_5

    .line 4275
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4277
    :cond_5
    if-nez v15, :cond_6

    if-eqz v14, :cond_7

    .line 4278
    :cond_6
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4280
    :cond_7
    if-eqz v17, :cond_8

    .line 4281
    :try_start_5
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mWallpaperControllerLocked:Lcom/android/server/wm/WallpaperController;

    invoke-virtual {v3}, Lcom/android/server/wm/WallpaperController;->getWallpaperTarget()Lcom/android/server/wm/WindowState;

    move-result-object v3

    if-nez v3, :cond_9

    .line 4287
    const/high16 v3, 0x100000

    or-int p9, p9, v3

    .line 4294
    .end local v12    # "ent":Lcom/android/server/AttributeCache$Entry;
    .end local v14    # "windowDisableStarting":Z
    .end local v15    # "windowIsFloating":Z
    .end local v16    # "windowIsTranslucent":Z
    .end local v17    # "windowShowWallpaper":Z
    :cond_8
    move-object/from16 v0, p0

    move-object/from16 v1, p10

    move-object/from16 v2, v18

    invoke-direct {v0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->transferStartingWindow(Landroid/os/IBinder;Lcom/android/server/wm/AppWindowToken;)Z
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_0

    move-result v3

    if-eqz v3, :cond_a

    .line 4295
    const/4 v3, 0x1

    monitor-exit v19

    return v3

    .line 4289
    .restart local v12    # "ent":Lcom/android/server/AttributeCache$Entry;
    .restart local v14    # "windowDisableStarting":Z
    .restart local v15    # "windowIsFloating":Z
    .restart local v16    # "windowIsTranslucent":Z
    .restart local v17    # "windowShowWallpaper":Z
    :cond_9
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4300
    .end local v12    # "ent":Lcom/android/server/AttributeCache$Entry;
    .end local v14    # "windowDisableStarting":Z
    .end local v15    # "windowIsFloating":Z
    .end local v16    # "windowIsTranslucent":Z
    .end local v17    # "windowShowWallpaper":Z
    :cond_a
    if-nez p11, :cond_b

    .line 4301
    const/4 v3, 0x0

    monitor-exit v19

    return v3

    .line 4305
    :cond_b
    :try_start_6
    new-instance v3, Lcom/android/server/wm/StartingData;

    move-object/from16 v4, p2

    move/from16 v5, p3

    move-object/from16 v6, p4

    move-object/from16 v7, p5

    move/from16 v8, p6

    move/from16 v9, p7

    move/from16 v10, p8

    move/from16 v11, p9

    invoke-direct/range {v3 .. v11}, Lcom/android/server/wm/StartingData;-><init>(Ljava/lang/String;ILandroid/content/res/CompatibilityInfo;Ljava/lang/CharSequence;IIII)V

    move-object/from16 v0, v18

    iput-object v3, v0, Lcom/android/server/wm/AppWindowToken;->startingData:Lcom/android/server/wm/StartingData;

    .line 4307
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/4 v4, 0x5

    move-object/from16 v0, v18

    invoke-virtual {v3, v4, v0}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(ILjava/lang/Object;)Landroid/os/Message;

    move-result-object v13

    .line 4312
    .local v13, "m":Landroid/os/Message;
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v3, v13}, Lcom/android/server/wm/WindowManagerService$H;->sendMessageAtFrontOfQueue(Landroid/os/Message;)Z
    :try_end_6
    .catchall {:try_start_6 .. :try_end_6} :catchall_0

    monitor-exit v19

    .line 4314
    const/4 v3, 0x1

    return v3

    .line 4227
    .end local v13    # "m":Landroid/os/Message;
    .end local v18    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v3

    monitor-exit v19

    throw v3
.end method

.method public setAppTask(Landroid/os/IBinder;IILandroid/graphics/Rect;Landroid/content/res/Configuration;IZ)V
    .locals 12
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "taskId"    # I
    .param p3, "stackId"    # I
    .param p4, "taskBounds"    # Landroid/graphics/Rect;
    .param p5, "config"    # Landroid/content/res/Configuration;
    .param p6, "taskResizeMode"    # I
    .param p7, "homeTask"    # Z

    .prologue
    .line 3605
    const-string/jumbo v2, "android.permission.MANAGE_APP_TOKENS"

    .line 3606
    const-string/jumbo v3, "setAppTask()"

    .line 3605
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 3607
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 3610
    :cond_0
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v11

    .line 3611
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v6

    .line 3612
    .local v6, "atoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v6, :cond_1

    .line 3613
    const-string/jumbo v2, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to set task id of non-existing app token: "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v2, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v11

    .line 3614
    return-void

    .line 3616
    :cond_1
    :try_start_1
    iget-object v10, v6, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    .line 3617
    .local v10, "oldTask":Lcom/android/server/wm/Task;
    invoke-virtual {v10, v6}, Lcom/android/server/wm/Task;->removeAppToken(Lcom/android/server/wm/AppWindowToken;)Z

    .line 3619
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v2, p2}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/Task;

    .line 3620
    .local v9, "newTask":Lcom/android/server/wm/Task;
    if-nez v9, :cond_2

    .line 3622
    iget v5, v10, Lcom/android/server/wm/Task;->mUserId:I

    move-object v2, p0

    move v3, p2

    move v4, p3

    move-object/from16 v7, p4

    move-object/from16 v8, p5

    .line 3621
    invoke-direct/range {v2 .. v8}, Lcom/android/server/wm/WindowManagerService;->createTaskLocked(IIILcom/android/server/wm/AppWindowToken;Landroid/graphics/Rect;Landroid/content/res/Configuration;)Lcom/android/server/wm/Task;

    move-result-object v9

    .line 3624
    :cond_2
    const v2, 0x7fffffff

    move/from16 v0, p6

    move/from16 v1, p7

    invoke-virtual {v9, v2, v6, v0, v1}, Lcom/android/server/wm/Task;->addAppToken(ILcom/android/server/wm/AppWindowToken;IZ)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v11

    .line 3604
    return-void

    .line 3610
    .end local v6    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .end local v9    # "newTask":Lcom/android/server/wm/Task;
    .end local v10    # "oldTask":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v2

    monitor-exit v11

    throw v2
.end method

.method public setAppVisibility(Landroid/os/IBinder;Z)V
    .locals 12
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "visible"    # Z

    .prologue
    const/4 v2, 0x1

    const/4 v0, 0x0

    .line 4649
    const-string/jumbo v3, "android.permission.MANAGE_APP_TOKENS"

    .line 4650
    const-string/jumbo v4, "setAppVisibility()"

    .line 4649
    invoke-direct {p0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v3

    if-nez v3, :cond_0

    .line 4651
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v0, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 4656
    :cond_0
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v11

    .line 4657
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v1

    .line 4658
    .local v1, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-nez v1, :cond_1

    .line 4659
    const-string/jumbo v0, "WindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Attempted to set visibility of non-existing app token: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v0, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v11

    .line 4660
    return-void

    .line 4668
    :cond_1
    :try_start_1
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v3, v1}, Landroid/util/ArraySet;->remove(Ljava/lang/Object;)Z

    .line 4669
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v3, v1}, Landroid/util/ArraySet;->remove(Ljava/lang/Object;)Z

    .line 4670
    const/4 v3, 0x0

    iput-boolean v3, v1, Lcom/android/server/wm/AppWindowToken;->waitingToShow:Z

    .line 4671
    if-eqz p2, :cond_7

    :goto_0
    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    .line 4673
    if-nez p2, :cond_8

    .line 4677
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->removeAllDeadWindows()V

    .line 4678
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->setVisibleBeforeClientHidden()V

    .line 4717
    :cond_2
    :goto_1
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z

    move-result v0

    if-eqz v0, :cond_e

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v0

    if-eqz v0, :cond_e

    .line 4722
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-boolean v0, v0, Lcom/android/server/wm/AppWindowAnimator;->usingTransferredAnimation:Z

    if-eqz v0, :cond_3

    .line 4723
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v0, v0, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    if-nez v0, :cond_3

    .line 4724
    const-string/jumbo v0, "WindowManager"

    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Will NOT set dummy animation on: "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 4725
    const-string/jumbo v3, ", using null transfered animation!"

    .line 4724
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    invoke-static {v0, v2}, Landroid/util/Slog;->wtf(Ljava/lang/String;Ljava/lang/String;)I

    .line 4727
    :cond_3
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-boolean v0, v0, Lcom/android/server/wm/AppWindowAnimator;->usingTransferredAnimation:Z

    if-nez v0, :cond_5

    .line 4728
    iget-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->startingDisplayed:Z

    if-eqz v0, :cond_4

    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mSkipAppTransitionAnimation:Z

    .line 4727
    if-eqz v0, :cond_5

    .line 4731
    :cond_4
    iget-object v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowAnimator;->setDummyAnimation()V

    .line 4733
    :cond_5
    const/4 v0, 0x1

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->inPendingTransaction:Z

    .line 4734
    if-eqz p2, :cond_d

    .line 4735
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 4736
    const/4 v0, 0x1

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->mEnteringAnimation:Z

    .line 4741
    :goto_2
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->getAppTransition()I

    move-result v0

    const/16 v2, 0x10

    if-ne v0, v2, :cond_6

    .line 4744
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->findFocusedWindowLocked(Lcom/android/server/wm/DisplayContent;)Lcom/android/server/wm/WindowState;

    move-result-object v10

    .line 4745
    .local v10, "win":Lcom/android/server/wm/WindowState;
    if-eqz v10, :cond_6

    .line 4746
    iget-object v7, v10, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    .line 4747
    .local v7, "focusedToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v7, :cond_6

    .line 4751
    const/4 v0, 0x1

    iput-boolean v0, v7, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    .line 4752
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v7}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .end local v7    # "focusedToken":Lcom/android/server/wm/AppWindowToken;
    .end local v10    # "win":Lcom/android/server/wm/WindowState;
    :cond_6
    monitor-exit v11

    .line 4756
    return-void

    :cond_7
    move v0, v2

    .line 4671
    goto/16 :goto_0

    .line 4679
    :cond_8
    if-eqz p2, :cond_2

    .line 4680
    :try_start_2
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->isTransitionSet()Z

    move-result v0

    if-nez v0, :cond_9

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0}, Lcom/android/server/wm/AppTransition;->isReady()Z

    move-result v0

    if-eqz v0, :cond_9

    .line 4684
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 4686
    :cond_9
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->startingMoved:Z

    .line 4689
    iget-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    if-nez v0, :cond_a

    iget-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppStopped:Z

    if-eqz v0, :cond_c

    .line 4690
    :cond_a
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->clearAllDrawn()V

    .line 4693
    iget-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    if-eqz v0, :cond_b

    .line 4694
    const/4 v0, 0x1

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->waitingToShow:Z

    .line 4697
    :cond_b
    iget-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    if-eqz v0, :cond_c

    .line 4704
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    .line 4705
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->sendAppVisibilityToClients()V

    .line 4708
    :cond_c
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->requestUpdateWallpaperIfNeeded()V

    .line 4712
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->mAppStopped:Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto/16 :goto_1

    .line 4656
    .end local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v0

    monitor-exit v11

    throw v0

    .line 4738
    .restart local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :cond_d
    :try_start_3
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    invoke-virtual {v0, v1}, Landroid/util/ArraySet;->add(Ljava/lang/Object;)Z

    .line 4739
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->mEnteringAnimation:Z

    goto :goto_2

    .line 4759
    :cond_e
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v8

    .line 4760
    .local v8, "origId":J
    const/4 v0, 0x0

    iput-boolean v0, v1, Lcom/android/server/wm/AppWindowToken;->inPendingTransaction:Z

    .line 4762
    iget-boolean v6, v1, Lcom/android/server/wm/AppWindowToken;->voiceInteraction:Z

    .line 4761
    const/4 v2, 0x0

    const/4 v4, -0x1

    .line 4762
    const/4 v5, 0x1

    move-object v0, p0

    move v3, p2

    .line 4761
    invoke-virtual/range {v0 .. v6}, Lcom/android/server/wm/WindowManagerService;->setTokenVisibilityLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;ZIZZ)Z

    .line 4763
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->updateReportedVisibilityLocked()V

    .line 4764
    invoke-static {v8, v9}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    monitor-exit v11

    .line 4648
    return-void
.end method

.method public setCurrentProfileIds([I)V
    .locals 2
    .param p1, "currentProfileIds"    # [I

    .prologue
    .line 5877
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 5878
    :try_start_0
    iput-object p1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentProfileIds:[I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 5876
    return-void

    .line 5877
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method public setCurrentUser(I[I)V
    .locals 8
    .param p1, "newUserId"    # I
    .param p2, "currentProfileIds"    # [I

    .prologue
    .line 5883
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 5884
    :try_start_0
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    .line 5885
    iput-object p2, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentProfileIds:[I

    .line 5886
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v5, p1}, Lcom/android/server/wm/AppTransition;->setCurrentUser(I)V

    .line 5887
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v5, p1}, Landroid/view/WindowManagerPolicy;->setCurrentUserLw(I)V

    .line 5892
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const/4 v7, 0x1

    invoke-interface {v5, v7}, Landroid/view/WindowManagerPolicy;->enableKeyguard(Z)V

    .line 5895
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5}, Landroid/util/SparseArray;->size()I

    move-result v3

    .line 5896
    .local v3, "numDisplays":I
    const/4 v1, 0x0

    .local v1, "displayNdx":I
    :goto_0
    if-ge v1, v3, :cond_0

    .line 5897
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/DisplayContent;

    .line 5898
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->switchUserStacks()V

    .line 5899
    invoke-direct {p0, v0}, Lcom/android/server/wm/WindowManagerService;->rebuildAppWindowListLocked(Lcom/android/server/wm/DisplayContent;)V

    .line 5896
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 5901
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :cond_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 5904
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 5905
    .restart local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    iget-object v5, v0, Lcom/android/server/wm/DisplayContent;->mDividerControllerLocked:Lcom/android/server/wm/DockedStackDividerController;

    .line 5906
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->hasDockedTasksForUser(I)Z

    move-result v7

    .line 5905
    invoke-virtual {v5, v7}, Lcom/android/server/wm/DockedStackDividerController;->notifyDockedStackExistsChanged(Z)V

    .line 5910
    iget-boolean v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayReady:Z

    if-eqz v5, :cond_1

    .line 5911
    invoke-direct {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getForcedDisplayDensityForUserLocked(I)I

    move-result v2

    .line 5912
    .local v2, "forcedDensity":I
    if-eqz v2, :cond_2

    move v4, v2

    .line 5914
    .local v4, "targetDensity":I
    :goto_1
    invoke-direct {p0, v0, v4}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensityLocked(Lcom/android/server/wm/DisplayContent;I)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .end local v2    # "forcedDensity":I
    .end local v4    # "targetDensity":I
    :cond_1
    monitor-exit v6

    .line 5882
    return-void

    .line 5913
    .restart local v2    # "forcedDensity":I
    :cond_2
    :try_start_1
    iget v4, v0, Lcom/android/server/wm/DisplayContent;->mInitialDisplayDensity:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto :goto_1

    .line 5883
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "displayNdx":I
    .end local v2    # "forcedDensity":I
    .end local v3    # "numDisplays":I
    :catchall_0
    move-exception v5

    monitor-exit v6

    throw v5
.end method

.method public setDockedStackCreateState(ILandroid/graphics/Rect;)V
    .locals 2
    .param p1, "mode"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 5157
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 5158
    :try_start_0
    invoke-virtual {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->setDockedStackCreateStateLocked(ILandroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 5156
    return-void

    .line 5157
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method setDockedStackCreateStateLocked(ILandroid/graphics/Rect;)V
    .locals 0
    .param p1, "mode"    # I
    .param p2, "bounds"    # Landroid/graphics/Rect;

    .prologue
    .line 5163
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mDockedStackCreateMode:I

    .line 5164
    iput-object p2, p0, Lcom/android/server/wm/WindowManagerService;->mDockedStackCreateBounds:Landroid/graphics/Rect;

    .line 5162
    return-void
.end method

.method public setDockedStackDividerTouchRegion(Landroid/graphics/Rect;)V
    .locals 2
    .param p1, "touchRegion"    # Landroid/graphics/Rect;

    .prologue
    .line 11342
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 11343
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v0

    invoke-virtual {v0, p1}, Lcom/android/server/wm/DockedStackDividerController;->setTouchRegion(Landroid/graphics/Rect;)V

    .line 11345
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->setFocusTaskRegionLocked()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 11341
    return-void

    .line 11342
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public setDockedStackResizing(Z)V
    .locals 2
    .param p1, "resizing"    # Z

    .prologue
    .line 11334
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 11335
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v0

    invoke-virtual {v0, p1}, Lcom/android/server/wm/DockedStackDividerController;->setResizing(Z)V

    .line 11336
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->requestTraversal()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 11333
    return-void

    .line 11334
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public setEventDispatching(Z)V
    .locals 2
    .param p1, "enabled"    # Z

    .prologue
    .line 8097
    const-string/jumbo v0, "android.permission.MANAGE_APP_TOKENS"

    .line 8098
    const-string/jumbo v1, "setEventDispatching()"

    .line 8097
    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_0

    .line 8099
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 8102
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 8103
    :try_start_0
    iput-boolean p1, p0, Lcom/android/server/wm/WindowManagerService;->mEventDispatchingEnabled:Z

    .line 8104
    iget-boolean v0, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    if-eqz v0, :cond_1

    .line 8105
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v0, p1}, Lcom/android/server/wm/InputMonitor;->setEventDispatchingLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1
    monitor-exit v1

    .line 8096
    return-void

    .line 8102
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method setFocusTaskRegionLocked()V
    .locals 3

    .prologue
    .line 4005
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-eqz v2, :cond_0

    .line 4006
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    iget-object v1, v2, Lcom/android/server/wm/AppWindowToken;->mTask:Lcom/android/server/wm/Task;

    .line 4007
    .local v1, "task":Lcom/android/server/wm/Task;
    invoke-virtual {v1}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 4008
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_0

    .line 4009
    invoke-virtual {v0, v1}, Lcom/android/server/wm/DisplayContent;->setTouchExcludeRegion(Lcom/android/server/wm/Task;)V

    .line 4004
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "task":Lcom/android/server/wm/Task;
    :cond_0
    return-void
.end method

.method public setFocusedApp(Landroid/os/IBinder;Z)V
    .locals 9
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "moveFocusNow"    # Z

    .prologue
    .line 4016
    const-string/jumbo v5, "android.permission.MANAGE_APP_TOKENS"

    .line 4017
    const-string/jumbo v6, "setFocusedApp()"

    .line 4016
    invoke-direct {p0, v5, v6}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v5

    if-nez v5, :cond_0

    .line 4018
    new-instance v5, Ljava/lang/SecurityException;

    const-string/jumbo v6, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v5, v6}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v5

    .line 4021
    :cond_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 4023
    if-nez p1, :cond_6

    .line 4025
    const/4 v1, 0x0

    .line 4035
    :cond_1
    :goto_0
    :try_start_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    if-eq v5, v1, :cond_7

    const/4 v0, 0x1

    .line 4036
    .local v0, "changed":Z
    :goto_1
    if-eqz v0, :cond_3

    if-eqz v1, :cond_3

    .line 4037
    iget v4, v1, Lcom/android/server/wm/AppWindowToken;->requestedOrientation:I

    .line 4038
    .local v4, "requestedOrientation":I
    if-eqz v4, :cond_2

    .line 4039
    const/4 v5, 0x6

    if-ne v4, v5, :cond_8

    .line 4042
    :cond_2
    :goto_2
    sget-object v5, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v7, Ljava/lang/StringBuilder;

    invoke-direct {v7}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v8, "setFocusedApp token: "

    invoke-virtual {v7, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v7

    const-string/jumbo v8, " requestedOrientation: "

    invoke-virtual {v7, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7, v4}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v7

    invoke-static {v5, v7}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 4043
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v5}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v5

    const-string/jumbo v7, "single_hand_mode"

    const-string/jumbo v8, ""

    invoke-static {v5, v7, v8}, Landroid/provider/Settings$Global;->putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z

    .line 4046
    .end local v4    # "requestedOrientation":I
    :cond_3
    if-eqz v0, :cond_4

    .line 4047
    iput-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mFocusedApp:Lcom/android/server/wm/AppWindowToken;

    .line 4048
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v5, v1}, Lcom/android/server/wm/InputMonitor;->setFocusedAppLw(Lcom/android/server/wm/AppWindowToken;)V

    .line 4049
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->setFocusTaskRegionLocked()V

    .line 4052
    :cond_4
    if-eqz p2, :cond_5

    if-eqz v0, :cond_5

    .line 4053
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 4054
    .local v2, "origId":J
    const/4 v5, 0x0

    const/4 v7, 0x1

    invoke-virtual {p0, v5, v7}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 4055
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .end local v2    # "origId":J
    :cond_5
    monitor-exit v6

    .line 4015
    return-void

    .line 4027
    .end local v0    # "changed":Z
    :cond_6
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v1

    .line 4028
    .local v1, "newFocus":Lcom/android/server/wm/AppWindowToken;
    if-nez v1, :cond_1

    .line 4029
    const-string/jumbo v5, "WindowManager"

    new-instance v7, Ljava/lang/StringBuilder;

    invoke-direct {v7}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v8, "Attempted to set focus to non-existing app token: "

    invoke-virtual {v7, v8}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v7

    invoke-virtual {v7}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v7

    invoke-static {v5, v7}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    goto/16 :goto_0

    .line 4021
    .end local v1    # "newFocus":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v5

    monitor-exit v6

    throw v5

    .line 4035
    :cond_7
    const/4 v0, 0x0

    .restart local v0    # "changed":Z
    goto/16 :goto_1

    .line 4040
    .restart local v4    # "requestedOrientation":I
    :cond_8
    const/16 v5, 0x8

    if-eq v4, v5, :cond_2

    .line 4041
    const/16 v5, 0xb

    if-ne v4, v5, :cond_3

    goto/16 :goto_2
.end method

.method public setForceResizableTasks(Z)V
    .locals 2
    .param p1, "forceResizableTasks"    # Z

    .prologue
    .line 11386
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 11387
    :try_start_0
    iput-boolean p1, p0, Lcom/android/server/wm/WindowManagerService;->mForceResizableTasks:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 11385
    return-void

    .line 11386
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method public setForcedDisplayDensityForUser(III)V
    .locals 11
    .param p1, "displayId"    # I
    .param p2, "density"    # I
    .param p3, "userId"    # I

    .prologue
    const/4 v6, 0x0

    const/4 v3, 0x0

    .line 9287
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9288
    const-string/jumbo v1, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9287
    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 9290
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 9293
    :cond_0
    if-eqz p1, :cond_1

    .line 9294
    new-instance v0, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v1, "Can only set the default display"

    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 9297
    :cond_1
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v0

    .line 9298
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v1

    const-string/jumbo v5, "setForcedDisplayDensityForUser"

    const/4 v4, 0x1

    move v2, p3

    .line 9297
    invoke-static/range {v0 .. v6}, Landroid/app/ActivityManager;->handleIncomingUser(IIIZZLjava/lang/String;Ljava/lang/String;)I

    move-result v10

    .line 9300
    .local v10, "targetUserId":I
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v8

    .line 9302
    .local v8, "ident":J
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9303
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v7

    .line 9304
    .local v7, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v7, :cond_2

    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentUserId:I

    if-ne v0, v10, :cond_2

    .line 9305
    invoke-direct {p0, v7, p2}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplayDensityLocked(Lcom/android/server/wm/DisplayContent;I)V

    .line 9307
    :cond_2
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v0

    .line 9308
    const-string/jumbo v2, "display_density_forced"

    .line 9309
    invoke-static {p2}, Ljava/lang/Integer;->toString(I)Ljava/lang/String;

    move-result-object v3

    .line 9307
    invoke-static {v0, v2, v3, v10}, Landroid/provider/Settings$Secure;->putStringForUser(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;I)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :try_start_2
    monitor-exit v1
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9312
    invoke-static {v8, v9}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9286
    return-void

    .line 9302
    .end local v7    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v0

    :try_start_3
    monitor-exit v1

    throw v0
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9311
    :catchall_1
    move-exception v0

    .line 9312
    invoke-static {v8, v9}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9311
    throw v0
.end method

.method public setForcedDisplayScalingMode(II)V
    .locals 6
    .param p1, "displayId"    # I
    .param p2, "mode"    # I

    .prologue
    .line 9155
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9156
    const-string/jumbo v4, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9155
    invoke-virtual {v1, v4}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v1

    if-eqz v1, :cond_0

    .line 9158
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v1, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9161
    :cond_0
    if-eqz p1, :cond_1

    .line 9162
    new-instance v1, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v4, "Can only set the default display"

    invoke-direct {v1, v4}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 9164
    :cond_1
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 9166
    .local v2, "ident":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9167
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9168
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v0, :cond_4

    .line 9169
    if-ltz p2, :cond_2

    const/4 v1, 0x1

    if-le p2, v1, :cond_3

    .line 9170
    :cond_2
    const/4 p2, 0x0

    .line 9172
    :cond_3
    invoke-direct {p0, v0, p2}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplayScalingModeLocked(Lcom/android/server/wm/DisplayContent;I)V

    .line 9173
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v1}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v1

    .line 9174
    const-string/jumbo v5, "display_scaling_force"

    .line 9173
    invoke-static {v1, v5, p2}, Landroid/provider/Settings$Global;->putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_4
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9178
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9154
    return-void

    .line 9166
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v1

    :try_start_3
    monitor-exit v4

    throw v1
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9177
    :catchall_1
    move-exception v1

    .line 9178
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9177
    throw v1
.end method

.method public setForcedDisplaySize(III)V
    .locals 11
    .param p1, "displayId"    # I
    .param p2, "width"    # I
    .param p3, "height"    # I

    .prologue
    .line 9120
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9121
    const-string/jumbo v7, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9120
    invoke-virtual {v6, v7}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v6

    if-eqz v6, :cond_0

    .line 9123
    new-instance v6, Ljava/lang/SecurityException;

    const-string/jumbo v7, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v6, v7}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v6

    .line 9126
    :cond_0
    if-eqz p1, :cond_1

    .line 9127
    new-instance v6, Ljava/lang/IllegalArgumentException;

    const-string/jumbo v7, "Can only set the default display"

    invoke-direct {v6, v7}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    throw v6

    .line 9129
    :cond_1
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v4

    .line 9131
    .local v4, "ident":J
    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v7
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9134
    const/16 v2, 0xc8

    .line 9135
    .local v2, "MIN_WIDTH":I
    const/16 v1, 0xc8

    .line 9136
    .local v1, "MIN_HEIGHT":I
    const/4 v0, 0x2

    .line 9137
    .local v0, "MAX_SCALE":I
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 9138
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v3, :cond_2

    .line 9139
    const/16 v6, 0xc8

    invoke-static {p2, v6}, Ljava/lang/Math;->max(II)I

    move-result v6

    .line 9140
    iget v8, v3, Lcom/android/server/wm/DisplayContent;->mInitialDisplayWidth:I

    mul-int/lit8 v8, v8, 0x2

    .line 9139
    invoke-static {v6, v8}, Ljava/lang/Math;->min(II)I

    move-result p2

    .line 9141
    const/16 v6, 0xc8

    invoke-static {p3, v6}, Ljava/lang/Math;->max(II)I

    move-result v6

    .line 9142
    iget v8, v3, Lcom/android/server/wm/DisplayContent;->mInitialDisplayHeight:I

    mul-int/lit8 v8, v8, 0x2

    .line 9141
    invoke-static {v6, v8}, Ljava/lang/Math;->min(II)I

    move-result p3

    .line 9143
    invoke-direct {p0, v3, p2, p3}, Lcom/android/server/wm/WindowManagerService;->setForcedDisplaySizeLocked(Lcom/android/server/wm/DisplayContent;II)V

    .line 9144
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v6}, Landroid/content/Context;->getContentResolver()Landroid/content/ContentResolver;

    move-result-object v6

    .line 9145
    const-string/jumbo v8, "display_size_forced"

    new-instance v9, Ljava/lang/StringBuilder;

    invoke-direct {v9}, Ljava/lang/StringBuilder;-><init>()V

    invoke-virtual {v9, p2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    const-string/jumbo v10, ","

    invoke-virtual {v9, v10}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9, p3}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v9

    invoke-virtual {v9}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v9

    .line 9144
    invoke-static {v6, v8, v9}, Landroid/provider/Settings$Global;->putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_2
    :try_start_2
    monitor-exit v7
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9149
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9119
    return-void

    .line 9131
    .end local v3    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v6

    :try_start_3
    monitor-exit v7

    throw v6
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9148
    .end local v0    # "MAX_SCALE":I
    .end local v1    # "MIN_HEIGHT":I
    .end local v2    # "MIN_WIDTH":I
    :catchall_1
    move-exception v6

    .line 9149
    invoke-static {v4, v5}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9148
    throw v6
.end method

.method setHoldScreenLocked(Lcom/android/server/wm/Session;)V
    .locals 6
    .param p1, "newHoldScreen"    # Lcom/android/server/wm/Session;

    .prologue
    const/4 v5, 0x0

    .line 9786
    if-eqz p1, :cond_2

    const/4 v0, 0x1

    .line 9788
    .local v0, "hold":Z
    :goto_0
    if-eqz v0, :cond_0

    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenOn:Lcom/android/server/wm/Session;

    if-eq v2, p1, :cond_0

    .line 9789
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    new-instance v3, Landroid/os/WorkSource;

    iget v4, p1, Lcom/android/server/wm/Session;->mUid:I

    invoke-direct {v3, v4}, Landroid/os/WorkSource;-><init>(I)V

    invoke-virtual {v2, v3}, Landroid/os/PowerManager$WakeLock;->setWorkSource(Landroid/os/WorkSource;)V

    .line 9791
    :cond_0
    iput-object p1, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenOn:Lcom/android/server/wm/Session;

    .line 9793
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v2}, Landroid/os/PowerManager$WakeLock;->isHeld()Z

    move-result v1

    .line 9794
    .local v1, "state":Z
    if-eq v0, v1, :cond_1

    .line 9795
    if-eqz v0, :cond_3

    .line 9800
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iget-object v2, v2, Lcom/android/server/wm/WindowSurfacePlacer;->mHoldScreenWindow:Lcom/android/server/wm/WindowState;

    iput-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockHoldingWindow:Lcom/android/server/wm/WindowState;

    .line 9801
    iput-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockObscuringWindow:Lcom/android/server/wm/WindowState;

    .line 9802
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v2}, Landroid/os/PowerManager$WakeLock;->acquire()V

    .line 9803
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy;->keepScreenOnStartedLw()V

    .line 9785
    :cond_1
    :goto_1
    return-void

    .line 9786
    .end local v0    # "hold":Z
    .end local v1    # "state":Z
    :cond_2
    const/4 v0, 0x0

    goto :goto_0

    .line 9809
    .restart local v0    # "hold":Z
    .restart local v1    # "state":Z
    :cond_3
    iput-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockHoldingWindow:Lcom/android/server/wm/WindowState;

    .line 9810
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iget-object v2, v2, Lcom/android/server/wm/WindowSurfacePlacer;->mObsuringWindow:Lcom/android/server/wm/WindowState;

    iput-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastWakeLockObscuringWindow:Lcom/android/server/wm/WindowState;

    .line 9811
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v2}, Landroid/view/WindowManagerPolicy;->keepScreenOnStoppedLw()V

    .line 9812
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mHoldingScreenWakeLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v2}, Landroid/os/PowerManager$WakeLock;->release()V

    goto :goto_1
.end method

.method public setInTouchMode(Z)V
    .locals 2
    .param p1, "mode"    # Z

    .prologue
    .line 6199
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 6200
    :try_start_0
    iput-boolean p1, p0, Lcom/android/server/wm/WindowManagerService;->mInTouchMode:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 6198
    return-void

    .line 6199
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method setInsetsWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;ILandroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Region;)V
    .locals 6
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "touchableInsets"    # I
    .param p4, "contentInsets"    # Landroid/graphics/Rect;
    .param p5, "visibleInsets"    # Landroid/graphics/Rect;
    .param p6, "touchableRegion"    # Landroid/graphics/Region;

    .prologue
    .line 2725
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 2727
    .local v0, "origId":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 2728
    const/4 v3, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v2

    .line 2734
    .local v2, "w":Lcom/android/server/wm/WindowState;
    if-eqz v2, :cond_1

    .line 2735
    const/4 v3, 0x0

    iput-boolean v3, v2, Lcom/android/server/wm/WindowState;->mGivenInsetsPending:Z

    .line 2736
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenContentInsets:Landroid/graphics/Rect;

    invoke-virtual {v3, p4}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 2737
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenVisibleInsets:Landroid/graphics/Rect;

    invoke-virtual {v3, p5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 2738
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenTouchableRegion:Landroid/graphics/Region;

    invoke-virtual {v3, p6}, Landroid/graphics/Region;->set(Landroid/graphics/Region;)Z

    .line 2739
    iput p3, v2, Lcom/android/server/wm/WindowState;->mTouchableInsets:I

    .line 2740
    iget v3, v2, Lcom/android/server/wm/WindowState;->mGlobalScale:F

    const/high16 v5, 0x3f800000    # 1.0f

    cmpl-float v3, v3, v5

    if-eqz v3, :cond_0

    .line 2741
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenContentInsets:Landroid/graphics/Rect;

    iget v5, v2, Lcom/android/server/wm/WindowState;->mGlobalScale:F

    invoke-virtual {v3, v5}, Landroid/graphics/Rect;->scale(F)V

    .line 2742
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenVisibleInsets:Landroid/graphics/Rect;

    iget v5, v2, Lcom/android/server/wm/WindowState;->mGlobalScale:F

    invoke-virtual {v3, v5}, Landroid/graphics/Rect;->scale(F)V

    .line 2743
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mGivenTouchableRegion:Landroid/graphics/Region;

    iget v5, v2, Lcom/android/server/wm/WindowState;->mGlobalScale:F

    invoke-virtual {v3, v5}, Landroid/graphics/Region;->scale(F)V

    .line 2745
    :cond_0
    invoke-virtual {v2}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 2746
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v3}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 2750
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2724
    return-void

    .line 2727
    .end local v2    # "w":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    :try_start_3
    monitor-exit v4

    throw v3
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 2749
    :catchall_1
    move-exception v3

    .line 2750
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2749
    throw v3
.end method

.method public setNewConfiguration(Landroid/content/res/Configuration;)[I
    .locals 3
    .param p1, "config"    # Landroid/content/res/Configuration;

    .prologue
    .line 3902
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 3903
    const-string/jumbo v2, "setNewConfiguration()"

    .line 3902
    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 3904
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 3907
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 3908
    :try_start_0
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    if-eqz v1, :cond_1

    .line 3909
    const/4 v1, 0x0

    iput-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    .line 3910
    const-string/jumbo v1, "new-config"

    iput-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    .line 3912
    :cond_1
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    invoke-virtual {v1, p1}, Landroid/content/res/Configuration;->diff(Landroid/content/res/Configuration;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v1

    if-eqz v1, :cond_2

    const/4 v0, 0x1

    .line 3913
    .local v0, "configChanged":Z
    :goto_0
    if-nez v0, :cond_3

    .line 3914
    const/4 v1, 0x0

    monitor-exit v2

    return-object v1

    .line 3912
    .end local v0    # "configChanged":Z
    :cond_2
    const/4 v0, 0x0

    .restart local v0    # "configChanged":Z
    goto :goto_0

    .line 3916
    :cond_3
    :try_start_1
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->prepareFreezingAllTaskBounds()V

    .line 3917
    new-instance v1, Landroid/content/res/Configuration;

    invoke-direct {v1, p1}, Landroid/content/res/Configuration;-><init>(Landroid/content/res/Configuration;)V

    iput-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    .line 3918
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->onConfigurationChanged()[I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result-object v1

    monitor-exit v2

    return-object v1

    .line 3907
    .end local v0    # "configChanged":Z
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setOverscan(IIIII)V
    .locals 9
    .param p1, "displayId"    # I
    .param p2, "left"    # I
    .param p3, "top"    # I
    .param p4, "right"    # I
    .param p5, "bottom"    # I

    .prologue
    .line 9420
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 9421
    const-string/jumbo v2, "android.permission.WRITE_SECURE_SETTINGS"

    .line 9420
    invoke-virtual {v0, v2}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 9423
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v2, "Must hold permission android.permission.WRITE_SECURE_SETTINGS"

    invoke-direct {v0, v2}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 9426
    :cond_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v6

    .line 9428
    .local v6, "ident":J
    :try_start_0
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v8
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 9429
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->getDisplayContentLocked(I)Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    .line 9430
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eqz v1, :cond_1

    move-object v0, p0

    move v2, p2

    move v3, p3

    move v4, p4

    move v5, p5

    .line 9431
    invoke-direct/range {v0 .. v5}, Lcom/android/server/wm/WindowManagerService;->setOverscanLocked(Lcom/android/server/wm/DisplayContent;IIII)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_1
    :try_start_2
    monitor-exit v8
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 9435
    invoke-static {v6, v7}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9419
    return-void

    .line 9428
    .end local v1    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :catchall_0
    move-exception v0

    :try_start_3
    monitor-exit v8

    throw v0
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 9434
    :catchall_1
    move-exception v0

    .line 9435
    invoke-static {v6, v7}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 9434
    throw v0
.end method

.method public setRecentsVisibility(Z)V
    .locals 2
    .param p1, "visible"    # Z

    .prologue
    .line 10321
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.STATUS_BAR"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 10323
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Caller does not hold permission android.permission.STATUS_BAR"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 10327
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10328
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->setRecentsVisibilityLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 10320
    return-void

    .line 10327
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public setReplacingWindow(Landroid/os/IBinder;Z)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "animate"    # Z

    .prologue
    .line 11246
    const/4 v0, 0x0

    .line 11247
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11248
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 11249
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->isVisible()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 11254
    invoke-virtual {v0, p2}, Lcom/android/server/wm/AppWindowToken;->setReplacingWindows(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11245
    return-void

    .line 11250
    :cond_0
    :try_start_1
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to set replacing window on non-existing app token "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 11252
    return-void

    .line 11247
    .end local v0    # "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setReplacingWindows(Landroid/os/IBinder;Z)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "childrenOnly"    # Z

    .prologue
    .line 11269
    const/4 v0, 0x0

    .line 11270
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11271
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v0

    .line 11272
    .local v0, "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v0, :cond_0

    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->isVisible()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 11278
    if-eqz p2, :cond_1

    .line 11279
    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowToken;->setReplacingChildren()V

    .line 11284
    :goto_0
    const/4 v1, 0x1

    invoke-virtual {p0, p1, v1}, Lcom/android/server/wm/WindowManagerService;->scheduleClearReplacingWindowIfNeeded(Landroid/os/IBinder;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11268
    return-void

    .line 11273
    :cond_0
    :try_start_1
    const-string/jumbo v1, "WindowManager"

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "Attempted to set replacing window on non-existing app token "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 11275
    return-void

    .line 11281
    :cond_1
    const/4 v1, 0x0

    :try_start_2
    invoke-virtual {v0, v1}, Lcom/android/server/wm/AppWindowToken;->setReplacingWindows(Z)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    goto :goto_0

    .line 11270
    .end local v0    # "appWindowToken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setResizeDimLayer(ZIF)V
    .locals 2
    .param p1, "visible"    # Z
    .param p2, "targetStackId"    # I
    .param p3, "alpha"    # F

    .prologue
    .line 11351
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 11352
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v0

    invoke-virtual {v0, p1, p2, p3}, Lcom/android/server/wm/DockedStackDividerController;->setResizeDimLayer(ZIF)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 11350
    return-void

    .line 11351
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public setScreenCaptureDisabled(IZ)V
    .locals 8
    .param p1, "userId"    # I
    .param p2, "disabled"    # Z

    .prologue
    .line 2366
    invoke-static {}, Landroid/os/Binder;->getCallingUid()I

    move-result v0

    .line 2367
    .local v0, "callingUid":I
    const/16 v5, 0x3e8

    if-eq v0, v5, :cond_0

    .line 2368
    new-instance v5, Ljava/lang/SecurityException;

    const-string/jumbo v6, "Only system can call setScreenCaptureDisabled."

    invoke-direct {v5, v6}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v5

    .line 2371
    :cond_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    .line 2372
    :try_start_0
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mScreenCaptureDisabled:Landroid/util/SparseArray;

    invoke-static {p2}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;

    move-result-object v7

    invoke-virtual {v5, p1, v7}, Landroid/util/SparseArray;->put(ILjava/lang/Object;)V

    .line 2374
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5}, Landroid/util/SparseArray;->size()I

    move-result v5

    add-int/lit8 v1, v5, -0x1

    .local v1, "displayNdx":I
    :goto_0
    if-ltz v1, :cond_3

    .line 2375
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v5, v1}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v5}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v4

    .line 2376
    .local v4, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v3, v5, -0x1

    .local v3, "winNdx":I
    :goto_1
    if-ltz v3, :cond_2

    .line 2377
    invoke-virtual {v4, v3}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    .line 2378
    .local v2, "win":Lcom/android/server/wm/WindowState;
    iget-boolean v5, v2, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v5, :cond_1

    iget v5, v2, Lcom/android/server/wm/WindowState;->mOwnerUid:I

    invoke-static {v5}, Landroid/os/UserHandle;->getUserId(I)I

    move-result v5

    if-ne p1, v5, :cond_1

    .line 2379
    iget-object v5, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v5, p2}, Lcom/android/server/wm/WindowStateAnimator;->setSecureLocked(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 2376
    :cond_1
    add-int/lit8 v3, v3, -0x1

    goto :goto_1

    .line 2374
    .end local v2    # "win":Lcom/android/server/wm/WindowState;
    :cond_2
    add-int/lit8 v1, v1, -0x1

    goto :goto_0

    .end local v3    # "winNdx":I
    .end local v4    # "windows":Lcom/android/server/wm/WindowList;
    :cond_3
    monitor-exit v6

    .line 2365
    return-void

    .line 2371
    .end local v1    # "displayNdx":I
    :catchall_0
    move-exception v5

    monitor-exit v6

    throw v5
.end method

.method public setSingleHandMode(I)V
    .locals 3
    .param p1, "singleHandMode"    # I

    .prologue
    .line 11873
    sget-object v0, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v1, Ljava/lang/StringBuilder;

    invoke-direct {v1}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v2, "cur: "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    iget v2, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandMode:I

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string/jumbo v2, " to: "

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 11874
    iget v0, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandMode:I

    if-ne v0, p1, :cond_0

    return-void

    .line 11875
    :cond_0
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandMode:I

    .line 11872
    return-void
.end method

.method public setStrictModeVisualIndicatorPreference(Ljava/lang/String;)V
    .locals 1
    .param p1, "value"    # Ljava/lang/String;

    .prologue
    .line 6347
    const-string/jumbo v0, "persist.sys.strictmode.visual"

    invoke-static {v0, p1}, Landroid/os/SystemProperties;->set(Ljava/lang/String;Ljava/lang/String;)V

    .line 6346
    return-void
.end method

.method public setTaskDockedResizing(IZ)V
    .locals 5
    .param p1, "taskId"    # I
    .param p2, "resizing"    # Z

    .prologue
    .line 5438
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 5439
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 5440
    .local v0, "task":Lcom/android/server/wm/Task;
    if-nez v0, :cond_0

    .line 5441
    sget-object v1, Lcom/android/server/wm/WindowManagerService;->TAG:Ljava/lang/String;

    new-instance v3, Ljava/lang/StringBuilder;

    invoke-direct {v3}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v4, "setTaskDockedResizing: taskId "

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3, p1}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v3

    const-string/jumbo v4, " not found."

    invoke-virtual {v3, v4}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v3

    invoke-static {v1, v3}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 5442
    return-void

    .line 5444
    :cond_0
    const/4 v1, 0x1

    :try_start_1
    invoke-virtual {v0, p2, v1}, Lcom/android/server/wm/Task;->setDragResizing(ZI)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v2

    .line 5437
    return-void

    .line 5438
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public setTaskResizeable(II)V
    .locals 3
    .param p1, "taskId"    # I
    .param p2, "resizeMode"    # I

    .prologue
    .line 11377
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11378
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v1, p1}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lcom/android/server/wm/Task;

    .line 11379
    .local v0, "task":Lcom/android/server/wm/Task;
    if-eqz v0, :cond_0

    .line 11380
    invoke-virtual {v0, p2}, Lcom/android/server/wm/Task;->setResizeable(I)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_0
    monitor-exit v2

    .line 11376
    return-void

    .line 11377
    .end local v0    # "task":Lcom/android/server/wm/Task;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method setTokenVisibilityLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;ZIZZ)Z
    .locals 17
    .param p1, "wtoken"    # Lcom/android/server/wm/AppWindowToken;
    .param p2, "lp"    # Landroid/view/WindowManager$LayoutParams;
    .param p3, "visible"    # Z
    .param p4, "transit"    # I
    .param p5, "performLayout"    # Z
    .param p6, "isVoiceInteraction"    # Z

    .prologue
    .line 4457
    const/4 v9, 0x0

    .line 4459
    .local v9, "delayed":Z
    move-object/from16 v0, p1

    iget-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    move/from16 v0, p3

    if-ne v2, v0, :cond_0

    .line 4460
    if-eqz p3, :cond_8

    const/4 v2, 0x0

    :goto_0
    move-object/from16 v0, p1

    iput-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->clientHidden:Z

    .line 4461
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/AppWindowToken;->sendAppVisibilityToClients()V

    .line 4469
    :cond_0
    const/4 v13, 0x0

    .line 4470
    .local v13, "visibilityChanged":Z
    move-object/from16 v0, p1

    iget-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    move/from16 v0, p3

    if-eq v2, v0, :cond_2

    move-object/from16 v0, p1

    iget-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    if-eqz v2, :cond_1

    move-object/from16 v0, p1

    iget-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->mIsExiting:Z

    if-nez v2, :cond_2

    .line 4471
    :cond_1
    if-eqz p3, :cond_10

    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/AppWindowToken;->waitingForReplacement()Z

    move-result v2

    .line 4470
    if-eqz v2, :cond_10

    .line 4472
    :cond_2
    const/4 v8, 0x0

    .line 4477
    .local v8, "changed":Z
    const/4 v11, 0x0

    .line 4479
    .local v11, "runningAppAnimation":Z
    const/4 v2, -0x1

    move/from16 v0, p4

    if-eq v0, v2, :cond_6

    .line 4480
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v2, v2, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    sget-object v3, Lcom/android/server/wm/AppWindowAnimator;->sDummyAnimation:Landroid/view/animation/Animation;

    if-ne v2, v3, :cond_3

    .line 4481
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v2}, Lcom/android/server/wm/AppWindowAnimator;->setNullAnimation()V

    :cond_3
    move-object/from16 v2, p0

    move-object/from16 v3, p1

    move-object/from16 v4, p2

    move/from16 v5, p4

    move/from16 v6, p3

    move/from16 v7, p6

    .line 4483
    invoke-direct/range {v2 .. v7}, Lcom/android/server/wm/WindowManagerService;->applyAnimationLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;IZZ)Z

    move-result v2

    if-eqz v2, :cond_4

    .line 4484
    const/4 v11, 0x1

    const/4 v9, 0x1

    .line 4486
    :cond_4
    invoke-virtual/range {p1 .. p1}, Lcom/android/server/wm/AppWindowToken;->findMainWindow()Lcom/android/server/wm/WindowState;

    move-result-object v15

    .line 4488
    .local v15, "window":Lcom/android/server/wm/WindowState;
    if-eqz v15, :cond_5

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v2, :cond_5

    .line 4489
    invoke-virtual {v15}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v2

    if-nez v2, :cond_5

    .line 4490
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    move/from16 v0, p4

    invoke-virtual {v2, v15, v0}, Lcom/android/server/wm/AccessibilityController;->onAppWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 4492
    :cond_5
    const/4 v8, 0x1

    .line 4495
    .end local v15    # "window":Lcom/android/server/wm/WindowState;
    :cond_6
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowList;->size()I

    move-result v16

    .line 4496
    .local v16, "windowsCount":I
    const/4 v10, 0x0

    .local v10, "i":I
    :goto_1
    move/from16 v0, v16

    if-ge v10, v0, :cond_d

    .line 4497
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v2, v10}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v14

    check-cast v14, Lcom/android/server/wm/WindowState;

    .line 4498
    .local v14, "win":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    if-ne v14, v2, :cond_9

    .line 4502
    if-nez p3, :cond_7

    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v2

    if-eqz v2, :cond_7

    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v2}, Lcom/android/server/wm/AppWindowAnimator;->isAnimating()Z

    move-result v2

    if-eqz v2, :cond_7

    .line 4503
    const/4 v2, 0x1

    iput-boolean v2, v14, Lcom/android/server/wm/WindowState;->mAnimatingExit:Z

    .line 4504
    const/4 v2, 0x1

    iput-boolean v2, v14, Lcom/android/server/wm/WindowState;->mRemoveOnExit:Z

    .line 4505
    const/4 v2, 0x1

    iput-boolean v2, v14, Lcom/android/server/wm/WindowState;->mWindowRemovalAllowed:Z

    .line 4496
    :cond_7
    :goto_2
    add-int/lit8 v10, v10, 0x1

    goto :goto_1

    .line 4460
    .end local v8    # "changed":Z
    .end local v10    # "i":I
    .end local v11    # "runningAppAnimation":Z
    .end local v13    # "visibilityChanged":Z
    .end local v14    # "win":Lcom/android/server/wm/WindowState;
    .end local v16    # "windowsCount":I
    :cond_8
    const/4 v2, 0x1

    goto/16 :goto_0

    .line 4512
    .restart local v8    # "changed":Z
    .restart local v10    # "i":I
    .restart local v11    # "runningAppAnimation":Z
    .restart local v13    # "visibilityChanged":Z
    .restart local v14    # "win":Lcom/android/server/wm/WindowState;
    .restart local v16    # "windowsCount":I
    :cond_9
    if-eqz p3, :cond_b

    .line 4513
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v2

    if-nez v2, :cond_7

    .line 4514
    if-nez v11, :cond_a

    .line 4515
    iget-object v2, v14, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .line 4516
    const/4 v3, 0x1

    const/4 v4, 0x1

    .line 4515
    invoke-virtual {v2, v3, v4}, Lcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z

    .line 4518
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v2, :cond_a

    .line 4519
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v2

    if-nez v2, :cond_a

    .line 4520
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    .line 4521
    const/4 v3, 0x1

    .line 4520
    invoke-virtual {v2, v14, v3}, Lcom/android/server/wm/AccessibilityController;->onWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 4524
    :cond_a
    const/4 v8, 0x1

    .line 4525
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    goto :goto_2

    .line 4527
    :cond_b
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v2

    if-eqz v2, :cond_7

    .line 4528
    if-nez v11, :cond_c

    .line 4529
    iget-object v2, v14, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .line 4530
    const/4 v3, 0x2

    const/4 v4, 0x0

    .line 4529
    invoke-virtual {v2, v3, v4}, Lcom/android/server/wm/WindowStateAnimator;->applyAnimationLocked(IZ)Z

    .line 4532
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v2, :cond_c

    .line 4533
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->getDisplayId()I

    move-result v2

    if-nez v2, :cond_c

    .line 4534
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    .line 4535
    const/4 v3, 0x2

    .line 4534
    invoke-virtual {v2, v14, v3}, Lcom/android/server/wm/AccessibilityController;->onWindowTransitionLocked(Lcom/android/server/wm/WindowState;I)V

    .line 4538
    :cond_c
    const/4 v8, 0x1

    .line 4539
    invoke-virtual {v14}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    goto :goto_2

    .line 4543
    .end local v14    # "win":Lcom/android/server/wm/WindowState;
    :cond_d
    if-eqz p3, :cond_15

    const/4 v2, 0x0

    :goto_3
    move-object/from16 v0, p1

    iput-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->hiddenRequested:Z

    move-object/from16 v0, p1

    iput-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->hidden:Z

    .line 4544
    const/4 v13, 0x1

    .line 4545
    if-nez p3, :cond_16

    .line 4546
    const/4 v2, 0x1

    const/4 v3, 0x1

    move-object/from16 v0, p0

    move-object/from16 v1, p1

    invoke-virtual {v0, v1, v2, v3}, Lcom/android/server/wm/WindowManagerService;->unsetAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;ZZ)V

    .line 4561
    :cond_e
    :goto_4
    if-eqz v8, :cond_10

    .line 4562
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v2}, Lcom/android/server/wm/InputMonitor;->setUpdateInputWindowsNeededLw()V

    .line 4563
    if-eqz p5, :cond_f

    .line 4564
    const/4 v2, 0x3

    .line 4565
    const/4 v3, 0x0

    .line 4564
    move-object/from16 v0, p0

    invoke-virtual {v0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->updateFocusedWindowLocked(IZ)Z

    .line 4566
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 4568
    :cond_f
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    const/4 v3, 0x0

    invoke-virtual {v2, v3}, Lcom/android/server/wm/InputMonitor;->updateInputWindowsLw(Z)V

    .line 4572
    .end local v8    # "changed":Z
    .end local v10    # "i":I
    .end local v11    # "runningAppAnimation":Z
    .end local v16    # "windowsCount":I
    :cond_10
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v2, v2, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    if-eqz v2, :cond_11

    .line 4573
    const/4 v9, 0x1

    .line 4576
    :cond_11
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowList;->size()I

    move-result v2

    add-int/lit8 v10, v2, -0x1

    .restart local v10    # "i":I
    :goto_5
    if-ltz v10, :cond_12

    if-eqz v9, :cond_17

    .line 4582
    :cond_12
    if-eqz v13, :cond_14

    .line 4583
    if-eqz p3, :cond_13

    if-eqz v9, :cond_19

    .line 4590
    :cond_13
    :goto_6
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mClosingApps:Landroid/util/ArraySet;

    move-object/from16 v0, p1

    invoke-virtual {v2, v0}, Landroid/util/ArraySet;->contains(Ljava/lang/Object;)Z

    move-result v2

    if-nez v2, :cond_14

    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    move-object/from16 v0, p1

    invoke-virtual {v2, v0}, Landroid/util/ArraySet;->contains(Ljava/lang/Object;)Z

    move-result v2

    if-eqz v2, :cond_1a

    .line 4599
    :cond_14
    :goto_7
    return v9

    .line 4543
    .restart local v8    # "changed":Z
    .restart local v11    # "runningAppAnimation":Z
    .restart local v16    # "windowsCount":I
    :cond_15
    const/4 v2, 0x1

    goto :goto_3

    .line 4550
    :cond_16
    move-object/from16 v0, p1

    iget-object v12, v0, Lcom/android/server/wm/AppWindowToken;->startingWindow:Lcom/android/server/wm/WindowState;

    .line 4551
    .local v12, "swin":Lcom/android/server/wm/WindowState;
    if-eqz v12, :cond_e

    invoke-virtual {v12}, Lcom/android/server/wm/WindowState;->isDrawnLw()Z

    move-result v2

    if-nez v2, :cond_e

    .line 4552
    const/4 v2, 0x0

    iput-boolean v2, v12, Lcom/android/server/wm/WindowState;->mPolicyVisibility:Z

    .line 4553
    const/4 v2, 0x0

    iput-boolean v2, v12, Lcom/android/server/wm/WindowState;->mPolicyVisibilityAfterAnim:Z

    goto :goto_4

    .line 4577
    .end local v8    # "changed":Z
    .end local v11    # "runningAppAnimation":Z
    .end local v12    # "swin":Lcom/android/server/wm/WindowState;
    .end local v16    # "windowsCount":I
    :cond_17
    move-object/from16 v0, p1

    iget-object v2, v0, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v2, v10}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/WindowState;

    iget-object v2, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v2}, Lcom/android/server/wm/WindowStateAnimator;->isWindowAnimationSet()Z

    move-result v2

    if-eqz v2, :cond_18

    .line 4578
    const/4 v9, 0x1

    .line 4576
    :cond_18
    add-int/lit8 v10, v10, -0x1

    goto :goto_5

    .line 4586
    :cond_19
    const/4 v2, 0x1

    move-object/from16 v0, p1

    iput-boolean v2, v0, Lcom/android/server/wm/AppWindowToken;->mEnteringAnimation:Z

    .line 4587
    move-object/from16 v0, p0

    iget-object v2, v0, Lcom/android/server/wm/WindowManagerService;->mActivityManagerAppTransitionNotifier:Landroid/view/WindowManagerInternal$AppTransitionListener;

    move-object/from16 v0, p1

    iget-object v3, v0, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    invoke-virtual {v2, v3}, Landroid/view/WindowManagerInternal$AppTransitionListener;->onAppTransitionFinishedLocked(Landroid/os/IBinder;)V

    goto :goto_6

    .line 4594
    :cond_1a
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v2

    invoke-virtual {v2}, Lcom/android/server/wm/DisplayContent;->getDockedDividerController()Lcom/android/server/wm/DockedStackDividerController;

    move-result-object v2

    invoke-virtual {v2}, Lcom/android/server/wm/DockedStackDividerController;->notifyAppVisibilityChanged()V

    goto :goto_7
.end method

.method setTransparentRegionWindow(Lcom/android/server/wm/Session;Landroid/view/IWindow;Landroid/graphics/Region;)V
    .locals 5
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "region"    # Landroid/graphics/Region;

    .prologue
    .line 2707
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 2709
    .local v0, "origId":J
    :try_start_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 2710
    const/4 v3, 0x0

    :try_start_1
    invoke-virtual {p0, p1, p2, v3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v2

    .line 2714
    .local v2, "w":Lcom/android/server/wm/WindowState;
    if-eqz v2, :cond_0

    iget-boolean v3, v2, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v3, :cond_0

    .line 2715
    iget-object v3, v2, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v3, p3}, Lcom/android/server/wm/WindowStateAnimator;->setTransparentRegionHintLocked(Landroid/graphics/Region;)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    :cond_0
    :try_start_2
    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .line 2719
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2706
    return-void

    .line 2709
    .end local v2    # "w":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v3

    :try_start_3
    monitor-exit v4

    throw v3
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 2718
    :catchall_1
    move-exception v3

    .line 2719
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 2718
    throw v3
.end method

.method public setTvPipVisibility(Z)V
    .locals 2
    .param p1, "visible"    # Z

    .prologue
    .line 10334
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.STATUS_BAR"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 10336
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Caller does not hold permission android.permission.STATUS_BAR"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 10340
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10341
    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->setTvPipVisibilityLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 10333
    return-void

    .line 10340
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public setWindowOpaque(Landroid/os/IBinder;Z)V
    .locals 2
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "isOpaque"    # Z

    .prologue
    .line 4440
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v0

    .line 4441
    :try_start_0
    invoke-virtual {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->setWindowOpaqueLocked(Landroid/os/IBinder;Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v0

    .line 4439
    return-void

    .line 4440
    :catchall_0
    move-exception v1

    monitor-exit v0

    throw v1
.end method

.method public setWindowOpaqueLocked(Landroid/os/IBinder;Z)V
    .locals 3
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "isOpaque"    # Z

    .prologue
    .line 4446
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v1

    .line 4447
    .local v1, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v1, :cond_0

    .line 4448
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->findMainWindow()Lcom/android/server/wm/WindowState;

    move-result-object v0

    .line 4449
    .local v0, "win":Lcom/android/server/wm/WindowState;
    if-eqz v0, :cond_0

    .line 4450
    iget-object v2, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v2, p2}, Lcom/android/server/wm/WindowStateAnimator;->setOpaqueLocked(Z)V

    .line 4445
    .end local v0    # "win":Lcom/android/server/wm/WindowState;
    :cond_0
    return-void
.end method

.method public showBootMessage(Ljava/lang/CharSequence;Z)V
    .locals 3
    .param p1, "msg"    # Ljava/lang/CharSequence;
    .param p2, "always"    # Z

    .prologue
    .line 6152
    const/4 v0, 0x0

    .line 6153
    .local v0, "first":Z
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 6162
    :try_start_0
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mAllowBootMessages:Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-nez v1, :cond_0

    monitor-exit v2

    .line 6163
    return-void

    .line 6165
    :cond_0
    :try_start_1
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    if-nez v1, :cond_2

    .line 6166
    if-nez p2, :cond_1

    monitor-exit v2

    .line 6167
    return-void

    .line 6169
    :cond_1
    const/4 v0, 0x1

    .line 6171
    :cond_2
    :try_start_2
    iget-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mSystemBooted:Z
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    if-eqz v1, :cond_3

    monitor-exit v2

    .line 6172
    return-void

    .line 6174
    :cond_3
    const/4 v1, 0x1

    :try_start_3
    iput-boolean v1, p0, Lcom/android/server/wm/WindowManagerService;->mShowingBootMessages:Z

    .line 6175
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1, p1, p2}, Landroid/view/WindowManagerPolicy;->showBootMessage(Ljava/lang/CharSequence;Z)V
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    monitor-exit v2

    .line 6177
    if-eqz v0, :cond_4

    .line 6178
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->performEnableScreen()V

    .line 6151
    :cond_4
    return-void

    .line 6153
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public showCircularMask(Z)V
    .locals 8
    .param p1, "visible"    # Z

    .prologue
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v6

    :try_start_0
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    if-eqz p1, :cond_2

    :try_start_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

    if-nez v0, :cond_0

    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    const v1, #android:integer@config_windowOutsetBottom#t

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getInteger(I)I

    move-result v4

    .local v4, "screenOffset":I
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    const v1, #android:dimen@circular_display_mask_thickness#t

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getDimensionPixelSize(I)I

    move-result v5

    .local v5, "maskThickness":I
    new-instance v0, Lcom/android/server/wm/CircularDisplayMask;

    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    invoke-virtual {v1}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v1

    .line 6251
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 6252
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 6253
    const/16 v7, 0x7e2

    .line 6252
    invoke-interface {v3, v7}, Landroid/view/WindowManagerPolicy;->windowTypeToLayerLw(I)I

    move-result v3

    mul-int/lit16 v3, v3, 0x2710

    add-int/lit8 v3, v3, 0xa

    .line 6249
    invoke-direct/range {v0 .. v5}, Lcom/android/server/wm/CircularDisplayMask;-><init>(Landroid/view/Display;Landroid/view/SurfaceSession;III)V

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

    .line 6256
    .end local v4    # "screenOffset":I
    .end local v5    # "maskThickness":I
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

    const/4 v1, 0x1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/CircularDisplayMask;->setVisibility(Z)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 6262
    :cond_1
    :goto_0
    :try_start_2
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    monitor-exit v6

    .line 6234
    return-void

    .line 6257
    :cond_2
    :try_start_3
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

    if-eqz v0, :cond_1

    .line 6258
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;

    const/4 v1, 0x0

    invoke-virtual {v0, v1}, Lcom/android/server/wm/CircularDisplayMask;->setVisibility(Z)V

    .line 6259
    const/4 v0, 0x0

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mCircularDisplayMask:Lcom/android/server/wm/CircularDisplayMask;
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    goto :goto_0

    .line 6261
    :catchall_0
    move-exception v0

    .line 6262
    :try_start_4
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 6261
    throw v0
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    .line 6235
    :catchall_1
    move-exception v0

    monitor-exit v6

    throw v0
.end method

.method public showEmulatorDisplayOverlay()V
    .locals 7

    .prologue
    .line 6270
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 6274
    :try_start_0
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    .line 6276
    :try_start_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mEmulatorDisplayOverlay:Lcom/android/server/wm/EmulatorDisplayOverlay;

    if-nez v0, :cond_0

    .line 6277
    new-instance v0, Lcom/android/server/wm/EmulatorDisplayOverlay;

    .line 6278
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    .line 6279
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    invoke-virtual {v3}, Lcom/android/server/wm/DisplayContent;->getDisplay()Landroid/view/Display;

    move-result-object v3

    .line 6280
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 6281
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 6282
    const/16 v6, 0x7e2

    .line 6281
    invoke-interface {v5, v6}, Landroid/view/WindowManagerPolicy;->windowTypeToLayerLw(I)I

    move-result v5

    mul-int/lit16 v5, v5, 0x2710

    add-int/lit8 v5, v5, 0xa

    .line 6277
    invoke-direct {v0, v2, v3, v4, v5}, Lcom/android/server/wm/EmulatorDisplayOverlay;-><init>(Landroid/content/Context;Landroid/view/Display;Landroid/view/SurfaceSession;I)V

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mEmulatorDisplayOverlay:Lcom/android/server/wm/EmulatorDisplayOverlay;

    .line 6285
    :cond_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mEmulatorDisplayOverlay:Lcom/android/server/wm/EmulatorDisplayOverlay;

    const/4 v2, 0x1

    invoke-virtual {v0, v2}, Lcom/android/server/wm/EmulatorDisplayOverlay;->setVisibility(Z)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 6287
    :try_start_2
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    monitor-exit v1

    .line 6269
    return-void

    .line 6286
    :catchall_0
    move-exception v0

    .line 6287
    :try_start_3
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 6286
    throw v0
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 6270
    :catchall_1
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public showEmulatorDisplayOverlayIfNeeded()V
    .locals 3

    .prologue
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    invoke-virtual {v0}, Landroid/content/Context;->getResources()Landroid/content/res/Resources;

    move-result-object v0

    const v1, #android:bool@config_windowEnableCircularEmulatorDisplayOverlay#t

    invoke-virtual {v0, v1}, Landroid/content/res/Resources;->getBoolean(I)Z

    move-result v0

    if-eqz v0, :cond_0

    const-string v0, "ro.emulator.circular"

    const/4 v1, 0x0

    invoke-static {v0, v1}, Landroid/os/SystemProperties;->getBoolean(Ljava/lang/String;Z)Z

    move-result v0

    .line 6226
    if-eqz v0, :cond_0

    .line 6229
    sget-boolean v0, Landroid/os/Build;->IS_EMULATOR:Z

    .line 6226
    if-eqz v0, :cond_0

    .line 6230
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v2, 0x24

    invoke-virtual {v1, v2}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(I)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 6225
    :cond_0
    return-void
.end method

.method showGlobalActions()V
    .locals 1

    .prologue
    .line 5682
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0}, Landroid/view/WindowManagerPolicy;->showGlobalActions()V

    .line 5681
    return-void
.end method

.method public showRecentApps(Z)V
    .locals 1
    .param p1, "fromHome"    # Z

    .prologue
    .line 10488
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->showRecentApps(Z)V

    .line 10487
    return-void
.end method

.method public showStrictModeViolation(Z)V
    .locals 5
    .param p1, "on"    # Z

    .prologue
    .line 6298
    invoke-static {}, Landroid/os/Binder;->getCallingPid()I

    move-result v0

    .line 6299
    .local v0, "pid":I
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    if-eqz p1, :cond_0

    const/4 v1, 0x1

    :goto_0
    const/16 v4, 0x19

    invoke-virtual {v3, v4, v1, v0}, Lcom/android/server/wm/WindowManagerService$H;->obtainMessage(III)Landroid/os/Message;

    move-result-object v1

    invoke-virtual {v2, v1}, Lcom/android/server/wm/WindowManagerService$H;->sendMessage(Landroid/os/Message;)Z

    .line 6297
    return-void

    .line 6299
    :cond_0
    const/4 v1, 0x0

    goto :goto_0
.end method

.method public shutdown(Z)V
    .locals 2
    .param p1, "confirm"    # Z

    .prologue
    .line 5861
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "userrequested"

    invoke-static {v0, v1, p1}, Lcom/android/server/power/ShutdownThread;->shutdown(Landroid/content/Context;Ljava/lang/String;Z)V

    .line 5860
    return-void
.end method

.method public startAppFreezingScreen(Landroid/os/IBinder;I)V
    .locals 7
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "configChanges"    # I

    .prologue
    .line 4831
    const-string/jumbo v3, "android.permission.MANAGE_APP_TOKENS"

    .line 4832
    const-string/jumbo v4, "setAppFreezingScreen()"

    .line 4831
    invoke-direct {p0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v3

    if-nez v3, :cond_0

    .line 4833
    new-instance v3, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v3, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v3

    .line 4836
    :cond_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 4837
    if-nez p2, :cond_1

    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->okToDisplay()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    if-eqz v3, :cond_1

    monitor-exit v4

    .line 4839
    return-void

    .line 4842
    :cond_1
    :try_start_1
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v2

    .line 4843
    .local v2, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v2, :cond_2

    iget-object v3, v2, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;

    if-nez v3, :cond_3

    .line 4844
    :cond_2
    const-string/jumbo v3, "WindowManager"

    new-instance v5, Ljava/lang/StringBuilder;

    invoke-direct {v5}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v6, "Attempted to freeze screen with non-existing app token: "

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-static {v3, v5}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v4

    .line 4845
    return-void

    .line 4847
    :cond_3
    :try_start_2
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 4848
    .local v0, "origId":J
    invoke-direct {p0, v2}, Lcom/android/server/wm/WindowManagerService;->startAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;)V

    .line 4849
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v4

    .line 4830
    return-void

    .line 4836
    .end local v0    # "origId":J
    .end local v2    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method public startFreezingScreen(II)V
    .locals 7
    .param p1, "exitAnim"    # I
    .param p2, "enterAnim"    # I

    .prologue
    .line 5507
    const-string/jumbo v2, "android.permission.FREEZE_SCREEN"

    .line 5508
    const-string/jumbo v3, "startFreezingScreen()"

    .line 5507
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 5509
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires FREEZE_SCREEN permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 5512
    :cond_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 5513
    :try_start_0
    iget-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    if-nez v2, :cond_1

    .line 5514
    const/4 v2, 0x1

    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    .line 5515
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    move-result-wide v0

    .line 5517
    .local v0, "origId":J
    const/4 v2, 0x0

    :try_start_1
    invoke-direct {p0, v2, p1, p2}, Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(ZII)V

    .line 5518
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x1e

    invoke-virtual {v2, v4}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 5519
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v4, 0x1388

    const/16 v6, 0x1e

    invoke-virtual {v2, v6, v4, v5}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5521
    :try_start_2
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .end local v0    # "origId":J
    :cond_1
    monitor-exit v3

    .line 5506
    return-void

    .line 5520
    .restart local v0    # "origId":J
    :catchall_0
    move-exception v2

    .line 5521
    :try_start_3
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5520
    throw v2
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 5512
    .end local v0    # "origId":J
    :catchall_1
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method startMovingTask(Landroid/view/IWindow;FF)Z
    .locals 6
    .param p1, "window"    # Landroid/view/IWindow;
    .param p2, "startX"    # F
    .param p3, "startY"    # F

    .prologue
    const/4 v5, 0x0

    .line 7829
    const/4 v1, 0x0

    .line 7830
    .local v1, "win":Lcom/android/server/wm/WindowState;
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 7831
    const/4 v2, 0x0

    const/4 v4, 0x0

    :try_start_0
    invoke-virtual {p0, v2, p1, v4}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v1

    .line 7834
    .local v1, "win":Lcom/android/server/wm/WindowState;
    const/4 v2, 0x0

    invoke-direct {p0, v1, v2, p2, p3}, Lcom/android/server/wm/WindowManagerService;->startPositioningLocked(Lcom/android/server/wm/WindowState;ZFF)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v2

    if-nez v2, :cond_0

    monitor-exit v3

    .line 7835
    return v5

    :cond_0
    monitor-exit v3

    .line 7839
    :try_start_1
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mActivityManager:Landroid/app/IActivityManager;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowState;->getTask()Lcom/android/server/wm/Task;

    move-result-object v3

    iget v3, v3, Lcom/android/server/wm/Task;->mTaskId:I

    invoke-interface {v2, v3}, Landroid/app/IActivityManager;->setFocusedTask(I)V
    :try_end_1
    .catch Landroid/os/RemoteException; {:try_start_1 .. :try_end_1} :catch_0

    .line 7841
    :goto_0
    const/4 v2, 0x1

    return v2

    .line 7830
    .end local v1    # "win":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v2

    monitor-exit v3

    throw v2

    .line 7840
    .restart local v1    # "win":Lcom/android/server/wm/WindowState;
    :catch_0
    move-exception v0

    .local v0, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method public startViewServer(I)Z
    .locals 4
    .param p1, "port"    # I

    .prologue
    const/4 v3, 0x0

    .line 7180
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v1

    if-eqz v1, :cond_0

    .line 7181
    return v3

    .line 7184
    :cond_0
    const-string/jumbo v1, "android.permission.DUMP"

    const-string/jumbo v2, "startViewServer"

    invoke-direct {p0, v1, v2}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_1

    .line 7185
    return v3

    .line 7188
    :cond_1
    const/16 v1, 0x400

    if-ge p1, v1, :cond_2

    .line 7189
    return v3

    .line 7192
    :cond_2
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    if-eqz v1, :cond_4

    .line 7193
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    invoke-virtual {v1}, Lcom/android/server/wm/ViewServer;->isRunning()Z

    move-result v1

    if-nez v1, :cond_3

    .line 7195
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    invoke-virtual {v1}, Lcom/android/server/wm/ViewServer;->start()Z
    :try_end_0
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_0

    move-result v1

    return v1

    .line 7196
    :catch_0
    move-exception v0

    .line 7197
    .local v0, "e":Ljava/io/IOException;
    const-string/jumbo v1, "WindowManager"

    const-string/jumbo v2, "View server did not start"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 7200
    .end local v0    # "e":Ljava/io/IOException;
    :cond_3
    return v3

    .line 7204
    :cond_4
    :try_start_1
    new-instance v1, Lcom/android/server/wm/ViewServer;

    invoke-direct {v1, p0, p1}, Lcom/android/server/wm/ViewServer;-><init>(Lcom/android/server/wm/WindowManagerService;I)V

    iput-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    .line 7205
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    invoke-virtual {v1}, Lcom/android/server/wm/ViewServer;->start()Z
    :try_end_1
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_1

    move-result v1

    return v1

    .line 7206
    :catch_1
    move-exception v0

    .line 7207
    .restart local v0    # "e":Ljava/io/IOException;
    const-string/jumbo v1, "WindowManager"

    const-string/jumbo v2, "View server did not start"

    invoke-static {v1, v2}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 7209
    return v3
.end method

.method public statusBarVisibilityChanged(I)V
    .locals 2
    .param p1, "visibility"    # I

    .prologue
    .line 10347
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    const-string/jumbo v1, "android.permission.STATUS_BAR"

    invoke-virtual {v0, v1}, Landroid/content/Context;->checkCallingOrSelfPermission(Ljava/lang/String;)I

    move-result v0

    if-eqz v0, :cond_0

    .line 10349
    new-instance v0, Ljava/lang/SecurityException;

    const-string/jumbo v1, "Caller does not hold permission android.permission.STATUS_BAR"

    invoke-direct {v0, v1}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 10353
    :cond_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 10354
    :try_start_0
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mLastStatusBarVisibility:I

    .line 10355
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v0, p1}, Landroid/view/WindowManagerPolicy;->adjustSystemUiVisibilityLw(I)I

    move-result p1

    .line 10356
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->updateStatusBarVisibilityLocked(I)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    .line 10346
    return-void

    .line 10353
    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method public stopAppFreezingScreen(Landroid/os/IBinder;Z)V
    .locals 5
    .param p1, "token"    # Landroid/os/IBinder;
    .param p2, "force"    # Z

    .prologue
    .line 4855
    const-string/jumbo v3, "android.permission.MANAGE_APP_TOKENS"

    .line 4856
    const-string/jumbo v4, "setAppFreezingScreen()"

    .line 4855
    invoke-direct {p0, v3, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v3

    if-nez v3, :cond_0

    .line 4857
    new-instance v3, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v3, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v3

    .line 4860
    :cond_0
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 4861
    :try_start_0
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->findAppWindowToken(Landroid/os/IBinder;)Lcom/android/server/wm/AppWindowToken;

    move-result-object v2

    .line 4862
    .local v2, "wtoken":Lcom/android/server/wm/AppWindowToken;
    if-eqz v2, :cond_1

    iget-object v3, v2, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-nez v3, :cond_2

    :cond_1
    monitor-exit v4

    .line 4863
    return-void

    .line 4865
    :cond_2
    :try_start_1
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 4868
    .local v0, "origId":J
    const/4 v3, 0x1

    invoke-virtual {p0, v2, v3, p2}, Lcom/android/server/wm/WindowManagerService;->unsetAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;ZZ)V

    .line 4869
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v4

    .line 4854
    return-void

    .line 4860
    .end local v0    # "origId":J
    .end local v2    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3
.end method

.method stopFreezingDisplayLocked()V
    .locals 18

    .prologue
    .line 10166
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-nez v3, :cond_0

    .line 10167
    return-void

    .line 10170
    :cond_0
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    if-nez v3, :cond_1

    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    if-lez v3, :cond_2

    .line 10179
    :cond_1
    return-void

    .line 10171
    :cond_2
    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    const/4 v4, 0x1

    if-eq v3, v4, :cond_1

    .line 10172
    move-object/from16 v0, p0

    iget-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    .line 10170
    if-nez v3, :cond_1

    .line 10172
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mOpeningApps:Landroid/util/ArraySet;

    invoke-virtual {v3}, Landroid/util/ArraySet;->isEmpty()Z

    move-result v3

    if-eqz v3, :cond_1

    .line 10185
    const/4 v3, 0x0

    move-object/from16 v0, p0

    iput-boolean v3, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    .line 10186
    invoke-static {}, Landroid/os/SystemClock;->elapsedRealtime()J

    move-result-wide v4

    move-object/from16 v0, p0

    iget-wide v6, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayFreezeTime:J

    sub-long/2addr v4, v6

    long-to-int v3, v4

    move-object/from16 v0, p0

    iput v3, v0, Lcom/android/server/wm/WindowManagerService;->mLastDisplayFreezeDuration:I

    .line 10187
    new-instance v16, Ljava/lang/StringBuilder;

    const/16 v3, 0x80

    move-object/from16 v0, v16

    invoke-direct {v0, v3}, Ljava/lang/StringBuilder;-><init>(I)V

    .line 10188
    .local v16, "sb":Ljava/lang/StringBuilder;
    const-string/jumbo v3, "Screen frozen for "

    move-object/from16 v0, v16

    invoke-virtual {v0, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    .line 10189
    move-object/from16 v0, p0

    iget v3, v0, Lcom/android/server/wm/WindowManagerService;->mLastDisplayFreezeDuration:I

    int-to-long v4, v3

    move-object/from16 v0, v16

    invoke-static {v4, v5, v0}, Landroid/util/TimeUtils;->formatDuration(JLjava/lang/StringBuilder;)V

    .line 10190
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    if-eqz v3, :cond_3

    .line 10191
    const-string/jumbo v3, " due to "

    move-object/from16 v0, v16

    invoke-virtual {v0, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    .line 10192
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    move-object/from16 v0, v16

    invoke-virtual {v0, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    .line 10194
    :cond_3
    const-string/jumbo v3, "WindowManager"

    invoke-virtual/range {v16 .. v16}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v4

    invoke-static {v3, v4}, Landroid/util/Slog;->i(Ljava/lang/String;Ljava/lang/String;)I

    .line 10195
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x11

    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 10196
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x1e

    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 10201
    const/16 v17, 0x0

    .line 10203
    .local v17, "updateRotation":Z
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v12

    .line 10204
    .local v12, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v13

    .line 10206
    .local v13, "displayId":I
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    invoke-virtual {v3, v13}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v2

    .line 10207
    .local v2, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    if-eqz v2, :cond_8

    .line 10208
    invoke-virtual {v2}, Lcom/android/server/wm/ScreenRotationAnimation;->hasScreenshot()Z

    move-result v3

    .line 10207
    if-eqz v3, :cond_8

    .line 10211
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v14

    .line 10213
    .local v14, "displayInfo":Landroid/view/DisplayInfo;
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->isDimming()Z

    move-result v15

    .line 10214
    .local v15, "isDimming":Z
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p0

    iget v4, v0, Lcom/android/server/wm/WindowManagerService;->mExitAnimId:I

    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/wm/WindowManagerService;->mEnterAnimId:I

    invoke-interface {v3, v4, v5, v15}, Landroid/view/WindowManagerPolicy;->validateRotationAnimationLw(IIZ)Z

    move-result v3

    if-nez v3, :cond_4

    .line 10215
    const/4 v3, 0x0

    move-object/from16 v0, p0

    iput v3, v0, Lcom/android/server/wm/WindowManagerService;->mEnterAnimId:I

    const/4 v3, 0x0

    move-object/from16 v0, p0

    iput v3, v0, Lcom/android/server/wm/WindowManagerService;->mExitAnimId:I

    .line 10217
    :cond_4

    invoke-static/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->isFlymeDisableScreenRotation(Lcom/android/server/wm/WindowManagerService;)Z

    move-result v3

    if-eqz v3, :cond_flyme_0

    move-object/from16 v0, p0

    invoke-static {v0, v2}, Lcom/android/server/wm/WindowManagerService$FlymeInjector;->updateFlymeScreenRotationAnimation(Lcom/android/server/wm/WindowManagerService;Lcom/android/server/wm/ScreenRotationAnimation;)Z

    move-result v17

    goto :goto_flyme_0

    :cond_flyme_0

    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    const-wide/16 v4, 0x2710

    .line 10218
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getTransitionAnimationScaleLocked()F

    move-result v6

    iget v7, v14, Landroid/view/DisplayInfo;->logicalWidth:I

    .line 10219
    iget v8, v14, Landroid/view/DisplayInfo;->logicalHeight:I

    move-object/from16 v0, p0

    iget v9, v0, Lcom/android/server/wm/WindowManagerService;->mExitAnimId:I

    move-object/from16 v0, p0

    iget v10, v0, Lcom/android/server/wm/WindowManagerService;->mEnterAnimId:I

    .line 10217
    invoke-virtual/range {v2 .. v10}, Lcom/android/server/wm/ScreenRotationAnimation;->dismiss(Landroid/view/SurfaceSession;JFIIII)Z

    move-result v3

    if-eqz v3, :cond_7

    .line 10220
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->scheduleAnimationLocked()V

    .line 10234
    .end local v14    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v15    # "isDimming":Z
    :goto_0
    :goto_flyme_0
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    invoke-virtual {v3}, Lcom/android/server/wm/InputMonitor;->thawInputDispatchingLw()V

    .line 10242
    const/4 v3, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Z)Z

    move-result v11

    .line 10249
    .local v11, "configChanged":Z
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0xf

    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 10250
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v4, 0x7d0

    const/16 v6, 0xf

    invoke-virtual {v3, v6, v4, v5}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 10252
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mScreenFrozenLock:Landroid/os/PowerManager$WakeLock;

    invoke-virtual {v3}, Landroid/os/PowerManager$WakeLock;->release()V

    .line 10254
    if-eqz v17, :cond_5

    .line 10256
    const/4 v3, 0x0

    move-object/from16 v0, p0

    invoke-virtual {v0, v3}, Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked(Z)Z

    move-result v3

    or-int/2addr v11, v3

    .line 10259
    :cond_5
    if-eqz v11, :cond_6

    .line 10260
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v4, 0x12

    invoke-virtual {v3, v4}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 10165
    :cond_6
    return-void

    .line 10222
    .end local v11    # "configChanged":Z
    .restart local v14    # "displayInfo":Landroid/view/DisplayInfo;
    .restart local v15    # "isDimming":Z
    :cond_7
    invoke-virtual {v2}, Lcom/android/server/wm/ScreenRotationAnimation;->kill()V

    .line 10223
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v4, 0x0

    invoke-virtual {v3, v13, v4}, Lcom/android/server/wm/WindowAnimator;->setScreenRotationAnimationLocked(ILcom/android/server/wm/ScreenRotationAnimation;)V

    .line 10224
    const/16 v17, 0x1

    goto :goto_0

    .line 10227
    .end local v14    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v15    # "isDimming":Z
    :cond_8
    if-eqz v2, :cond_9

    .line 10228
    invoke-virtual {v2}, Lcom/android/server/wm/ScreenRotationAnimation;->kill()V

    .line 10229
    move-object/from16 v0, p0

    iget-object v3, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v4, 0x0

    invoke-virtual {v3, v13, v4}, Lcom/android/server/wm/WindowAnimator;->setScreenRotationAnimationLocked(ILcom/android/server/wm/ScreenRotationAnimation;)V

    .line 10231
    :cond_9
    const/16 v17, 0x1

    goto :goto_0
.end method

.method public stopFreezingScreen()V
    .locals 4

    .prologue
    .line 5529
    const-string/jumbo v2, "android.permission.FREEZE_SCREEN"

    .line 5530
    const-string/jumbo v3, "stopFreezingScreen()"

    .line 5529
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 5531
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires FREEZE_SCREEN permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 5534
    :cond_0
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v3

    .line 5535
    :try_start_0
    iget-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    if-eqz v2, :cond_1

    .line 5536
    const/4 v2, 0x0

    iput-boolean v2, p0, Lcom/android/server/wm/WindowManagerService;->mClientFreezingScreen:Z

    .line 5537
    const-string/jumbo v2, "client"

    iput-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    .line 5538
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_1

    move-result-wide v0

    .line 5540
    .local v0, "origId":J
    :try_start_1
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->stopFreezingDisplayLocked()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 5542
    :try_start_2
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    .end local v0    # "origId":J
    :cond_1
    monitor-exit v3

    .line 5528
    return-void

    .line 5541
    .restart local v0    # "origId":J
    :catchall_0
    move-exception v2

    .line 5542
    :try_start_3
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 5541
    throw v2
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    .line 5534
    .end local v0    # "origId":J
    :catchall_1
    move-exception v2

    monitor-exit v3

    throw v2
.end method

.method stopUsingSavedSurfaceLocked()V
    .locals 3

    .prologue
    .line 9015
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedEarlyAnim:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v2

    add-int/lit8 v0, v2, -0x1

    .local v0, "i":I
    :goto_0
    if-ltz v0, :cond_0

    .line 9016
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedEarlyAnim:Ljava/util/ArrayList;

    invoke-virtual {v2, v0}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/AppWindowToken;

    .line 9017
    .local v1, "wtoken":Lcom/android/server/wm/AppWindowToken;
    invoke-virtual {v1}, Lcom/android/server/wm/AppWindowToken;->stopUsingSavedSurfaceLocked()V

    .line 9015
    add-int/lit8 v0, v0, -0x1

    goto :goto_0

    .line 9019
    .end local v1    # "wtoken":Lcom/android/server/wm/AppWindowToken;
    :cond_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mFinishedEarlyAnim:Ljava/util/ArrayList;

    invoke-virtual {v2}, Ljava/util/ArrayList;->clear()V

    .line 9014
    return-void
.end method

.method public stopViewServer()Z
    .locals 3

    .prologue
    const/4 v2, 0x0

    .line 7227
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v0

    if-eqz v0, :cond_0

    .line 7228
    return v2

    .line 7231
    :cond_0
    const-string/jumbo v0, "android.permission.DUMP"

    const-string/jumbo v1, "stopViewServer"

    invoke-direct {p0, v0, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v0

    if-nez v0, :cond_1

    .line 7232
    return v2

    .line 7235
    :cond_1
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    if-eqz v0, :cond_2

    .line 7236
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mViewServer:Lcom/android/server/wm/ViewServer;

    invoke-virtual {v0}, Lcom/android/server/wm/ViewServer;->stop()Z

    move-result v0

    return v0

    .line 7238
    :cond_2
    return v2
.end method

.method subtractInsets(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    .locals 1
    .param p1, "display"    # Landroid/graphics/Rect;
    .param p2, "insets"    # Landroid/graphics/Rect;
    .param p3, "inOutBounds"    # Landroid/graphics/Rect;

    .prologue
    .line 11466
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect3:Landroid/graphics/Rect;

    invoke-virtual {v0, p1}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 11467
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect3:Landroid/graphics/Rect;

    invoke-virtual {v0, p2}, Landroid/graphics/Rect;->inset(Landroid/graphics/Rect;)V

    .line 11468
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect3:Landroid/graphics/Rect;

    invoke-virtual {p3, v0}, Landroid/graphics/Rect;->intersect(Landroid/graphics/Rect;)Z

    .line 11465
    return-void
.end method

.method public subtractNonDecorInsets(Landroid/graphics/Rect;)V
    .locals 7
    .param p1, "inOutBounds"    # Landroid/graphics/Rect;

    .prologue
    .line 11457
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11458
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect2:Landroid/graphics/Rect;

    invoke-direct {p0, v1}, Lcom/android/server/wm/WindowManagerService;->getNonDecorInsetsLocked(Landroid/graphics/Rect;)V

    .line 11459
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v0

    .line 11460
    .local v0, "di":Landroid/view/DisplayInfo;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    iget v3, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v4, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    const/4 v5, 0x0

    const/4 v6, 0x0

    invoke-virtual {v1, v5, v6, v3, v4}, Landroid/graphics/Rect;->set(IIII)V

    .line 11461
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect2:Landroid/graphics/Rect;

    invoke-virtual {p0, v1, v3, p1}, Lcom/android/server/wm/WindowManagerService;->subtractInsets(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11456
    return-void

    .line 11457
    .end local v0    # "di":Landroid/view/DisplayInfo;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public subtractStableInsets(Landroid/graphics/Rect;)V
    .locals 7
    .param p1, "inOutBounds"    # Landroid/graphics/Rect;

    .prologue
    .line 11441
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v2

    .line 11442
    :try_start_0
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect2:Landroid/graphics/Rect;

    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->getStableInsetsLocked(Landroid/graphics/Rect;)V

    .line 11443
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayInfoLocked()Landroid/view/DisplayInfo;

    move-result-object v0

    .line 11444
    .local v0, "di":Landroid/view/DisplayInfo;
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    iget v3, v0, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v4, v0, Landroid/view/DisplayInfo;->logicalHeight:I

    const/4 v5, 0x0

    const/4 v6, 0x0

    invoke-virtual {v1, v5, v6, v3, v4}, Landroid/graphics/Rect;->set(IIII)V

    .line 11445
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect:Landroid/graphics/Rect;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mTmpRect2:Landroid/graphics/Rect;

    invoke-virtual {p0, v1, v3, p1}, Lcom/android/server/wm/WindowManagerService;->subtractInsets(Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Rect;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v2

    .line 11440
    return-void

    .line 11441
    .end local v0    # "di":Landroid/view/DisplayInfo;
    :catchall_0
    move-exception v1

    monitor-exit v2

    throw v1
.end method

.method public switchInputMethod(Z)V
    .locals 2
    .param p1, "forwardDirection"    # Z

    .prologue
    .line 5852
    const-class v1, Landroid/view/inputmethod/InputMethodManagerInternal;

    invoke-static {v1}, Lcom/android/server/LocalServices;->getService(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Landroid/view/inputmethod/InputMethodManagerInternal;

    .line 5853
    .local v0, "inputMethodManagerInternal":Landroid/view/inputmethod/InputMethodManagerInternal;
    if-eqz v0, :cond_0

    .line 5854
    invoke-interface {v0, p1}, Landroid/view/inputmethod/InputMethodManagerInternal;->switchInputMethod(Z)V

    .line 5850
    :cond_0
    return-void
.end method

.method public systemReady()V
    .locals 4

    .prologue
    const/4 v0, 0x0

    .line 8260
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v1}, Landroid/view/WindowManagerPolicy;->systemReady()V

    .line 8261
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->judgeSingleHandSwitchBySize()Z

    move-result v1

    if-eqz v1, :cond_0

    const/4 v0, 0x1

    :cond_0
    sput v0, Lcom/android/server/wm/WindowManagerService;->mSingleHandSwitch:I

    .line 8262
    sget v0, Lcom/android/server/wm/WindowManagerService;->mSingleHandSwitch:I

    if-lez v0, :cond_1

    .line 8263
    new-instance v0, Lcom/android/server/wm/SingleHandAdapter;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mContext:Landroid/content/Context;

    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mUiHandler:Landroid/os/Handler;

    invoke-direct {v0, v1, v2, v3, p0}, Lcom/android/server/wm/SingleHandAdapter;-><init>(Landroid/content/Context;Landroid/os/Handler;Landroid/os/Handler;Lcom/android/server/wm/WindowManagerService;)V

    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandAdapter:Lcom/android/server/wm/SingleHandAdapter;

    .line 8264
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mSingleHandAdapter:Lcom/android/server/wm/SingleHandAdapter;

    invoke-virtual {v0}, Lcom/android/server/wm/SingleHandAdapter;->registerLocked()V

    .line 8259
    :cond_1
    return-void
.end method

.method public thawRotation()V
    .locals 6

    .prologue
    const/4 v5, 0x0

    .line 6761
    const-string/jumbo v2, "android.permission.SET_ORIENTATION"

    .line 6762
    const-string/jumbo v3, "thawRotation()"

    .line 6761
    invoke-direct {p0, v2, v3}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v2

    if-nez v2, :cond_0

    .line 6763
    new-instance v2, Ljava/lang/SecurityException;

    const-string/jumbo v3, "Requires SET_ORIENTATION permission"

    invoke-direct {v2, v3}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v2

    .line 6768
    :cond_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 6770
    .local v0, "origId":J
    :try_start_0
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const/4 v3, 0x0

    .line 6771
    const/16 v4, 0x309

    .line 6770
    invoke-interface {v2, v3, v4}, Landroid/view/WindowManagerPolicy;->setUserRotationMode(II)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 6773
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 6776
    invoke-virtual {p0, v5, v5}, Lcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V

    .line 6760
    return-void

    .line 6772
    :catchall_0
    move-exception v2

    .line 6773
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 6772
    throw v2
.end method

.method public unregisterPointerEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V
    .locals 1
    .param p1, "listener"    # Landroid/view/WindowManagerPolicy$PointerEventListener;

    .prologue
    .line 5800
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mPointerEventDispatcher:Lcom/android/server/wm/PointerEventDispatcher;

    invoke-virtual {v0, p1}, Lcom/android/server/wm/PointerEventDispatcher;->unregisterInputEventListener(Landroid/view/WindowManagerPolicy$PointerEventListener;)V

    .line 5799
    return-void
.end method

.method unsetAppFreezingScreenLocked(Lcom/android/server/wm/AppWindowToken;ZZ)V
    .locals 10
    .param p1, "wtoken"    # Lcom/android/server/wm/AppWindowToken;
    .param p2, "unfreezeSurfaceNow"    # Z
    .param p3, "force"    # Z

    .prologue
    const/4 v6, 0x0

    .line 4770
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-boolean v4, v4, Lcom/android/server/wm/AppWindowAnimator;->freezingScreen:Z

    if-eqz v4, :cond_7

    .line 4773
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 4774
    .local v0, "N":I
    const/4 v2, 0x0

    .line 4775
    .local v2, "unfrozeWindows":Z
    const/4 v1, 0x0

    .local v1, "i":I
    :goto_0
    if-ge v1, v0, :cond_3

    .line 4776
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->allAppWindows:Lcom/android/server/wm/WindowList;

    invoke-virtual {v4, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v3

    check-cast v3, Lcom/android/server/wm/WindowState;

    .line 4777
    .local v3, "w":Lcom/android/server/wm/WindowState;
    iget-boolean v4, v3, Lcom/android/server/wm/WindowState;->mAppFreezing:Z

    if-eqz v4, :cond_1

    .line 4778
    iput-boolean v6, v3, Lcom/android/server/wm/WindowState;->mAppFreezing:Z

    .line 4779
    iget-boolean v4, v3, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v4, :cond_0

    iget-boolean v4, v3, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    if-eqz v4, :cond_2

    .line 4785
    :cond_0
    :goto_1
    iput v6, v3, Lcom/android/server/wm/WindowState;->mLastFreezeDuration:I

    .line 4786
    const/4 v2, 0x1

    .line 4787
    invoke-virtual {v3}, Lcom/android/server/wm/WindowState;->setDisplayLayoutNeeded()V

    .line 4775
    :cond_1
    add-int/lit8 v1, v1, 0x1

    goto :goto_0

    .line 4780
    :cond_2
    iget v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    const/4 v5, 0x2

    if-eq v4, v5, :cond_0

    .line 4782
    const/4 v4, 0x1

    iput-boolean v4, v3, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    .line 4783
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    iput-boolean v6, v4, Lcom/android/server/wm/WindowSurfacePlacer;->mOrientationChangeComplete:Z

    goto :goto_1

    .line 4790
    .end local v3    # "w":Lcom/android/server/wm/WindowState;
    :cond_3
    if-nez p3, :cond_4

    if-eqz v2, :cond_5

    .line 4792
    :cond_4
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iput-boolean v6, v4, Lcom/android/server/wm/AppWindowAnimator;->freezingScreen:Z

    .line 4793
    iget-object v4, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-static {}, Landroid/os/SystemClock;->elapsedRealtime()J

    move-result-wide v6

    .line 4794
    iget-wide v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFreezeTime:J

    .line 4793
    sub-long/2addr v6, v8

    long-to-int v5, v6

    iput v5, v4, Lcom/android/server/wm/AppWindowAnimator;->lastFreezeDuration:I

    .line 4795
    iget v4, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    add-int/lit8 v4, v4, -0x1

    iput v4, p0, Lcom/android/server/wm/WindowManagerService;->mAppsFreezingScreen:I

    .line 4796
    iput-object p1, p0, Lcom/android/server/wm/WindowManagerService;->mLastFinishedFreezeSource:Ljava/lang/Object;

    .line 4798
    :cond_5
    if-eqz p2, :cond_7

    .line 4799
    if-eqz v2, :cond_6

    .line 4800
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v4}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    .line 4802
    :cond_6
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->stopFreezingDisplayLocked()V

    .line 4769
    .end local v0    # "N":I
    .end local v1    # "i":I
    .end local v2    # "unfrozeWindows":Z
    :cond_7
    return-void
.end method

.method public updateAppOpsState()V
    .locals 14

    .prologue
    const/4 v8, 0x1

    const/4 v9, 0x0

    .line 2665
    iget-object v10, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v10

    .line 2666
    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 2667
    .local v2, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_0
    if-ge v0, v2, :cond_4

    .line 2668
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v7}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v6

    .line 2669
    .local v6, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    .line 2670
    .local v3, "numWindows":I
    const/4 v5, 0x0

    .local v5, "winNdx":I
    :goto_1
    if-ge v5, v3, :cond_3

    .line 2671
    invoke-virtual {v6, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .line 2672
    .local v4, "win":Lcom/android/server/wm/WindowState;
    iget v7, v4, Lcom/android/server/wm/WindowState;->mAppOp:I

    const/4 v11, -0x1

    if-eq v7, v11, :cond_0

    .line 2673
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mAppOps:Landroid/app/AppOpsManager;

    iget v11, v4, Lcom/android/server/wm/WindowState;->mAppOp:I

    invoke-virtual {v4}, Lcom/android/server/wm/WindowState;->getOwningUid()I

    move-result v12

    .line 2674
    invoke-virtual {v4}, Lcom/android/server/wm/WindowState;->getOwningPackage()Ljava/lang/String;

    move-result-object v13

    .line 2673
    invoke-virtual {v7, v11, v12, v13}, Landroid/app/AppOpsManager;->checkOpNoThrow(IILjava/lang/String;)I

    move-result v1

    .line 2675
    .local v1, "mode":I
    if-eqz v1, :cond_1

    .line 2676
    const/4 v7, 0x3

    if-ne v1, v7, :cond_2

    move v7, v8

    .line 2675
    :goto_2
    invoke-virtual {v4, v7}, Lcom/android/server/wm/WindowState;->setAppOpVisibilityLw(Z)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 2670
    .end local v1    # "mode":I
    :cond_0
    add-int/lit8 v5, v5, 0x1

    goto :goto_1

    .restart local v1    # "mode":I
    :cond_1
    move v7, v8

    .line 2675
    goto :goto_2

    :cond_2
    move v7, v9

    .line 2676
    goto :goto_2

    .line 2667
    .end local v1    # "mode":I
    .end local v4    # "win":Lcom/android/server/wm/WindowState;
    :cond_3
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .end local v3    # "numWindows":I
    .end local v5    # "winNdx":I
    .end local v6    # "windows":Lcom/android/server/wm/WindowList;
    :cond_4
    monitor-exit v10

    .line 2664
    return-void

    .line 2665
    .end local v0    # "displayNdx":I
    .end local v2    # "numDisplays":I
    :catchall_0
    move-exception v7

    monitor-exit v10

    throw v7
.end method

.method updateDisplayAndOrientationLocked(I)Landroid/view/DisplayInfo;
    .locals 14
    .param p1, "uiMode"    # I

    .prologue
    .line 7661
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 7664
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    iget v11, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    const/4 v12, 0x1

    if-eq v11, v12, :cond_1

    .line 7665
    iget v11, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    const/4 v12, 0x3

    if-ne v11, v12, :cond_2

    const/4 v10, 0x1

    .line 7666
    .local v10, "rotated":Z
    :goto_0
    if-eqz v10, :cond_3

    .line 7667
    iget v9, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    .line 7668
    .local v9, "realdw":I
    :goto_1
    if-eqz v10, :cond_4

    .line 7669
    iget v8, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    .line 7670
    .local v8, "realdh":I
    :goto_2
    move v5, v9

    .line 7671
    .local v5, "dw":I
    move v2, v8

    .line 7673
    .local v2, "dh":I
    iget-boolean v11, p0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    if-eqz v11, :cond_0

    .line 7674
    if-le v9, v8, :cond_5

    .line 7676
    int-to-float v11, v8

    const v12, 0x3fa66666    # 1.3f

    div-float/2addr v11, v12

    float-to-int v7, v11

    .line 7677
    .local v7, "maxw":I
    if-ge v7, v9, :cond_0

    .line 7678
    move v5, v7

    .line 7690
    .end local v7    # "maxw":I
    :cond_0
    :goto_3
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v12, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-interface {v11, v5, v2, v12, p1}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayWidth(IIII)I

    move-result v1

    .line 7691
    .local v1, "appWidth":I
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    iget v12, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-interface {v11, v5, v2, v12, p1}, Landroid/view/WindowManagerPolicy;->getNonDecorDisplayHeight(IIII)I

    move-result v0

    .line 7692
    .local v0, "appHeight":I
    invoke-virtual {v3}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v4

    .line 7693
    .local v4, "displayInfo":Landroid/view/DisplayInfo;
    iget v11, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    iput v11, v4, Landroid/view/DisplayInfo;->rotation:I

    .line 7694
    iput v5, v4, Landroid/view/DisplayInfo;->logicalWidth:I

    .line 7695
    iput v2, v4, Landroid/view/DisplayInfo;->logicalHeight:I

    .line 7696
    iget v11, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayDensity:I

    iput v11, v4, Landroid/view/DisplayInfo;->logicalDensityDpi:I

    .line 7697
    iput v1, v4, Landroid/view/DisplayInfo;->appWidth:I

    .line 7698
    iput v0, v4, Landroid/view/DisplayInfo;->appHeight:I

    .line 7699
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mRealDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 7700
    sget-object v12, Landroid/content/res/CompatibilityInfo;->DEFAULT_COMPATIBILITY_INFO:Landroid/content/res/CompatibilityInfo;

    const/4 v13, 0x0

    .line 7699
    invoke-virtual {v4, v11, v12, v13}, Landroid/view/DisplayInfo;->getLogicalMetrics(Landroid/util/DisplayMetrics;Landroid/content/res/CompatibilityInfo;Landroid/content/res/Configuration;)V

    .line 7701
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    invoke-virtual {v4, v11}, Landroid/view/DisplayInfo;->getAppMetrics(Landroid/util/DisplayMetrics;)V

    .line 7702
    iget-boolean v11, v3, Lcom/android/server/wm/DisplayContent;->mDisplayScalingDisabled:Z

    if-eqz v11, :cond_6

    .line 7703
    iget v11, v4, Landroid/view/DisplayInfo;->flags:I

    const/high16 v12, 0x40000000    # 2.0f

    or-int/2addr v11, v12

    iput v11, v4, Landroid/view/DisplayInfo;->flags:I

    .line 7708
    :goto_4
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayManagerInternal:Landroid/hardware/display/DisplayManagerInternal;

    .line 7709
    invoke-virtual {v3}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v12

    .line 7708
    invoke-virtual {v11, v12, v4}, Landroid/hardware/display/DisplayManagerInternal;->setDisplayInfoOverrideFromWindowManager(ILandroid/view/DisplayInfo;)V

    .line 7711
    iget-object v11, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayRect:Landroid/graphics/Rect;

    const/4 v12, 0x0

    const/4 v13, 0x0

    invoke-virtual {v11, v12, v13, v5, v2}, Landroid/graphics/Rect;->set(IIII)V

    .line 7716
    iget-object v11, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 7717
    iget-object v12, p0, Lcom/android/server/wm/WindowManagerService;->mCompatDisplayMetrics:Landroid/util/DisplayMetrics;

    .line 7716
    invoke-static {v11, v12}, Landroid/content/res/CompatibilityInfo;->computeCompatibleScaling(Landroid/util/DisplayMetrics;Landroid/util/DisplayMetrics;)F

    move-result v11

    iput v11, p0, Lcom/android/server/wm/WindowManagerService;->mCompatibleScreenScale:F

    .line 7718
    return-object v4

    .line 7664
    .end local v0    # "appHeight":I
    .end local v1    # "appWidth":I
    .end local v2    # "dh":I
    .end local v4    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v5    # "dw":I
    .end local v8    # "realdh":I
    .end local v9    # "realdw":I
    .end local v10    # "rotated":Z
    :cond_1
    const/4 v10, 0x1

    goto :goto_0

    .line 7665
    :cond_2
    const/4 v10, 0x0

    goto :goto_0

    .line 7667
    .restart local v10    # "rotated":Z
    :cond_3
    iget v9, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayWidth:I

    .restart local v9    # "realdw":I
    goto :goto_1

    .line 7669
    :cond_4
    iget v8, v3, Lcom/android/server/wm/DisplayContent;->mBaseDisplayHeight:I

    goto :goto_2

    .line 7682
    .restart local v2    # "dh":I
    .restart local v5    # "dw":I
    .restart local v8    # "realdh":I
    :cond_5
    int-to-float v11, v9

    const v12, 0x3fa66666    # 1.3f

    div-float/2addr v11, v12

    float-to-int v6, v11

    .line 7683
    .local v6, "maxh":I
    if-ge v6, v8, :cond_0

    .line 7684
    move v2, v6

    goto :goto_3

    .line 7705
    .end local v6    # "maxh":I
    .restart local v0    # "appHeight":I
    .restart local v1    # "appWidth":I
    .restart local v4    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_6
    iget v11, v4, Landroid/view/DisplayInfo;->flags:I

    const v12, -0x40000001    # -1.9999999f

    and-int/2addr v11, v12

    iput v11, v4, Landroid/view/DisplayInfo;->flags:I

    goto :goto_4
.end method

.method updateFocusedWindowLocked(IZ)Z
    .locals 12
    .param p1, "mode"    # I
    .param p2, "updateInputWindows"    # Z

    .prologue
    const-wide/16 v10, 0x20

    const/4 v9, 0x3

    const/4 v8, 0x2

    const/4 v5, 0x0

    const/4 v6, 0x1

    .line 9957
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->computeFocusedWindowLocked()Lcom/android/server/wm/WindowState;

    move-result-object v3

    .line 9958
    .local v3, "newFocus":Lcom/android/server/wm/WindowState;
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    if-eq v7, v3, :cond_6

    .line 9959
    const-string/jumbo v7, "wmUpdateFocus"

    invoke-static {v10, v11, v7}, Landroid/os/Trace;->traceBegin(JLjava/lang/String;)V

    .line 9962
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v7, v8}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 9963
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-virtual {v7, v8}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessage(I)Z

    .line 9965
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v0

    .line 9967
    .local v0, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-eq p1, v6, :cond_0

    .line 9968
    if-eq p1, v9, :cond_0

    move v5, v6

    .line 9966
    :cond_0
    invoke-virtual {p0, v5}, Lcom/android/server/wm/WindowManagerService;->moveInputMethodWindowsIfNeededLocked(Z)Z

    move-result v2

    .line 9969
    .local v2, "imWindowChanged":Z
    if-eqz v2, :cond_1

    .line 9970
    iput-boolean v6, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 9971
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->computeFocusedWindowLocked()Lcom/android/server/wm/WindowState;

    move-result-object v3

    .line 9976
    :cond_1
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    .line 9977
    .local v4, "oldFocus":Lcom/android/server/wm/WindowState;
    iput-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    .line 9978
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mLosingFocus:Ljava/util/ArrayList;

    invoke-virtual {v5, v3}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    .line 9980
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v5, v4, v3}, Landroid/view/WindowManagerPolicy;->focusChangedLw(Landroid/view/WindowManagerPolicy$WindowState;Landroid/view/WindowManagerPolicy$WindowState;)I

    move-result v1

    .line 9982
    .local v1, "focusChanged":I
    if-eqz v2, :cond_2

    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMethodWindow:Lcom/android/server/wm/WindowState;

    if-eq v4, v5, :cond_2

    .line 9984
    if-ne p1, v8, :cond_5

    .line 9985
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v5, v0, v6, p2}, Lcom/android/server/wm/WindowSurfacePlacer;->performLayoutLockedInner(Lcom/android/server/wm/DisplayContent;ZZ)V

    .line 9987
    and-int/lit8 v1, v1, -0x2

    .line 9995
    :cond_2
    :goto_0
    and-int/lit8 v5, v1, 0x1

    if-eqz v5, :cond_3

    .line 9997
    iput-boolean v6, v0, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 9998
    if-ne p1, v8, :cond_3

    .line 9999
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v5, v0, v6, p2}, Lcom/android/server/wm/WindowSurfacePlacer;->performLayoutLockedInner(Lcom/android/server/wm/DisplayContent;ZZ)V

    .line 10004
    :cond_3
    if-eq p1, v6, :cond_4

    .line 10007
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mInputMonitor:Lcom/android/server/wm/InputMonitor;

    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mCurrentFocus:Lcom/android/server/wm/WindowState;

    invoke-virtual {v5, v7, p2}, Lcom/android/server/wm/InputMonitor;->setInputFocusLw(Lcom/android/server/wm/WindowState;Z)V

    .line 10010
    :cond_4
    invoke-virtual {p0, v0}, Lcom/android/server/wm/WindowManagerService;->adjustForImeIfNeeded(Lcom/android/server/wm/DisplayContent;)V

    .line 10015
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v5

    invoke-virtual {v5, v4, v3}, Lcom/android/server/wm/DisplayContent;->scheduleToastWindowsTimeoutIfNeededLocked(Lcom/android/server/wm/WindowState;Lcom/android/server/wm/WindowState;)V

    .line 10018
    invoke-static {v10, v11}, Landroid/os/Trace;->traceEnd(J)V

    .line 10019
    return v6

    .line 9988
    :cond_5
    if-ne p1, v9, :cond_2

    .line 9991
    iget-object v5, p0, Lcom/android/server/wm/WindowManagerService;->mLayersController:Lcom/android/server/wm/WindowLayersController;

    invoke-virtual {v0}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v7

    invoke-virtual {v5, v7}, Lcom/android/server/wm/WindowLayersController;->assignLayersLocked(Lcom/android/server/wm/WindowList;)V

    goto :goto_0

    .line 10021
    .end local v0    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v1    # "focusChanged":I
    .end local v2    # "imWindowChanged":Z
    .end local v4    # "oldFocus":Lcom/android/server/wm/WindowState;
    :cond_6
    return v5
.end method

.method updateNonSystemOverlayWindowsVisibilityIfNeeded(Lcom/android/server/wm/WindowState;Z)V
    .locals 9
    .param p1, "win"    # Lcom/android/server/wm/WindowState;
    .param p2, "surfaceShown"    # Z

    .prologue
    .line 11835
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->hideNonSystemOverlayWindowsWhenVisible()Z

    move-result v8

    if-nez v8, :cond_0

    .line 11836
    return-void

    .line 11838
    :cond_0
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v8

    if-eqz v8, :cond_2

    const/4 v4, 0x0

    .line 11839
    .local v4, "systemAlertWindowsHidden":Z
    :goto_0
    if-eqz p2, :cond_3

    .line 11840
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v8, p1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v8

    if-nez v8, :cond_1

    .line 11841
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v8, p1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    .line 11847
    :cond_1
    :goto_1
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v8}, Ljava/util/ArrayList;->isEmpty()Z

    move-result v8

    if-eqz v8, :cond_4

    const/4 v1, 0x0

    .line 11849
    .local v1, "hideSystemAlertWindows":Z
    :goto_2
    if-ne v4, v1, :cond_5

    .line 11850
    return-void

    .line 11838
    .end local v1    # "hideSystemAlertWindows":Z
    .end local v4    # "systemAlertWindowsHidden":Z
    :cond_2
    const/4 v4, 0x1

    .restart local v4    # "systemAlertWindowsHidden":Z
    goto :goto_0

    .line 11844
    :cond_3
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mHidingNonSystemOverlayWindows:Ljava/util/ArrayList;

    invoke-virtual {v8, p1}, Ljava/util/ArrayList;->remove(Ljava/lang/Object;)Z

    goto :goto_1

    .line 11847
    :cond_4
    const/4 v1, 0x1

    goto :goto_2

    .line 11853
    .restart local v1    # "hideSystemAlertWindows":Z
    :cond_5
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8}, Landroid/util/SparseArray;->size()I

    move-result v2

    .line 11854
    .local v2, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_3
    if-ge v0, v2, :cond_7

    .line 11855
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v8, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v8}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v7

    .line 11856
    .local v7, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v3

    .line 11857
    .local v3, "numWindows":I
    const/4 v6, 0x0

    .local v6, "winNdx":I
    :goto_4
    if-ge v6, v3, :cond_6

    .line 11858
    invoke-virtual {v7, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/WindowState;

    .line 11859
    .local v5, "w":Lcom/android/server/wm/WindowState;
    invoke-virtual {v5, v1}, Lcom/android/server/wm/WindowState;->setForceHideNonSystemOverlayWindowIfNeeded(Z)V

    .line 11857
    add-int/lit8 v6, v6, 0x1

    goto :goto_4

    .line 11854
    .end local v5    # "w":Lcom/android/server/wm/WindowState;
    :cond_6
    add-int/lit8 v0, v0, 0x1

    goto :goto_3

    .line 11834
    .end local v3    # "numWindows":I
    .end local v6    # "winNdx":I
    .end local v7    # "windows":Lcom/android/server/wm/WindowList;
    :cond_7
    return-void
.end method

.method public updateOrientationFromAppTokens(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
    .locals 5
    .param p1, "currentConfig"    # Landroid/content/res/Configuration;
    .param p2, "freezeThisOneIfNeeded"    # Landroid/os/IBinder;

    .prologue
    .line 3789
    const-string/jumbo v1, "android.permission.MANAGE_APP_TOKENS"

    .line 3790
    const-string/jumbo v4, "updateOrientationFromAppTokens()"

    .line 3789
    invoke-direct {p0, v1, v4}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v1

    if-nez v1, :cond_0

    .line 3791
    new-instance v1, Ljava/lang/SecurityException;

    const-string/jumbo v4, "Requires MANAGE_APP_TOKENS permission"

    invoke-direct {v1, v4}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v1

    .line 3794
    :cond_0
    const/4 v0, 0x0

    .line 3795
    .local v0, "config":Landroid/content/res/Configuration;
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 3797
    .local v2, "ident":J
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    .line 3798
    :try_start_0
    invoke-direct {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->updateOrientationFromAppTokensLocked(Landroid/content/res/Configuration;Landroid/os/IBinder;)Landroid/content/res/Configuration;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result-object v0

    .local v0, "config":Landroid/content/res/Configuration;
    monitor-exit v1

    .line 3802
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3803
    return-object v0

    .line 3797
    .local v0, "config":Landroid/content/res/Configuration;
    :catchall_0
    move-exception v4

    monitor-exit v1

    throw v4
.end method

.method updateOrientationFromAppTokensLocked(Z)Z
    .locals 4
    .param p1, "inTransaction"    # Z

    .prologue
    .line 3867
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v0

    .line 3869
    .local v0, "ident":J
    :try_start_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getOrientationLocked()I

    move-result v2

    .line 3870
    .local v2, "req":I
    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    if-eq v2, v3, :cond_0

    .line 3871
    iput v2, p0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    .line 3874
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v3, v2}, Landroid/view/WindowManagerPolicy;->setCurrentOrientationLw(I)V

    .line 3875
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked(Z)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v3

    if-eqz v3, :cond_0

    .line 3877
    const/4 v3, 0x1

    .line 3883
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3877
    return v3

    .line 3881
    :cond_0
    const/4 v3, 0x0

    .line 3883
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3881
    return v3

    .line 3882
    .end local v2    # "req":I
    :catchall_0
    move-exception v3

    .line 3883
    invoke-static {v0, v1}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 3882
    throw v3
.end method

.method updatePointerIcon(Landroid/view/IWindow;)V
    .locals 10
    .param p1, "client"    # Landroid/view/IWindow;

    .prologue
    .line 11515
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    monitor-enter v7

    .line 11516
    :try_start_0
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-static {v6}, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;->-get0(Lcom/android/server/wm/WindowManagerService$MousePositionTracker;)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v6

    if-nez v6, :cond_0

    monitor-exit v7

    .line 11517
    return-void

    .line 11519
    :cond_0
    :try_start_1
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-static {v6}, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;->-get1(Lcom/android/server/wm/WindowManagerService$MousePositionTracker;)F

    move-result v3

    .line 11520
    .local v3, "mouseX":F
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mMousePositionTracker:Lcom/android/server/wm/WindowManagerService$MousePositionTracker;

    invoke-static {v6}, Lcom/android/server/wm/WindowManagerService$MousePositionTracker;->-get2(Lcom/android/server/wm/WindowManagerService$MousePositionTracker;)F
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result v4

    .local v4, "mouseY":F
    monitor-exit v7

    .line 11523
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v7

    .line 11524
    :try_start_2
    iget-object v6, p0, Lcom/android/server/wm/WindowManagerService;->mDragState:Lcom/android/server/wm/DragState;
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    if-eqz v6, :cond_1

    monitor-exit v7

    .line 11526
    return-void

    .line 11515
    .end local v3    # "mouseX":F
    .end local v4    # "mouseY":F
    :catchall_0
    move-exception v6

    monitor-exit v7

    throw v6

    .line 11528
    .restart local v3    # "mouseX":F
    .restart local v4    # "mouseY":F
    :cond_1
    const/4 v6, 0x0

    const/4 v8, 0x0

    :try_start_3
    invoke-virtual {p0, v6, p1, v8}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;

    move-result-object v0

    .line 11529
    .local v0, "callingWin":Lcom/android/server/wm/WindowState;
    if-nez v0, :cond_2

    .line 11530
    const-string/jumbo v6, "WindowManager"

    new-instance v8, Ljava/lang/StringBuilder;

    invoke-direct {v8}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v9, "Bad requesting window "

    invoke-virtual {v8, v9}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v8

    invoke-virtual {v8}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v8

    invoke-static {v6, v8}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_1

    monitor-exit v7

    .line 11531
    return-void

    .line 11533
    :cond_2
    :try_start_4
    invoke-virtual {v0}, Lcom/android/server/wm/WindowState;->getDisplayContent()Lcom/android/server/wm/DisplayContent;
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_1

    move-result-object v1

    .line 11534
    .local v1, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v1, :cond_3

    monitor-exit v7

    .line 11535
    return-void

    .line 11538
    :cond_3
    :try_start_5
    invoke-virtual {v1, v3, v4}, Lcom/android/server/wm/DisplayContent;->getTouchableWinAtPointLocked(FF)Lcom/android/server/wm/WindowState;
    :try_end_5
    .catchall {:try_start_5 .. :try_end_5} :catchall_1

    move-result-object v5

    .line 11539
    .local v5, "windowUnderPointer":Lcom/android/server/wm/WindowState;
    if-eq v5, v0, :cond_4

    monitor-exit v7

    .line 11540
    return-void

    .line 11543
    :cond_4
    :try_start_6
    iget-object v6, v5, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    .line 11544
    invoke-virtual {v5, v3}, Lcom/android/server/wm/WindowState;->translateToWindowX(F)F

    move-result v8

    .line 11545
    invoke-virtual {v5, v4}, Lcom/android/server/wm/WindowState;->translateToWindowY(F)F

    move-result v9

    .line 11543
    invoke-interface {v6, v8, v9}, Landroid/view/IWindow;->updatePointerIcon(FF)V
    :try_end_6
    .catch Landroid/os/RemoteException; {:try_start_6 .. :try_end_6} :catch_0
    .catchall {:try_start_6 .. :try_end_6} :catchall_1

    :goto_0
    monitor-exit v7

    .line 11512
    return-void

    .line 11546
    :catch_0
    move-exception v2

    .line 11547
    .local v2, "e":Landroid/os/RemoteException;
    :try_start_7
    const-string/jumbo v6, "WindowManager"

    const-string/jumbo v8, "unable to update pointer icon"

    invoke-static {v6, v8}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_7
    .catchall {:try_start_7 .. :try_end_7} :catchall_1

    goto :goto_0

    .line 11523
    .end local v0    # "callingWin":Lcom/android/server/wm/WindowState;
    .end local v1    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v2    # "e":Landroid/os/RemoteException;
    .end local v5    # "windowUnderPointer":Lcom/android/server/wm/WindowState;
    :catchall_1
    move-exception v6

    monitor-exit v7

    throw v6
.end method

.method updateResizingWindows(Lcom/android/server/wm/WindowState;)V
    .locals 8
    .param p1, "w"    # Lcom/android/server/wm/WindowState;

    .prologue
    .line 9652
    iget-object v3, p1, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    .line 9653
    .local v3, "winAnimator":Lcom/android/server/wm/WindowStateAnimator;
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v4, :cond_0

    iget v4, p1, Lcom/android/server/wm/WindowState;->mLayoutSeq:I

    iget v5, p0, Lcom/android/server/wm/WindowManagerService;->mLayoutSeq:I

    if-ne v4, v5, :cond_0

    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isGoneForLayoutLw()Z

    move-result v4

    if-eqz v4, :cond_1

    .line 9651
    :cond_0
    :goto_0
    return-void

    .line 9654
    :cond_1
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->getTask()Lcom/android/server/wm/Task;

    move-result-object v2

    .line 9663
    .local v2, "task":Lcom/android/server/wm/Task;
    if-eqz v2, :cond_2

    iget-object v4, v2, Lcom/android/server/wm/Task;->mStack:Lcom/android/server/wm/TaskStack;

    invoke-virtual {v4}, Lcom/android/server/wm/TaskStack;->getBoundsAnimating()Z

    move-result v4

    if-eqz v4, :cond_2

    .line 9664
    return-void

    .line 9666
    :cond_2
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->setReportResizeHints()Z

    .line 9667
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isConfigChanged()Z

    move-result v0

    .line 9672
    .local v0, "configChanged":Z
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isDragResizeChanged()Z

    move-result v4

    if-eqz v4, :cond_4

    .line 9673
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isDragResizingChangeReported()Z

    move-result v4

    if-eqz v4, :cond_3

    const/4 v1, 0x0

    .line 9683
    .local v1, "dragResizingChanged":Z
    :goto_1
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastFrame:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mFrame:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9685
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mContentInsetsChanged:Z

    if-nez v4, :cond_5

    .line 9686
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mVisibleInsetsChanged:Z

    .line 9685
    if-nez v4, :cond_5

    .line 9687
    iget-boolean v4, v3, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceResized:Z

    .line 9685
    if-nez v4, :cond_5

    .line 9688
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mOutsetsChanged:Z

    .line 9685
    if-nez v4, :cond_5

    .line 9689
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mFrameSizeChanged:Z

    .line 9685
    if-nez v4, :cond_5

    if-nez v0, :cond_5

    if-nez v1, :cond_5

    .line 9692
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isResizedWhileNotDragResizingReported()Z

    move-result v4

    if-eqz v4, :cond_5

    .line 9745
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    if-eqz v4, :cond_0

    .line 9746
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isDrawnLw()Z

    move-result v4

    if-eqz v4, :cond_0

    .line 9750
    const/4 v4, 0x0

    iput-boolean v4, p1, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    .line 9751
    invoke-static {}, Landroid/os/SystemClock;->elapsedRealtime()J

    move-result-wide v4

    .line 9752
    iget-wide v6, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayFreezeTime:J

    .line 9751
    sub-long/2addr v4, v6

    long-to-int v4, v4

    iput v4, p1, Lcom/android/server/wm/WindowState;->mLastFreezeDuration:I

    goto :goto_0

    .line 9673
    .end local v1    # "dragResizingChanged":Z
    :cond_3
    const/4 v1, 0x1

    .restart local v1    # "dragResizingChanged":Z
    goto :goto_1

    .line 9672
    .end local v1    # "dragResizingChanged":Z
    :cond_4
    const/4 v1, 0x0

    .restart local v1    # "dragResizingChanged":Z
    goto :goto_1

    .line 9712
    :cond_5
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_6

    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mAppDied:Z

    if-eqz v4, :cond_6

    .line 9713
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {v4}, Lcom/android/server/wm/AppWindowToken;->removeAllDeadWindows()V

    .line 9714
    return-void

    .line 9717
    :cond_6
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastOverscanInsets:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mOverscanInsets:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9718
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastContentInsets:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mContentInsets:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9719
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastVisibleInsets:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mVisibleInsets:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9720
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastStableInsets:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mStableInsets:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9721
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mLastOutsets:Landroid/graphics/Rect;

    iget-object v5, p1, Lcom/android/server/wm/WindowState;->mOutsets:Landroid/graphics/Rect;

    invoke-virtual {v4, v5}, Landroid/graphics/Rect;->set(Landroid/graphics/Rect;)V

    .line 9722
    invoke-virtual {p0, p1}, Lcom/android/server/wm/WindowManagerService;->makeWindowFreezingScreenIfNeededLocked(Lcom/android/server/wm/WindowState;)V

    .line 9728
    iget-boolean v4, p1, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    if-nez v4, :cond_7

    if-nez v1, :cond_7

    .line 9729
    invoke-virtual {p1}, Lcom/android/server/wm/WindowState;->isResizedWhileNotDragResizing()Z

    move-result v4

    .line 9728
    if-eqz v4, :cond_8

    .line 9735
    :cond_7
    const/4 v4, 0x1

    iput v4, v3, Lcom/android/server/wm/WindowStateAnimator;->mDrawState:I

    .line 9736
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v4, :cond_8

    .line 9737
    iget-object v4, p1, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {v4}, Lcom/android/server/wm/AppWindowToken;->clearAllDrawn()V

    .line 9740
    :cond_8
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v4, p1}, Ljava/util/ArrayList;->contains(Ljava/lang/Object;)Z

    move-result v4

    if-nez v4, :cond_0

    .line 9743
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mResizingWindows:Ljava/util/ArrayList;

    invoke-virtual {v4, p1}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    goto/16 :goto_0
.end method

.method public updateRotation(ZZ)V
    .locals 0
    .param p1, "alwaysSendConfiguration"    # Z
    .param p2, "forceRelayout"    # Z

    .prologue
    .line 6788
    invoke-virtual {p0, p1, p2}, Lcom/android/server/wm/WindowManagerService;->updateRotationUnchecked(ZZ)V

    .line 6787
    return-void
.end method

.method public updateRotationUnchecked(ZZ)V
    .locals 6
    .param p1, "alwaysSendConfiguration"    # Z
    .param p2, "forceRelayout"    # Z

    .prologue
    .line 6823
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v2

    .line 6825
    .local v2, "origId":J
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 6826
    const/4 v1, 0x0

    :try_start_0
    invoke-virtual {p0, v1}, Lcom/android/server/wm/WindowManagerService;->updateRotationUncheckedLocked(Z)Z

    move-result v0

    .line 6827
    .local v0, "changed":Z
    if-eqz v0, :cond_0

    if-eqz p2, :cond_1

    .line 6828
    :cond_0
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v1

    const/4 v5, 0x1

    iput-boolean v5, v1, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 6829
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v1}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    :cond_1
    monitor-exit v4

    .line 6833
    if-nez v0, :cond_2

    if-eqz p1, :cond_3

    .line 6834
    :cond_2
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->sendNewConfiguration()V

    .line 6837
    :cond_3
    invoke-static {v2, v3}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    .line 6819
    return-void

    .line 6825
    .end local v0    # "changed":Z
    :catchall_0
    move-exception v1

    monitor-exit v4

    throw v1
.end method

.method public updateRotationUncheckedLocked(Z)Z
    .locals 20
    .param p1, "inTransaction"    # Z

    .prologue
    .line 6849
    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/wm/WindowManagerService;->mDeferredRotationPauseCount:I

    if-lez v5, :cond_0

    .line 6853
    const/4 v5, 0x0

    return v5

    .line 6857
    :cond_0
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v6, 0x0

    invoke-virtual {v5, v6}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v3

    .line 6858
    .local v3, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    if-eqz v3, :cond_1

    invoke-virtual {v3}, Lcom/android/server/wm/ScreenRotationAnimation;->isAnimating()Z

    move-result v5

    if-eqz v5, :cond_1

    .line 6863
    const/4 v5, 0x0

    return v5

    .line 6865
    :cond_1
    move-object/from16 v0, p0

    iget-boolean v5, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayFrozen:Z

    if-eqz v5, :cond_2

    .line 6870
    const/4 v5, 0x0

    return v5

    .line 6873
    :cond_2
    move-object/from16 v0, p0

    iget-boolean v5, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayEnabled:Z

    if-nez v5, :cond_3

    .line 6876
    const/4 v5, 0x0

    return v5

    .line 6879
    :cond_3
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v12

    .line 6880
    .local v12, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v19

    .line 6882
    .local v19, "windows":Lcom/android/server/wm/WindowList;
    move-object/from16 v0, p0

    iget v0, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    move/from16 v16, v0

    .line 6883
    .local v16, "oldRotation":I
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    move-object/from16 v0, p0

    iget v7, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-interface {v5, v6, v7}, Landroid/view/WindowManagerPolicy;->rotationForOrientationLw(II)I

    move-result v4

    .line 6884
    .local v4, "rotation":I
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move/from16 v0, v16

    invoke-interface {v5, v0, v4}, Landroid/view/WindowManagerPolicy;->shouldRotateSeamlessly(II)Z

    move-result v17

    .line 6886
    .local v17, "rotateSeamlessly":Z
    if-eqz v17, :cond_7

    .line 6887
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v15, v5, -0x1

    .end local v17    # "rotateSeamlessly":Z
    .local v15, "i":I
    :goto_0
    if-ltz v15, :cond_7

    .line 6888
    move-object/from16 v0, v19

    invoke-virtual {v0, v15}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v18

    check-cast v18, Lcom/android/server/wm/WindowState;

    .line 6892
    .local v18, "w":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v18

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mSeamlesslyRotated:Z

    if-eqz v5, :cond_4

    .line 6893
    const/4 v5, 0x0

    return v5

    .line 6905
    :cond_4
    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/WindowState;->isChildWindow()Z

    move-result v5

    invoke-virtual/range {v18 .. v18}, Lcom/android/server/wm/WindowState;->isVisibleNow()Z

    move-result v6

    and-int/2addr v5, v6

    if-eqz v5, :cond_5

    .line 6906
    move-object/from16 v0, v18

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget-object v5, v5, Lcom/android/server/wm/WindowStateAnimator;->mSurfaceController:Lcom/android/server/wm/WindowSurfaceController;

    invoke-virtual {v5}, Lcom/android/server/wm/WindowSurfaceController;->getTransformToDisplayInverse()Z

    move-result v5

    if-eqz v5, :cond_6

    .line 6887
    :cond_5
    :goto_1
    add-int/lit8 v15, v15, -0x1

    goto :goto_0

    .line 6907
    :cond_6
    const/16 v17, 0x0

    .local v17, "rotateSeamlessly":Z
    goto :goto_1

    .line 6917
    .end local v15    # "i":I
    .end local v17    # "rotateSeamlessly":Z
    .end local v18    # "w":Lcom/android/server/wm/WindowState;
    :cond_7
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    .line 6918
    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mLastOrientation:I

    .line 6917
    invoke-interface {v5, v6, v4}, Landroid/view/WindowManagerPolicy;->rotationHasCompatibleMetricsLw(II)Z

    move-result v5

    if-eqz v5, :cond_8

    const/4 v2, 0x0

    .line 6927
    .local v2, "altOrientation":Z
    :goto_2
    move-object/from16 v0, p0

    iget v5, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    if-ne v5, v4, :cond_9

    move-object/from16 v0, p0

    iget-boolean v5, v0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    if-ne v5, v2, :cond_9

    .line 6929
    const/4 v5, 0x0

    return v5

    .line 6917
    .end local v2    # "altOrientation":Z
    :cond_8
    const/4 v2, 0x1

    .restart local v2    # "altOrientation":Z
    goto :goto_2

    .line 6939
    :cond_9
    move-object/from16 v0, p0

    iput v4, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    .line 6940
    move-object/from16 v0, p0

    iput-boolean v2, v0, Lcom/android/server/wm/WindowManagerService;->mAltOrientation:Z

    .line 6941
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    invoke-interface {v5, v6}, Landroid/view/WindowManagerPolicy;->setRotationLw(I)V

    .line 6943
    const/4 v5, 0x1

    move-object/from16 v0, p0

    iput v5, v0, Lcom/android/server/wm/WindowManagerService;->mWindowsFreezingScreen:I

    .line 6944
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v6, 0xb

    invoke-virtual {v5, v6}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 6945
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v6, 0x7d0

    const/16 v8, 0xb

    invoke-virtual {v5, v8, v6, v7}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 6946
    const/4 v5, 0x1

    move-object/from16 v0, p0

    iput-boolean v5, v0, Lcom/android/server/wm/WindowManagerService;->mWaitingForConfig:Z

    .line 6947
    const/4 v5, 0x1

    iput-boolean v5, v12, Lcom/android/server/wm/DisplayContent;->layoutNeeded:Z

    .line 6948
    const/4 v5, 0x2

    new-array v11, v5, [I

    .line 6949
    .local v11, "anim":[I
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->isDimming()Z

    move-result v5

    if-eqz v5, :cond_c

    .line 6950
    const/4 v5, 0x0

    const/4 v6, 0x1

    aput v5, v11, v6

    const/4 v5, 0x0

    const/4 v6, 0x0

    aput v5, v11, v6

    .line 6955
    :goto_3
    if-nez v17, :cond_d

    .line 6956
    const/4 v5, 0x0

    aget v5, v11, v5

    const/4 v6, 0x1

    aget v6, v11, v6

    move-object/from16 v0, p0

    move/from16 v1, p1

    invoke-direct {v0, v1, v5, v6}, Lcom/android/server/wm/WindowManagerService;->startFreezingDisplayLocked(ZII)V

    .line 6959
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/4 v6, 0x0

    invoke-virtual {v5, v6}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v3

    .line 6977
    .end local v3    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    :goto_4
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mCurConfiguration:Landroid/content/res/Configuration;

    iget v5, v5, Landroid/content/res/Configuration;->uiMode:I

    move-object/from16 v0, p0

    invoke-virtual {v0, v5}, Lcom/android/server/wm/WindowManagerService;->updateDisplayAndOrientationLocked(I)Landroid/view/DisplayInfo;

    .line 6979
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v13

    .line 6980
    .local v13, "displayInfo":Landroid/view/DisplayInfo;
    if-nez p1, :cond_a

    .line 6984
    invoke-static {}, Landroid/view/SurfaceControl;->openTransaction()V

    .line 6989
    :cond_a
    if-eqz v3, :cond_b

    .line 6990
    :try_start_0
    invoke-virtual {v3}, Lcom/android/server/wm/ScreenRotationAnimation;->hasScreenshot()Z

    move-result v5

    .line 6989
    if-eqz v5, :cond_b

    .line 6992
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mFxSession:Landroid/view/SurfaceSession;

    .line 6993
    const-wide/16 v6, 0x2710

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getTransitionAnimationScaleLocked()F

    move-result v8

    .line 6994
    iget v9, v13, Landroid/view/DisplayInfo;->logicalWidth:I

    iget v10, v13, Landroid/view/DisplayInfo;->logicalHeight:I

    .line 6991
    invoke-virtual/range {v3 .. v10}, Lcom/android/server/wm/ScreenRotationAnimation;->setRotationInTransaction(ILandroid/view/SurfaceSession;JFII)Z

    move-result v5

    if-eqz v5, :cond_b

    .line 6995
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->scheduleAnimationLocked()V

    .line 6999
    :cond_b
    if-eqz v17, :cond_e

    .line 7000
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v15, v5, -0x1

    .restart local v15    # "i":I
    :goto_5
    if-ltz v15, :cond_e

    .line 7001
    move-object/from16 v0, v19

    invoke-virtual {v0, v15}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v18

    check-cast v18, Lcom/android/server/wm/WindowState;

    .line 7002
    .restart local v18    # "w":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v18

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    move-object/from16 v0, p0

    iget v6, v0, Lcom/android/server/wm/WindowManagerService;->mRotation:I

    move/from16 v0, v16

    invoke-virtual {v5, v0, v6}, Lcom/android/server/wm/WindowStateAnimator;->seamlesslyRotateWindow(II)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7000
    add-int/lit8 v15, v15, -0x1

    goto :goto_5

    .line 6952
    .end local v13    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v15    # "i":I
    .end local v18    # "w":Lcom/android/server/wm/WindowState;
    .restart local v3    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    :cond_c
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    invoke-interface {v5, v11}, Landroid/view/WindowManagerPolicy;->selectRotationAnimationLw([I)V

    goto :goto_3

    .line 6965
    :cond_d
    const/4 v3, 0x0

    .line 6969
    .local v3, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    const/4 v5, 0x0

    move-object/from16 v0, p0

    iput v5, v0, Lcom/android/server/wm/WindowManagerService;->mSeamlessRotationCount:I

    goto :goto_4

    .line 7006
    .end local v3    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .restart local v13    # "displayInfo":Landroid/view/DisplayInfo;
    :cond_e
    :try_start_1
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mDisplayManagerInternal:Landroid/hardware/display/DisplayManagerInternal;

    invoke-virtual {v5}, Landroid/hardware/display/DisplayManagerInternal;->performTraversalInTransactionFromWindowManager()V
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 7008
    if-nez p1, :cond_f

    .line 7009
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 7016
    :cond_f
    invoke-virtual/range {v19 .. v19}, Lcom/android/server/wm/WindowList;->size()I

    move-result v5

    add-int/lit8 v15, v5, -0x1

    .restart local v15    # "i":I
    :goto_6
    if-ltz v15, :cond_14

    .line 7017
    move-object/from16 v0, v19

    invoke-virtual {v0, v15}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v18

    check-cast v18, Lcom/android/server/wm/WindowState;

    .line 7019
    .restart local v18    # "w":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v18

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v5, :cond_10

    .line 7020
    move-object/from16 v0, v18

    iget-object v5, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    invoke-virtual {v5}, Lcom/android/server/wm/AppWindowToken;->destroySavedSurfaces()V

    .line 7022
    :cond_10
    move-object/from16 v0, v18

    iget-boolean v5, v0, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-eqz v5, :cond_11

    if-eqz v17, :cond_13

    .line 7016
    :cond_11
    :goto_7
    add-int/lit8 v15, v15, -0x1

    goto :goto_6

    .line 7007
    .end local v15    # "i":I
    .end local v18    # "w":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v5

    .line 7008
    if-nez p1, :cond_12

    .line 7009
    invoke-static {}, Landroid/view/SurfaceControl;->closeTransaction()V

    .line 7007
    :cond_12
    throw v5

    .line 7024
    .restart local v15    # "i":I
    .restart local v18    # "w":Lcom/android/server/wm/WindowState;
    :cond_13
    const/4 v5, 0x1

    move-object/from16 v0, v18

    iput-boolean v5, v0, Lcom/android/server/wm/WindowState;->mOrientationChanging:Z

    .line 7025
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    const/4 v6, 0x0

    iput-boolean v6, v5, Lcom/android/server/wm/WindowSurfacePlacer;->mOrientationChangeComplete:Z

    .line 7026
    const/4 v5, 0x0

    move-object/from16 v0, v18

    iput v5, v0, Lcom/android/server/wm/WindowState;->mLastFreezeDuration:I

    goto :goto_7

    .line 7029
    .end local v18    # "w":Lcom/android/server/wm/WindowState;
    :cond_14
    if-eqz v17, :cond_15

    .line 7030
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const/16 v6, 0x36

    invoke-virtual {v5, v6}, Lcom/android/server/wm/WindowManagerService$H;->removeMessages(I)V

    .line 7031
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    const-wide/16 v6, 0x7d0

    const/16 v8, 0x36

    invoke-virtual {v5, v8, v6, v7}, Lcom/android/server/wm/WindowManagerService$H;->sendEmptyMessageDelayed(IJ)Z

    .line 7034
    :cond_15
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    invoke-virtual {v5}, Ljava/util/ArrayList;->size()I

    move-result v5

    add-int/lit8 v15, v5, -0x1

    :goto_8
    if-ltz v15, :cond_16

    .line 7036
    :try_start_2
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    invoke-virtual {v5, v15}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v5

    check-cast v5, Lcom/android/server/wm/WindowManagerService$RotationWatcher;

    iget-object v5, v5, Lcom/android/server/wm/WindowManagerService$RotationWatcher;->watcher:Landroid/view/IRotationWatcher;

    invoke-interface {v5, v4}, Landroid/view/IRotationWatcher;->onRotationChanged(I)V
    :try_end_2
    .catch Landroid/os/RemoteException; {:try_start_2 .. :try_end_2} :catch_0

    .line 7034
    :goto_9
    add-int/lit8 v15, v15, -0x1

    goto :goto_8

    .line 7044
    :cond_16
    if-nez v3, :cond_17

    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    if-eqz v5, :cond_17

    .line 7045
    invoke-virtual {v12}, Lcom/android/server/wm/DisplayContent;->getDisplayId()I

    move-result v5

    if-nez v5, :cond_17

    .line 7046
    move-object/from16 v0, p0

    iget-object v5, v0, Lcom/android/server/wm/WindowManagerService;->mAccessibilityController:Lcom/android/server/wm/AccessibilityController;

    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v6

    invoke-virtual {v5, v6, v4}, Lcom/android/server/wm/AccessibilityController;->onRotationChangedLocked(Lcom/android/server/wm/DisplayContent;I)V

    .line 7050
    :cond_17
    const/4 v5, 0x1

    return v5

    .line 7037
    :catch_0
    move-exception v14

    .local v14, "e":Landroid/os/RemoteException;
    goto :goto_9
.end method

.method updateStatusBarVisibilityLocked(I)Z
    .locals 11
    .param p1, "visibility"    # I

    .prologue
    .line 10362
    iget v9, p0, Lcom/android/server/wm/WindowManagerService;->mLastDispatchedSystemUiVisibility:I

    if-ne v9, p1, :cond_0

    .line 10363
    const/4 v9, 0x0

    return v9

    .line 10365
    :cond_0
    iget v9, p0, Lcom/android/server/wm/WindowManagerService;->mLastDispatchedSystemUiVisibility:I

    xor-int/2addr v9, p1

    and-int/lit8 v9, v9, 0x7

    .line 10370
    not-int v10, p1

    .line 10365
    and-int v4, v9, v10

    .line 10372
    .local v4, "globalDiff":I
    iput p1, p0, Lcom/android/server/wm/WindowManagerService;->mLastDispatchedSystemUiVisibility:I

    .line 10373
    iget-object v9, p0, Lcom/android/server/wm/WindowManagerService;->mInputManager:Lcom/android/server/input/InputManagerService;

    invoke-virtual {v9, p1}, Lcom/android/server/input/InputManagerService;->setSystemUiVisibility(I)V

    .line 10374
    invoke-virtual {p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v7

    .line 10375
    .local v7, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual {v7}, Lcom/android/server/wm/WindowList;->size()I

    move-result v0

    .line 10376
    .local v0, "N":I
    const/4 v5, 0x0

    .local v5, "i":I
    :goto_0
    if-ge v5, v0, :cond_4

    .line 10377
    invoke-virtual {v7, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/WindowState;

    .line 10379
    .local v8, "ws":Lcom/android/server/wm/WindowState;
    :try_start_0
    iget v1, v8, Lcom/android/server/wm/WindowState;->mSystemUiVisibility:I

    .line 10380
    .local v1, "curValue":I
    xor-int v9, v1, p1

    and-int v2, v9, v4

    .line 10381
    .local v2, "diff":I
    not-int v9, v2

    and-int/2addr v9, v1

    and-int v10, p1, v2

    or-int v6, v9, v10

    .line 10382
    .local v6, "newValue":I
    if-eq v6, v1, :cond_1

    .line 10383
    iget v9, v8, Lcom/android/server/wm/WindowState;->mSeq:I

    add-int/lit8 v9, v9, 0x1

    iput v9, v8, Lcom/android/server/wm/WindowState;->mSeq:I

    .line 10384
    iput v6, v8, Lcom/android/server/wm/WindowState;->mSystemUiVisibility:I

    .line 10386
    :cond_1
    if-ne v6, v1, :cond_2

    iget-object v9, v8, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-boolean v9, v9, Landroid/view/WindowManager$LayoutParams;->hasSystemUiListeners:Z

    if-eqz v9, :cond_3

    .line 10387
    :cond_2
    iget-object v9, v8, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    iget v10, v8, Lcom/android/server/wm/WindowState;->mSeq:I

    invoke-interface {v9, v10, p1, v6, v2}, Landroid/view/IWindow;->dispatchSystemUiVisibilityChanged(IIII)V
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0

    .line 10376
    .end local v1    # "curValue":I
    .end local v2    # "diff":I
    .end local v6    # "newValue":I
    :cond_3
    :goto_1
    add-int/lit8 v5, v5, 0x1

    goto :goto_0

    .line 10394
    .end local v8    # "ws":Lcom/android/server/wm/WindowState;
    :cond_4
    const/4 v9, 0x1

    return v9

    .line 10390
    .restart local v8    # "ws":Lcom/android/server/wm/WindowState;
    :catch_0
    move-exception v3

    .local v3, "e":Landroid/os/RemoteException;
    goto :goto_1
.end method

.method updateTokenInPlaceLocked(Lcom/android/server/wm/AppWindowToken;I)V
    .locals 6
    .param p1, "wtoken"    # Lcom/android/server/wm/AppWindowToken;
    .param p2, "transit"    # I

    .prologue
    const/4 v4, 0x0

    .line 4603
    const/4 v0, -0x1

    if-eq p2, v0, :cond_1

    .line 4604
    iget-object v0, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    iget-object v0, v0, Lcom/android/server/wm/AppWindowAnimator;->animation:Landroid/view/animation/Animation;

    sget-object v1, Lcom/android/server/wm/AppWindowAnimator;->sDummyAnimation:Landroid/view/animation/Animation;

    if-ne v0, v1, :cond_0

    .line 4605
    iget-object v0, p1, Lcom/android/server/wm/AppWindowToken;->mAppAnimator:Lcom/android/server/wm/AppWindowAnimator;

    invoke-virtual {v0}, Lcom/android/server/wm/AppWindowAnimator;->setNullAnimation()V

    .line 4607
    :cond_0
    const/4 v2, 0x0

    move-object v0, p0

    move-object v1, p1

    move v3, p2

    move v5, v4

    invoke-direct/range {v0 .. v5}, Lcom/android/server/wm/WindowManagerService;->applyAnimationLocked(Lcom/android/server/wm/AppWindowToken;Landroid/view/WindowManager$LayoutParams;IZZ)Z

    .line 4602
    :cond_1
    return-void
.end method

.method public validateAppTokens(ILjava/util/List;)V
    .locals 19
    .param p1, "stackId"    # I
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(I",
            "Ljava/util/List",
            "<",
            "Lcom/android/server/wm/TaskGroup;",
            ">;)V"
        }
    .end annotation

    .prologue
    .line 3349
    .local p2, "tasks":Ljava/util/List;, "Ljava/util/List<Lcom/android/server/wm/TaskGroup;>;"
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v16, v0

    monitor-enter v16

    .line 3350
    :try_start_0
    invoke-interface/range {p2 .. p2}, Ljava/util/List;->size()I

    move-result v15

    add-int/lit8 v7, v15, -0x1

    .line 3351
    .local v7, "t":I
    if-gez v7, :cond_0

    .line 3352
    const-string/jumbo v15, "WindowManager"

    const-string/jumbo v17, "validateAppTokens: empty task list"

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v16

    .line 3353
    return-void

    .line 3356
    :cond_0
    const/4 v15, 0x0

    :try_start_1
    move-object/from16 v0, p2

    invoke-interface {v0, v15}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v9

    check-cast v9, Lcom/android/server/wm/TaskGroup;

    .line 3357
    .local v9, "task":Lcom/android/server/wm/TaskGroup;
    iget v10, v9, Lcom/android/server/wm/TaskGroup;->taskId:I

    .line 3358
    .local v10, "taskId":I
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v15, v10}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v8

    check-cast v8, Lcom/android/server/wm/Task;

    .line 3359
    .local v8, "targetTask":Lcom/android/server/wm/Task;
    invoke-virtual {v8}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 3360
    .local v3, "displayContent":Lcom/android/server/wm/DisplayContent;
    if-nez v3, :cond_1

    .line 3361
    const-string/jumbo v15, "WindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v18, "validateAppTokens: no Display for taskId="

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-virtual {v0, v10}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v16

    .line 3362
    return-void

    .line 3365
    :cond_1
    :try_start_2
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/wm/WindowManagerService;->mStackIdToStack:Landroid/util/SparseArray;

    move/from16 v0, p1

    invoke-virtual {v15, v0}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v15

    check-cast v15, Lcom/android/server/wm/TaskStack;

    invoke-virtual {v15}, Lcom/android/server/wm/TaskStack;->getTasks()Ljava/util/ArrayList;

    move-result-object v5

    .line 3367
    .local v5, "localTasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    invoke-virtual {v5}, Ljava/util/ArrayList;->size()I

    move-result v15

    add-int/lit8 v11, v15, -0x1

    .local v11, "taskNdx":I
    :goto_0
    if-ltz v11, :cond_5

    if-ltz v7, :cond_5

    .line 3368
    invoke-virtual {v5, v11}, Ljava/util/ArrayList;->get(I)Ljava/lang/Object;

    move-result-object v15

    check-cast v15, Lcom/android/server/wm/Task;

    iget-object v6, v15, Lcom/android/server/wm/Task;->mAppTokens:Lcom/android/server/wm/AppTokenList;

    .line 3369
    .local v6, "localTokens":Lcom/android/server/wm/AppTokenList;
    move-object/from16 v0, p2

    invoke-interface {v0, v7}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v9

    .end local v9    # "task":Lcom/android/server/wm/TaskGroup;
    check-cast v9, Lcom/android/server/wm/TaskGroup;

    .line 3370
    .restart local v9    # "task":Lcom/android/server/wm/TaskGroup;
    iget-object v13, v9, Lcom/android/server/wm/TaskGroup;->tokens:Ljava/util/ArrayList;

    .line 3372
    .local v13, "tokens":Ljava/util/List;, "Ljava/util/List<Landroid/view/IApplicationToken;>;"
    move-object v4, v3

    .line 3373
    .local v4, "lastDisplayContent":Lcom/android/server/wm/DisplayContent;
    move-object/from16 v0, p0

    iget-object v15, v0, Lcom/android/server/wm/WindowManagerService;->mTaskIdToTask:Landroid/util/SparseArray;

    invoke-virtual {v15, v10}, Landroid/util/SparseArray;->get(I)Ljava/lang/Object;

    move-result-object v15

    check-cast v15, Lcom/android/server/wm/Task;

    invoke-virtual {v15}, Lcom/android/server/wm/Task;->getDisplayContent()Lcom/android/server/wm/DisplayContent;

    move-result-object v3

    .line 3374
    if-eq v3, v4, :cond_2

    .line 3375
    const-string/jumbo v15, "WindowManager"

    const-string/jumbo v17, "validateAppTokens: displayContent changed in TaskGroup list!"

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    monitor-exit v16

    .line 3376
    return-void

    .line 3381
    :cond_2
    :try_start_3
    invoke-virtual {v6}, Lcom/android/server/wm/AppTokenList;->size()I

    move-result v15

    add-int/lit8 v12, v15, -0x1

    .local v12, "tokenNdx":I
    iget-object v15, v9, Lcom/android/server/wm/TaskGroup;->tokens:Ljava/util/ArrayList;

    invoke-virtual {v15}, Ljava/util/ArrayList;->size()I

    move-result v15

    add-int/lit8 v14, v15, -0x1

    .line 3382
    .local v14, "v":I
    :goto_1
    if-ltz v12, :cond_4

    if-ltz v14, :cond_4

    .line 3383
    invoke-virtual {v6, v12}, Lcom/android/server/wm/AppTokenList;->get(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/AppWindowToken;

    .line 3384
    .local v2, "atoken":Lcom/android/server/wm/AppWindowToken;
    iget-boolean v15, v2, Lcom/android/server/wm/AppWindowToken;->removed:Z

    if-eqz v15, :cond_3

    .line 3385
    add-int/lit8 v12, v12, -0x1

    .line 3386
    goto :goto_1

    .line 3388
    :cond_3
    invoke-interface {v13, v14}, Ljava/util/List;->get(I)Ljava/lang/Object;

    move-result-object v15

    iget-object v0, v2, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    move-object/from16 v17, v0

    move-object/from16 v0, v17

    if-eq v15, v0, :cond_8

    .line 3395
    .end local v2    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_4
    if-gez v12, :cond_5

    if-ltz v14, :cond_9

    .line 3400
    .end local v4    # "lastDisplayContent":Lcom/android/server/wm/DisplayContent;
    .end local v6    # "localTokens":Lcom/android/server/wm/AppTokenList;
    .end local v12    # "tokenNdx":I
    .end local v13    # "tokens":Ljava/util/List;, "Ljava/util/List<Landroid/view/IApplicationToken;>;"
    .end local v14    # "v":I
    :cond_5
    if-gez v11, :cond_6

    if-ltz v7, :cond_7

    .line 3401
    :cond_6
    const-string/jumbo v15, "WindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v18, "validateAppTokens: Mismatch! ActivityManager="

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    move-object/from16 v0, v17

    move-object/from16 v1, p2

    invoke-virtual {v0, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 3402
    const-string/jumbo v15, "WindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v18, "validateAppTokens: Mismatch! WindowManager="

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-virtual {v0, v5}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I

    .line 3403
    const-string/jumbo v15, "WindowManager"

    new-instance v17, Ljava/lang/StringBuilder;

    invoke-direct/range {v17 .. v17}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v18, "validateAppTokens: Mismatch! Callers="

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    const/16 v18, 0x4

    invoke-static/range {v18 .. v18}, Landroid/os/Debug;->getCallers(I)Ljava/lang/String;

    move-result-object v18

    invoke-virtual/range {v17 .. v18}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v17

    invoke-virtual/range {v17 .. v17}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v17

    move-object/from16 v0, v17

    invoke-static {v15, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    :cond_7
    monitor-exit v16

    .line 3348
    return-void

    .line 3391
    .restart local v2    # "atoken":Lcom/android/server/wm/AppWindowToken;
    .restart local v4    # "lastDisplayContent":Lcom/android/server/wm/DisplayContent;
    .restart local v6    # "localTokens":Lcom/android/server/wm/AppTokenList;
    .restart local v12    # "tokenNdx":I
    .restart local v13    # "tokens":Ljava/util/List;, "Ljava/util/List<Landroid/view/IApplicationToken;>;"
    .restart local v14    # "v":I
    :cond_8
    add-int/lit8 v12, v12, -0x1

    .line 3392
    add-int/lit8 v14, v14, -0x1

    goto/16 :goto_1

    .line 3367
    .end local v2    # "atoken":Lcom/android/server/wm/AppWindowToken;
    :cond_9
    add-int/lit8 v11, v11, -0x1

    add-int/lit8 v7, v7, -0x1

    goto/16 :goto_0

    .line 3349
    .end local v3    # "displayContent":Lcom/android/server/wm/DisplayContent;
    .end local v4    # "lastDisplayContent":Lcom/android/server/wm/DisplayContent;
    .end local v5    # "localTasks":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Lcom/android/server/wm/Task;>;"
    .end local v6    # "localTokens":Lcom/android/server/wm/AppTokenList;
    .end local v7    # "t":I
    .end local v8    # "targetTask":Lcom/android/server/wm/Task;
    .end local v9    # "task":Lcom/android/server/wm/TaskGroup;
    .end local v10    # "taskId":I
    .end local v11    # "taskNdx":I
    .end local v12    # "tokenNdx":I
    .end local v13    # "tokens":Ljava/util/List;, "Ljava/util/List<Landroid/view/IApplicationToken;>;"
    .end local v14    # "v":I
    :catchall_0
    move-exception v15

    monitor-exit v16

    throw v15
.end method

.method public validateStackOrder([Ljava/lang/Integer;)V
    .locals 0
    .param p1, "remoteStackIds"    # [Ljava/lang/Integer;

    .prologue
    .line 3408
    return-void
.end method

.method viewServerGetFocusedWindow(Ljava/net/Socket;)Z
    .locals 9
    .param p1, "client"    # Ljava/net/Socket;

    .prologue
    .line 7329
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v7

    if-eqz v7, :cond_0

    .line 7330
    const/4 v7, 0x0

    return v7

    .line 7333
    :cond_0
    const/4 v6, 0x1

    .line 7335
    .local v6, "result":Z
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->getFocusedWindow()Lcom/android/server/wm/WindowState;

    move-result-object v3

    .line 7337
    .local v3, "focusedWindow":Lcom/android/server/wm/WindowState;
    const/4 v4, 0x0

    .line 7341
    .local v4, "out":Ljava/io/BufferedWriter;
    :try_start_0
    invoke-virtual {p1}, Ljava/net/Socket;->getOutputStream()Ljava/io/OutputStream;

    move-result-object v0

    .line 7342
    .local v0, "clientStream":Ljava/io/OutputStream;
    new-instance v5, Ljava/io/BufferedWriter;

    new-instance v7, Ljava/io/OutputStreamWriter;

    invoke-direct {v7, v0}, Ljava/io/OutputStreamWriter;-><init>(Ljava/io/OutputStream;)V

    const/16 v8, 0x2000

    invoke-direct {v5, v7, v8}, Ljava/io/BufferedWriter;-><init>(Ljava/io/Writer;I)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_1
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7344
    .end local v4    # "out":Ljava/io/BufferedWriter;
    .local v5, "out":Ljava/io/BufferedWriter;
    if-eqz v3, :cond_1

    .line 7345
    :try_start_1
    invoke-static {v3}, Ljava/lang/System;->identityHashCode(Ljava/lang/Object;)I

    move-result v7

    invoke-static {v7}, Ljava/lang/Integer;->toHexString(I)Ljava/lang/String;

    move-result-object v7

    invoke-virtual {v5, v7}, Ljava/io/BufferedWriter;->write(Ljava/lang/String;)V

    .line 7346
    const/16 v7, 0x20

    invoke-virtual {v5, v7}, Ljava/io/BufferedWriter;->write(I)V

    .line 7347
    iget-object v7, v3, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-virtual {v7}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v7

    invoke-virtual {v5, v7}, Ljava/io/BufferedWriter;->append(Ljava/lang/CharSequence;)Ljava/io/Writer;

    .line 7349
    :cond_1
    const/16 v7, 0xa

    invoke-virtual {v5, v7}, Ljava/io/BufferedWriter;->write(I)V

    .line 7350
    invoke-virtual {v5}, Ljava/io/BufferedWriter;->flush()V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_4
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 7354
    if-eqz v5, :cond_2

    .line 7356
    :try_start_2
    invoke-virtual {v5}, Ljava/io/BufferedWriter;->close()V
    :try_end_2
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_0

    :cond_2
    :goto_0
    move-object v4, v5

    .line 7363
    .end local v0    # "clientStream":Ljava/io/OutputStream;
    .end local v5    # "out":Ljava/io/BufferedWriter;
    :cond_3
    :goto_1
    return v6

    .line 7357
    .restart local v0    # "clientStream":Ljava/io/OutputStream;
    .restart local v5    # "out":Ljava/io/BufferedWriter;
    :catch_0
    move-exception v1

    .line 7358
    .local v1, "e":Ljava/io/IOException;
    const/4 v6, 0x0

    goto :goto_0

    .line 7351
    .end local v0    # "clientStream":Ljava/io/OutputStream;
    .end local v1    # "e":Ljava/io/IOException;
    .end local v5    # "out":Ljava/io/BufferedWriter;
    .restart local v4    # "out":Ljava/io/BufferedWriter;
    :catch_1
    move-exception v2

    .line 7352
    .end local v4    # "out":Ljava/io/BufferedWriter;
    .local v2, "e":Ljava/lang/Exception;
    :goto_2
    const/4 v6, 0x0

    .line 7354
    if-eqz v4, :cond_3

    .line 7356
    :try_start_3
    invoke-virtual {v4}, Ljava/io/BufferedWriter;->close()V
    :try_end_3
    .catch Ljava/io/IOException; {:try_start_3 .. :try_end_3} :catch_2

    goto :goto_1

    .line 7357
    :catch_2
    move-exception v1

    .line 7358
    .restart local v1    # "e":Ljava/io/IOException;
    const/4 v6, 0x0

    goto :goto_1

    .line 7353
    .end local v1    # "e":Ljava/io/IOException;
    .end local v2    # "e":Ljava/lang/Exception;
    .restart local v4    # "out":Ljava/io/BufferedWriter;
    :catchall_0
    move-exception v7

    .line 7354
    .end local v4    # "out":Ljava/io/BufferedWriter;
    :goto_3
    if-eqz v4, :cond_4

    .line 7356
    :try_start_4
    invoke-virtual {v4}, Ljava/io/BufferedWriter;->close()V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_3

    .line 7353
    :cond_4
    :goto_4
    throw v7

    .line 7357
    :catch_3
    move-exception v1

    .line 7358
    .restart local v1    # "e":Ljava/io/IOException;
    const/4 v6, 0x0

    goto :goto_4

    .line 7353
    .end local v1    # "e":Ljava/io/IOException;
    .restart local v0    # "clientStream":Ljava/io/OutputStream;
    .restart local v5    # "out":Ljava/io/BufferedWriter;
    :catchall_1
    move-exception v7

    move-object v4, v5

    .end local v5    # "out":Ljava/io/BufferedWriter;
    .local v4, "out":Ljava/io/BufferedWriter;
    goto :goto_3

    .line 7351
    .end local v4    # "out":Ljava/io/BufferedWriter;
    .restart local v5    # "out":Ljava/io/BufferedWriter;
    :catch_4
    move-exception v2

    .restart local v2    # "e":Ljava/lang/Exception;
    move-object v4, v5

    .end local v5    # "out":Ljava/io/BufferedWriter;
    .restart local v4    # "out":Ljava/io/BufferedWriter;
    goto :goto_2
.end method

.method viewServerListWindows(Ljava/net/Socket;)Z
    .locals 15
    .param p1, "client"    # Ljava/net/Socket;

    .prologue
    .line 7271
    invoke-direct {p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v13

    if-eqz v13, :cond_0

    .line 7272
    const/4 v13, 0x0

    return v13

    .line 7275
    :cond_0
    const/4 v10, 0x1

    .line 7277
    .local v10, "result":Z
    new-instance v12, Lcom/android/server/wm/WindowList;

    invoke-direct {v12}, Lcom/android/server/wm/WindowList;-><init>()V

    .line 7278
    .local v12, "windows":Lcom/android/server/wm/WindowList;
    iget-object v14, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v14

    .line 7280
    :try_start_0
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v13}, Landroid/util/SparseArray;->size()I

    move-result v7

    .line 7281
    .local v7, "numDisplays":I
    const/4 v3, 0x0

    .local v3, "displayNdx":I
    :goto_0
    if-ge v3, v7, :cond_1

    .line 7282
    iget-object v13, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v13, v3}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v2

    check-cast v2, Lcom/android/server/wm/DisplayContent;

    .line 7283
    .local v2, "displayContent":Lcom/android/server/wm/DisplayContent;
    invoke-virtual {v2}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v13

    invoke-virtual {v12, v13}, Lcom/android/server/wm/WindowList;->addAll(Ljava/util/Collection;)Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7281
    add-int/lit8 v3, v3, 0x1

    goto :goto_0

    .end local v2    # "displayContent":Lcom/android/server/wm/DisplayContent;
    :cond_1
    monitor-exit v14

    .line 7287
    const/4 v8, 0x0

    .line 7291
    .local v8, "out":Ljava/io/BufferedWriter;
    :try_start_1
    invoke-virtual/range {p1 .. p1}, Ljava/net/Socket;->getOutputStream()Ljava/io/OutputStream;

    move-result-object v0

    .line 7292
    .local v0, "clientStream":Ljava/io/OutputStream;
    new-instance v9, Ljava/io/BufferedWriter;

    new-instance v13, Ljava/io/OutputStreamWriter;

    invoke-direct {v13, v0}, Ljava/io/OutputStreamWriter;-><init>(Ljava/io/OutputStream;)V

    const/16 v14, 0x2000

    invoke-direct {v9, v13, v14}, Ljava/io/BufferedWriter;-><init>(Ljava/io/Writer;I)V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    .line 7294
    .end local v8    # "out":Ljava/io/BufferedWriter;
    .local v9, "out":Ljava/io/BufferedWriter;
    :try_start_2
    invoke-virtual {v12}, Lcom/android/server/wm/WindowList;->size()I

    move-result v1

    .line 7295
    .local v1, "count":I
    const/4 v6, 0x0

    .local v6, "i":I
    :goto_1
    if-ge v6, v1, :cond_2

    .line 7296
    invoke-virtual {v12, v6}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v11

    check-cast v11, Lcom/android/server/wm/WindowState;

    .line 7297
    .local v11, "w":Lcom/android/server/wm/WindowState;
    invoke-static {v11}, Ljava/lang/System;->identityHashCode(Ljava/lang/Object;)I

    move-result v13

    invoke-static {v13}, Ljava/lang/Integer;->toHexString(I)Ljava/lang/String;

    move-result-object v13

    invoke-virtual {v9, v13}, Ljava/io/BufferedWriter;->write(Ljava/lang/String;)V

    .line 7298
    const/16 v13, 0x20

    invoke-virtual {v9, v13}, Ljava/io/BufferedWriter;->write(I)V

    .line 7299
    iget-object v13, v11, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    invoke-virtual {v13}, Landroid/view/WindowManager$LayoutParams;->getTitle()Ljava/lang/CharSequence;

    move-result-object v13

    invoke-virtual {v9, v13}, Ljava/io/BufferedWriter;->append(Ljava/lang/CharSequence;)Ljava/io/Writer;

    .line 7300
    const/16 v13, 0xa

    invoke-virtual {v9, v13}, Ljava/io/BufferedWriter;->write(I)V
    :try_end_2
    .catch Ljava/lang/Exception; {:try_start_2 .. :try_end_2} :catch_4
    .catchall {:try_start_2 .. :try_end_2} :catchall_2

    .line 7295
    add-int/lit8 v6, v6, 0x1

    goto :goto_1

    .line 7278
    .end local v0    # "clientStream":Ljava/io/OutputStream;
    .end local v1    # "count":I
    .end local v3    # "displayNdx":I
    .end local v6    # "i":I
    .end local v7    # "numDisplays":I
    .end local v9    # "out":Ljava/io/BufferedWriter;
    .end local v11    # "w":Lcom/android/server/wm/WindowState;
    :catchall_0
    move-exception v13

    monitor-exit v14

    throw v13

    .line 7303
    .restart local v0    # "clientStream":Ljava/io/OutputStream;
    .restart local v1    # "count":I
    .restart local v3    # "displayNdx":I
    .restart local v6    # "i":I
    .restart local v7    # "numDisplays":I
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    :cond_2
    :try_start_3
    const-string/jumbo v13, "DONE.\n"

    invoke-virtual {v9, v13}, Ljava/io/BufferedWriter;->write(Ljava/lang/String;)V

    .line 7304
    invoke-virtual {v9}, Ljava/io/BufferedWriter;->flush()V
    :try_end_3
    .catch Ljava/lang/Exception; {:try_start_3 .. :try_end_3} :catch_4
    .catchall {:try_start_3 .. :try_end_3} :catchall_2

    .line 7308
    if-eqz v9, :cond_3

    .line 7310
    :try_start_4
    invoke-virtual {v9}, Ljava/io/BufferedWriter;->close()V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_0

    :cond_3
    :goto_2
    move-object v8, v9

    .line 7317
    .end local v0    # "clientStream":Ljava/io/OutputStream;
    .end local v1    # "count":I
    .end local v6    # "i":I
    .end local v9    # "out":Ljava/io/BufferedWriter;
    :cond_4
    :goto_3
    return v10

    .line 7311
    .restart local v0    # "clientStream":Ljava/io/OutputStream;
    .restart local v1    # "count":I
    .restart local v6    # "i":I
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    :catch_0
    move-exception v4

    .line 7312
    .local v4, "e":Ljava/io/IOException;
    const/4 v10, 0x0

    goto :goto_2

    .line 7305
    .end local v0    # "clientStream":Ljava/io/OutputStream;
    .end local v1    # "count":I
    .end local v4    # "e":Ljava/io/IOException;
    .end local v6    # "i":I
    .end local v9    # "out":Ljava/io/BufferedWriter;
    .restart local v8    # "out":Ljava/io/BufferedWriter;
    :catch_1
    move-exception v5

    .line 7306
    .end local v8    # "out":Ljava/io/BufferedWriter;
    .local v5, "e":Ljava/lang/Exception;
    :goto_4
    const/4 v10, 0x0

    .line 7308
    if-eqz v8, :cond_4

    .line 7310
    :try_start_5
    invoke-virtual {v8}, Ljava/io/BufferedWriter;->close()V
    :try_end_5
    .catch Ljava/io/IOException; {:try_start_5 .. :try_end_5} :catch_2

    goto :goto_3

    .line 7311
    :catch_2
    move-exception v4

    .line 7312
    .restart local v4    # "e":Ljava/io/IOException;
    const/4 v10, 0x0

    goto :goto_3

    .line 7307
    .end local v4    # "e":Ljava/io/IOException;
    .end local v5    # "e":Ljava/lang/Exception;
    .restart local v8    # "out":Ljava/io/BufferedWriter;
    :catchall_1
    move-exception v13

    .line 7308
    .end local v8    # "out":Ljava/io/BufferedWriter;
    :goto_5
    if-eqz v8, :cond_5

    .line 7310
    :try_start_6
    invoke-virtual {v8}, Ljava/io/BufferedWriter;->close()V
    :try_end_6
    .catch Ljava/io/IOException; {:try_start_6 .. :try_end_6} :catch_3

    .line 7307
    :cond_5
    :goto_6
    throw v13

    .line 7311
    :catch_3
    move-exception v4

    .line 7312
    .restart local v4    # "e":Ljava/io/IOException;
    const/4 v10, 0x0

    goto :goto_6

    .line 7307
    .end local v4    # "e":Ljava/io/IOException;
    .restart local v0    # "clientStream":Ljava/io/OutputStream;
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    :catchall_2
    move-exception v13

    move-object v8, v9

    .end local v9    # "out":Ljava/io/BufferedWriter;
    .local v8, "out":Ljava/io/BufferedWriter;
    goto :goto_5

    .line 7305
    .end local v8    # "out":Ljava/io/BufferedWriter;
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    :catch_4
    move-exception v5

    .restart local v5    # "e":Ljava/lang/Exception;
    move-object v8, v9

    .end local v9    # "out":Ljava/io/BufferedWriter;
    .restart local v8    # "out":Ljava/io/BufferedWriter;
    goto :goto_4
.end method

.method viewServerWindowCommand(Ljava/net/Socket;Ljava/lang/String;Ljava/lang/String;)Z
    .locals 17
    .param p1, "client"    # Ljava/net/Socket;
    .param p2, "command"    # Ljava/lang/String;
    .param p3, "parameters"    # Ljava/lang/String;

    .prologue
    .line 7387
    invoke-direct/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->isSystemSecure()Z

    move-result v14

    if-eqz v14, :cond_0

    .line 7388
    const/4 v14, 0x0

    return v14

    .line 7391
    :cond_0
    const/4 v12, 0x1

    .line 7392
    .local v12, "success":Z
    const/4 v4, 0x0

    .line 7393
    .local v4, "data":Landroid/os/Parcel;
    const/4 v11, 0x0

    .line 7395
    .local v11, "reply":Landroid/os/Parcel;
    const/4 v9, 0x0

    .line 7400
    .local v9, "out":Ljava/io/BufferedWriter;
    const/16 v14, 0x20

    :try_start_0
    move-object/from16 v0, p3

    invoke-virtual {v0, v14}, Ljava/lang/String;->indexOf(I)I

    move-result v8

    .line 7401
    .local v8, "index":I
    const/4 v14, -0x1

    if-ne v8, v14, :cond_1

    .line 7402
    invoke-virtual/range {p3 .. p3}, Ljava/lang/String;->length()I

    move-result v8

    .line 7404
    :cond_1
    const/4 v14, 0x0

    move-object/from16 v0, p3

    invoke-virtual {v0, v14, v8}, Ljava/lang/String;->substring(II)Ljava/lang/String;

    move-result-object v3

    .line 7405
    .local v3, "code":Ljava/lang/String;
    const/16 v14, 0x10

    invoke-static {v3, v14}, Ljava/lang/Long;->parseLong(Ljava/lang/String;I)J

    move-result-wide v14

    long-to-int v7, v14

    .line 7408
    .local v7, "hashCode":I
    invoke-virtual/range {p3 .. p3}, Ljava/lang/String;->length()I

    move-result v14

    if-ge v8, v14, :cond_2

    .line 7409
    add-int/lit8 v14, v8, 0x1

    move-object/from16 v0, p3

    invoke-virtual {v0, v14}, Ljava/lang/String;->substring(I)Ljava/lang/String;

    move-result-object p3

    .line 7414
    :goto_0
    move-object/from16 v0, p0

    invoke-direct {v0, v7}, Lcom/android/server/wm/WindowManagerService;->findWindow(I)Lcom/android/server/wm/WindowState;

    move-result-object v13

    .line 7415
    .local v13, "window":Lcom/android/server/wm/WindowState;
    if-nez v13, :cond_3

    .line 7416
    const/4 v14, 0x0

    return v14

    .line 7411
    .end local v13    # "window":Lcom/android/server/wm/WindowState;
    :cond_2
    const-string/jumbo p3, ""

    goto :goto_0

    .line 7419
    .restart local v13    # "window":Lcom/android/server/wm/WindowState;
    :cond_3
    invoke-static {}, Landroid/os/Parcel;->obtain()Landroid/os/Parcel;

    move-result-object v4

    .line 7420
    .local v4, "data":Landroid/os/Parcel;
    const-string/jumbo v14, "android.view.IWindow"

    invoke-virtual {v4, v14}, Landroid/os/Parcel;->writeInterfaceToken(Ljava/lang/String;)V

    .line 7421
    move-object/from16 v0, p2

    invoke-virtual {v4, v0}, Landroid/os/Parcel;->writeString(Ljava/lang/String;)V

    .line 7422
    move-object/from16 v0, p3

    invoke-virtual {v4, v0}, Landroid/os/Parcel;->writeString(Ljava/lang/String;)V

    .line 7423
    const/4 v14, 0x1

    invoke-virtual {v4, v14}, Landroid/os/Parcel;->writeInt(I)V

    .line 7424
    invoke-static/range {p1 .. p1}, Landroid/os/ParcelFileDescriptor;->fromSocket(Ljava/net/Socket;)Landroid/os/ParcelFileDescriptor;

    move-result-object v14

    const/4 v15, 0x0

    invoke-virtual {v14, v4, v15}, Landroid/os/ParcelFileDescriptor;->writeToParcel(Landroid/os/Parcel;I)V

    .line 7426
    invoke-static {}, Landroid/os/Parcel;->obtain()Landroid/os/Parcel;

    move-result-object v11

    .line 7428
    .local v11, "reply":Landroid/os/Parcel;
    iget-object v14, v13, Lcom/android/server/wm/WindowState;->mClient:Landroid/view/IWindow;

    invoke-interface {v14}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v2

    .line 7430
    .local v2, "binder":Landroid/os/IBinder;
    const/4 v14, 0x1

    const/4 v15, 0x0

    invoke-interface {v2, v14, v4, v11, v15}, Landroid/os/IBinder;->transact(ILandroid/os/Parcel;Landroid/os/Parcel;I)Z

    .line 7432
    invoke-virtual {v11}, Landroid/os/Parcel;->readException()V

    .line 7434
    invoke-virtual/range {p1 .. p1}, Ljava/net/Socket;->isOutputShutdown()Z

    move-result v14

    if-nez v14, :cond_4

    .line 7435
    new-instance v10, Ljava/io/BufferedWriter;

    new-instance v14, Ljava/io/OutputStreamWriter;

    invoke-virtual/range {p1 .. p1}, Ljava/net/Socket;->getOutputStream()Ljava/io/OutputStream;

    move-result-object v15

    invoke-direct {v14, v15}, Ljava/io/OutputStreamWriter;-><init>(Ljava/io/OutputStream;)V

    invoke-direct {v10, v14}, Ljava/io/BufferedWriter;-><init>(Ljava/io/Writer;)V
    :try_end_0
    .catch Ljava/lang/Exception; {:try_start_0 .. :try_end_0} :catch_1
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7436
    .end local v9    # "out":Ljava/io/BufferedWriter;
    .local v10, "out":Ljava/io/BufferedWriter;
    :try_start_1
    const-string/jumbo v14, "DONE\n"

    invoke-virtual {v10, v14}, Ljava/io/BufferedWriter;->write(Ljava/lang/String;)V

    .line 7437
    invoke-virtual {v10}, Ljava/io/BufferedWriter;->flush()V
    :try_end_1
    .catch Ljava/lang/Exception; {:try_start_1 .. :try_end_1} :catch_4
    .catchall {:try_start_1 .. :try_end_1} :catchall_1

    move-object v9, v10

    .line 7444
    .end local v10    # "out":Ljava/io/BufferedWriter;
    :cond_4
    if-eqz v4, :cond_5

    .line 7445
    invoke-virtual {v4}, Landroid/os/Parcel;->recycle()V

    .line 7447
    :cond_5
    if-eqz v11, :cond_6

    .line 7448
    invoke-virtual {v11}, Landroid/os/Parcel;->recycle()V

    .line 7450
    :cond_6
    if-eqz v9, :cond_7

    .line 7452
    :try_start_2
    invoke-virtual {v9}, Ljava/io/BufferedWriter;->close()V
    :try_end_2
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_0

    .line 7459
    .end local v2    # "binder":Landroid/os/IBinder;
    .end local v3    # "code":Ljava/lang/String;
    .end local v4    # "data":Landroid/os/Parcel;
    .end local v7    # "hashCode":I
    .end local v8    # "index":I
    .end local v11    # "reply":Landroid/os/Parcel;
    .end local v13    # "window":Lcom/android/server/wm/WindowState;
    :cond_7
    :goto_1
    return v12

    .line 7453
    .restart local v2    # "binder":Landroid/os/IBinder;
    .restart local v3    # "code":Ljava/lang/String;
    .restart local v4    # "data":Landroid/os/Parcel;
    .restart local v7    # "hashCode":I
    .restart local v8    # "index":I
    .restart local v11    # "reply":Landroid/os/Parcel;
    .restart local v13    # "window":Lcom/android/server/wm/WindowState;
    :catch_0
    move-exception v5

    .local v5, "e":Ljava/io/IOException;
    goto :goto_1

    .line 7440
    .end local v2    # "binder":Landroid/os/IBinder;
    .end local v3    # "code":Ljava/lang/String;
    .end local v4    # "data":Landroid/os/Parcel;
    .end local v5    # "e":Ljava/io/IOException;
    .end local v7    # "hashCode":I
    .end local v8    # "index":I
    .end local v11    # "reply":Landroid/os/Parcel;
    .end local v13    # "window":Lcom/android/server/wm/WindowState;
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    :catch_1
    move-exception v6

    .line 7441
    .end local v9    # "out":Ljava/io/BufferedWriter;
    .local v6, "e":Ljava/lang/Exception;
    :goto_2
    :try_start_3
    const-string/jumbo v14, "WindowManager"

    new-instance v15, Ljava/lang/StringBuilder;

    invoke-direct {v15}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v16, "Could not send command "

    invoke-virtual/range {v15 .. v16}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v15

    move-object/from16 v0, p2

    invoke-virtual {v15, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v15

    const-string/jumbo v16, " with parameters "

    invoke-virtual/range {v15 .. v16}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v15

    move-object/from16 v0, p3

    invoke-virtual {v15, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v15

    invoke-virtual {v15}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v15

    invoke-static {v14, v15, v6}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    :try_end_3
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    .line 7442
    const/4 v12, 0x0

    .line 7444
    if-eqz v4, :cond_8

    .line 7445
    invoke-virtual {v4}, Landroid/os/Parcel;->recycle()V

    .line 7447
    :cond_8
    if-eqz v11, :cond_9

    .line 7448
    invoke-virtual {v11}, Landroid/os/Parcel;->recycle()V

    .line 7450
    :cond_9
    if-eqz v9, :cond_7

    .line 7452
    :try_start_4
    invoke-virtual {v9}, Ljava/io/BufferedWriter;->close()V
    :try_end_4
    .catch Ljava/io/IOException; {:try_start_4 .. :try_end_4} :catch_2

    goto :goto_1

    .line 7453
    :catch_2
    move-exception v5

    .restart local v5    # "e":Ljava/io/IOException;
    goto :goto_1

    .line 7443
    .end local v5    # "e":Ljava/io/IOException;
    .end local v6    # "e":Ljava/lang/Exception;
    :catchall_0
    move-exception v14

    .line 7444
    :goto_3
    if-eqz v4, :cond_a

    .line 7445
    invoke-virtual {v4}, Landroid/os/Parcel;->recycle()V

    .line 7447
    :cond_a
    if-eqz v11, :cond_b

    .line 7448
    invoke-virtual {v11}, Landroid/os/Parcel;->recycle()V

    .line 7450
    :cond_b
    if-eqz v9, :cond_c

    .line 7452
    :try_start_5
    invoke-virtual {v9}, Ljava/io/BufferedWriter;->close()V
    :try_end_5
    .catch Ljava/io/IOException; {:try_start_5 .. :try_end_5} :catch_3

    .line 7443
    :cond_c
    :goto_4
    throw v14

    .line 7453
    :catch_3
    move-exception v5

    .restart local v5    # "e":Ljava/io/IOException;
    goto :goto_4

    .line 7443
    .end local v5    # "e":Ljava/io/IOException;
    .restart local v2    # "binder":Landroid/os/IBinder;
    .restart local v3    # "code":Ljava/lang/String;
    .restart local v4    # "data":Landroid/os/Parcel;
    .restart local v7    # "hashCode":I
    .restart local v8    # "index":I
    .restart local v10    # "out":Ljava/io/BufferedWriter;
    .restart local v11    # "reply":Landroid/os/Parcel;
    .restart local v13    # "window":Lcom/android/server/wm/WindowState;
    :catchall_1
    move-exception v14

    move-object v9, v10

    .end local v10    # "out":Ljava/io/BufferedWriter;
    .local v9, "out":Ljava/io/BufferedWriter;
    goto :goto_3

    .line 7440
    .end local v9    # "out":Ljava/io/BufferedWriter;
    .restart local v10    # "out":Ljava/io/BufferedWriter;
    :catch_4
    move-exception v6

    .restart local v6    # "e":Ljava/lang/Exception;
    move-object v9, v10

    .end local v10    # "out":Ljava/io/BufferedWriter;
    .restart local v9    # "out":Ljava/io/BufferedWriter;
    goto :goto_2
.end method

.method public watchRotation(Landroid/view/IRotationWatcher;)I
    .locals 6
    .param p1, "watcher"    # Landroid/view/IRotationWatcher;

    .prologue
    .line 7065
    invoke-interface {p1}, Landroid/view/IRotationWatcher;->asBinder()Landroid/os/IBinder;

    move-result-object v2

    .line 7066
    .local v2, "watcherBinder":Landroid/os/IBinder;
    new-instance v0, Lcom/android/server/wm/WindowManagerService$9;

    invoke-direct {v0, p0, v2}, Lcom/android/server/wm/WindowManagerService$9;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/os/IBinder;)V

    .line 7084
    .local v0, "dr":Landroid/os/IBinder$DeathRecipient;
    iget-object v4, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v4

    .line 7086
    :try_start_0
    invoke-interface {p1}, Landroid/view/IRotationWatcher;->asBinder()Landroid/os/IBinder;

    move-result-object v3

    const/4 v5, 0x0

    invoke-interface {v3, v0, v5}, Landroid/os/IBinder;->linkToDeath(Landroid/os/IBinder$DeathRecipient;I)V

    .line 7087
    iget-object v3, p0, Lcom/android/server/wm/WindowManagerService;->mRotationWatchers:Ljava/util/ArrayList;

    new-instance v5, Lcom/android/server/wm/WindowManagerService$RotationWatcher;

    invoke-direct {v5, p0, p1, v0}, Lcom/android/server/wm/WindowManagerService$RotationWatcher;-><init>(Lcom/android/server/wm/WindowManagerService;Landroid/view/IRotationWatcher;Landroid/os/IBinder$DeathRecipient;)V

    invoke-virtual {v3, v5}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z
    :try_end_0
    .catch Landroid/os/RemoteException; {:try_start_0 .. :try_end_0} :catch_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 7092
    :goto_0
    :try_start_1
    iget v3, p0, Lcom/android/server/wm/WindowManagerService;->mRotation:I
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    monitor-exit v4

    return v3

    .line 7084
    :catchall_0
    move-exception v3

    monitor-exit v4

    throw v3

    .line 7088
    :catch_0
    move-exception v1

    .local v1, "e":Landroid/os/RemoteException;
    goto :goto_0
.end method

.method final windowForClientLocked(Lcom/android/server/wm/Session;Landroid/os/IBinder;Z)Lcom/android/server/wm/WindowState;
    .locals 5
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/os/IBinder;
    .param p3, "throwOnError"    # Z

    .prologue
    const/4 v4, 0x0

    .line 9465
    iget-object v2, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    invoke-virtual {v2, p2}, Ljava/util/HashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v1

    check-cast v1, Lcom/android/server/wm/WindowState;

    .line 9468
    .local v1, "win":Lcom/android/server/wm/WindowState;
    if-nez v1, :cond_1

    .line 9469
    new-instance v0, Ljava/lang/IllegalArgumentException;

    .line 9470
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Requested window "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string/jumbo v3, " does not exist"

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    .line 9469
    invoke-direct {v0, v2}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    .line 9471
    .local v0, "ex":Ljava/lang/RuntimeException;
    if-eqz p3, :cond_0

    .line 9472
    throw v0

    .line 9474
    :cond_0
    const-string/jumbo v2, "WindowManager"

    const-string/jumbo v3, "Failed looking up window"

    invoke-static {v2, v3, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 9475
    return-object v4

    .line 9477
    .end local v0    # "ex":Ljava/lang/RuntimeException;
    :cond_1
    if-eqz p1, :cond_3

    iget-object v2, v1, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    if-eq v2, p1, :cond_3

    .line 9478
    new-instance v0, Ljava/lang/IllegalArgumentException;

    .line 9479
    new-instance v2, Ljava/lang/StringBuilder;

    invoke-direct {v2}, Ljava/lang/StringBuilder;-><init>()V

    const-string/jumbo v3, "Requested window "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p2}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    const-string/jumbo v3, " is in session "

    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 9480
    iget-object v3, v1, Lcom/android/server/wm/WindowState;->mSession:Lcom/android/server/wm/Session;

    .line 9479
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    .line 9480
    const-string/jumbo v3, ", not "

    .line 9479
    invoke-virtual {v2, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2, p1}, Ljava/lang/StringBuilder;->append(Ljava/lang/Object;)Ljava/lang/StringBuilder;

    move-result-object v2

    invoke-virtual {v2}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v2

    .line 9478
    invoke-direct {v0, v2}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V

    .line 9481
    .restart local v0    # "ex":Ljava/lang/RuntimeException;
    if-eqz p3, :cond_2

    .line 9482
    throw v0

    .line 9484
    :cond_2
    const-string/jumbo v2, "WindowManager"

    const-string/jumbo v3, "Failed looking up window"

    invoke-static {v2, v3, v0}, Landroid/util/Slog;->w(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I

    .line 9485
    return-object v4

    .line 9488
    .end local v0    # "ex":Ljava/lang/RuntimeException;
    :cond_3
    return-object v1
.end method

.method final windowForClientLocked(Lcom/android/server/wm/Session;Landroid/view/IWindow;Z)Lcom/android/server/wm/WindowState;
    .locals 1
    .param p1, "session"    # Lcom/android/server/wm/Session;
    .param p2, "client"    # Landroid/view/IWindow;
    .param p3, "throwOnError"    # Z

    .prologue
    .line 9460
    invoke-interface {p2}, Landroid/view/IWindow;->asBinder()Landroid/os/IBinder;

    move-result-object v0

    invoke-virtual {p0, p1, v0, p3}, Lcom/android/server/wm/WindowManagerService;->windowForClientLocked(Lcom/android/server/wm/Session;Landroid/os/IBinder;Z)Lcom/android/server/wm/WindowState;

    move-result-object v0

    return-object v0
.end method

.method public disableRotationAnim(Z)V
    .locals 0
    .param p1, "disable"    # Z

    .prologue
    iput-boolean p1, p0, Lcom/android/server/wm/WindowManagerService;->mFlymeDisableScreenRotation:Z

    return-void
.end method

.method public getVisibleFloatWindowPackages()[Ljava/lang/String;
    .locals 10

    .prologue
    new-instance v2, Ljava/util/ArrayList;

    invoke-direct {v2}, Ljava/util/ArrayList;-><init>()V

    .local v2, "packages":Ljava/util/ArrayList;, "Ljava/util/ArrayList<Ljava/lang/String;>;"
    iget-object v8, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v8

    :try_start_0
    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7}, Landroid/util/SparseArray;->size()I

    move-result v1

    .local v1, "numDisplays":I
    const/4 v0, 0x0

    .local v0, "displayNdx":I
    :goto_0
    if-ge v0, v1, :cond_4

    iget-object v7, p0, Lcom/android/server/wm/WindowManagerService;->mDisplayContents:Landroid/util/SparseArray;

    invoke-virtual {v7, v0}, Landroid/util/SparseArray;->valueAt(I)Ljava/lang/Object;

    move-result-object v7

    check-cast v7, Lcom/android/server/wm/DisplayContent;

    invoke-virtual {v7}, Lcom/android/server/wm/DisplayContent;->getWindowList()Lcom/android/server/wm/WindowList;

    move-result-object v6

    .local v6, "windowList":Lcom/android/server/wm/WindowList;
    invoke-virtual {v6}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    add-int/lit8 v5, v7, -0x1

    .local v5, "winNdx":I
    :goto_1
    if-ltz v5, :cond_3

    invoke-virtual {v6, v5}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v4

    check-cast v4, Lcom/android/server/wm/WindowState;

    .local v4, "w":Lcom/android/server/wm/WindowState;
    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v9, 0x7d2

    if-eq v7, v9, :cond_0

    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v9, 0x7d7

    if-ne v7, v9, :cond_2

    :cond_0
    :goto_2
    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    invoke-virtual {v7}, Lcom/android/server/wm/WindowStateAnimator;->getShown()Z

    move-result v7

    if-eqz v7, :cond_1

    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget-object v7, v7, Landroid/view/WindowManager$LayoutParams;->packageName:Ljava/lang/String;

    invoke-virtual {v2, v7}, Ljava/util/ArrayList;->add(Ljava/lang/Object;)Z

    :cond_1
    add-int/lit8 v5, v5, -0x1

    goto :goto_1

    :cond_2
    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v9, 0x7da

    if-eq v7, v9, :cond_0

    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I

    const/16 v9, 0x7d3

    if-eq v7, v9, :cond_0

    iget-object v7, v4, Lcom/android/server/wm/WindowState;->mAttrs:Landroid/view/WindowManager$LayoutParams;

    iget v7, v7, Landroid/view/WindowManager$LayoutParams;->type:I
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    const/16 v9, 0x7d6

    if-ne v7, v9, :cond_1

    goto :goto_2

    .end local v4    # "w":Lcom/android/server/wm/WindowState;
    :cond_3
    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    .end local v5    # "winNdx":I
    .end local v6    # "windowList":Lcom/android/server/wm/WindowList;
    :cond_4
    monitor-exit v8

    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v7

    if-lez v7, :cond_5

    invoke-virtual {v2}, Ljava/util/ArrayList;->size()I

    move-result v7

    new-array v3, v7, [Ljava/lang/String;

    .local v3, "ss":[Ljava/lang/String;
    invoke-virtual {v2, v3}, Ljava/util/ArrayList;->toArray([Ljava/lang/Object;)[Ljava/lang/Object;

    return-object v3

    .end local v0    # "displayNdx":I
    .end local v1    # "numDisplays":I
    .end local v3    # "ss":[Ljava/lang/String;
    :catchall_0
    move-exception v7

    monitor-exit v8

    throw v7

    .restart local v0    # "displayNdx":I
    .restart local v1    # "numDisplays":I
    :cond_5
    const/4 v7, 0x0

    return-object v7
.end method

.method public overridePendingAppTransition(Ljava/lang/String;Landroid/os/Bundle;)V
    .locals 2
    .param p1, "packageName"    # Ljava/lang/String;
    .param p2, "options"    # Landroid/os/Bundle;

    .prologue
    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    monitor-enter v1

    :try_start_0
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mAppTransition:Lcom/android/server/wm/AppTransition;

    invoke-virtual {v0, p1, p2}, Lcom/android/server/wm/AppTransition;->overridePendingAppTransition(Ljava/lang/String;Landroid/os/Bundle;)V
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    monitor-exit v1

    return-void

    :catchall_0
    move-exception v0

    monitor-exit v1

    throw v0
.end method

.method final performLayoutAndPlaceSurfacesForMoveWinLocked()V
    .locals 1

    .prologue
    iget-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mWindowPlacerLocked:Lcom/android/server/wm/WindowSurfacePlacer;

    invoke-virtual {v0}, Lcom/android/server/wm/WindowSurfacePlacer;->performSurfacePlacement()V

    return-void
.end method

.method public screenshotLiveWallpaper(Landroid/os/IBinder;II)Landroid/graphics/Bitmap;
    .locals 39
    .param p1, "appToken"    # Landroid/os/IBinder;
    .param p2, "width"    # I
    .param p3, "height"    # I

    .prologue
    const-string v7, "android.permission.READ_FRAME_BUFFER"

    const-string v37, "screenshotApplications()"

    move-object/from16 v0, p0

    move-object/from16 v1, v37

    invoke-direct {v0, v7, v1}, Lcom/android/server/wm/WindowManagerService;->checkCallingPermission(Ljava/lang/String;Ljava/lang/String;)Z

    move-result v7

    if-nez v7, :cond_0

    new-instance v7, Ljava/lang/SecurityException;

    const-string v37, "Requires READ_FRAME_BUFFER permission"

    move-object/from16 v0, v37

    invoke-direct {v7, v0}, Ljava/lang/SecurityException;-><init>(Ljava/lang/String;)V

    throw v7

    :cond_0
    const/4 v8, 0x0

    .local v8, "maxLayer":I
    new-instance v4, Landroid/graphics/Rect;

    invoke-direct {v4}, Landroid/graphics/Rect;-><init>()V

    .local v4, "frame":Landroid/graphics/Rect;
    move-object/from16 v0, p0

    iget-object v0, v0, Lcom/android/server/wm/WindowManagerService;->mWindowMap:Ljava/util/HashMap;

    move-object/from16 v37, v0

    monitor-enter v37

    :try_start_0
    invoke-static {}, Landroid/os/Binder;->clearCallingIdentity()J

    move-result-wide v20

    .local v20, "ident":J
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultWindowListLocked()Lcom/android/server/wm/WindowList;

    move-result-object v35

    .local v35, "windows":Lcom/android/server/wm/WindowList;
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getDefaultDisplayContentLocked()Lcom/android/server/wm/DisplayContent;

    move-result-object v7

    invoke-virtual {v7}, Lcom/android/server/wm/DisplayContent;->getDisplayInfo()Landroid/view/DisplayInfo;

    move-result-object v16

    .local v16, "displayInfo":Landroid/view/DisplayInfo;
    move-object/from16 v0, v16

    iget v5, v0, Landroid/view/DisplayInfo;->appWidth:I

    .local v5, "dw":I
    move-object/from16 v0, v16

    iget v6, v0, Landroid/view/DisplayInfo;->appHeight:I

    .local v6, "dh":I
    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mPolicy:Landroid/view/WindowManagerPolicy;

    const/16 v38, 0x2

    move/from16 v0, v38

    invoke-interface {v7, v0}, Landroid/view/WindowManagerPolicy;->windowTypeToLayerLw(I)I

    move-result v7

    mul-int/lit16 v7, v7, 0x2710

    add-int/lit16 v11, v7, 0x3e8

    .local v11, "aboveAppLayer":I
    add-int/lit16 v11, v11, 0x2710

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    if-eqz v7, :cond_3

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v7, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v7, :cond_3

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v7, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v7, v7, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;

    if-eqz v7, :cond_3

    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mInputMethodTarget:Lcom/android/server/wm/WindowState;

    iget-object v7, v7, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v7, v7, Lcom/android/server/wm/AppWindowToken;->appToken:Landroid/view/IApplicationToken;

    invoke-interface {v7}, Landroid/view/IApplicationToken;->asBinder()Landroid/os/IBinder;

    move-result-object v7

    move-object/from16 v0, p1

    if-ne v7, v0, :cond_2

    const/16 v23, 0x1

    .local v23, "isImeTarget":Z
    :goto_0
    const/16 v22, 0x0

    .local v22, "including":Z
    invoke-virtual/range {v35 .. v35}, Lcom/android/server/wm/WindowList;->size()I

    move-result v7

    add-int/lit8 v19, v7, -0x1

    .local v19, "i":I
    :goto_1
    if-ltz v19, :cond_8

    move-object/from16 v0, v35

    move/from16 v1, v19

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowList;->get(I)Ljava/lang/Object;

    move-result-object v36

    check-cast v36, Lcom/android/server/wm/WindowState;

    .local v36, "ws":Lcom/android/server/wm/WindowState;
    move-object/from16 v0, v36

    iget-boolean v7, v0, Lcom/android/server/wm/WindowState;->mHasSurface:Z

    if-nez v7, :cond_4

    :cond_1
    :goto_2
    add-int/lit8 v19, v19, -0x1

    goto :goto_1

    .end local v19    # "i":I
    .end local v22    # "including":Z
    .end local v23    # "isImeTarget":Z
    .end local v36    # "ws":Lcom/android/server/wm/WindowState;
    :cond_2
    const/16 v23, 0x0

    .restart local v23    # "isImeTarget":Z
    goto :goto_0

    .end local v23    # "isImeTarget":Z
    :cond_3
    const/16 v23, 0x0

    .restart local v23    # "isImeTarget":Z
    goto :goto_0

    .restart local v19    # "i":I
    .restart local v22    # "including":Z
    .restart local v36    # "ws":Lcom/android/server/wm/WindowState;
    :cond_4
    move-object/from16 v0, v36

    iget v7, v0, Lcom/android/server/wm/WindowState;->mLayer:I

    if-ge v7, v11, :cond_1

    if-nez v22, :cond_5

    if-eqz p1, :cond_5

    move-object/from16 v0, v36

    iget-boolean v7, v0, Lcom/android/server/wm/WindowState;->mIsImWindow:Z

    if-eqz v7, :cond_a

    if-eqz v23, :cond_a

    :cond_5
    move-object/from16 v0, v36

    iget-boolean v7, v0, Lcom/android/server/wm/WindowState;->mIsImWindow:Z

    if-nez v7, :cond_6

    move-object/from16 v0, v36

    move-object/from16 v1, v16

    invoke-virtual {v0, v1}, Lcom/android/server/wm/WindowState;->isFrameFullscreen(Landroid/view/DisplayInfo;)Z

    move-result v7

    if-eqz v7, :cond_b

    :cond_6
    const/16 v22, 0x0

    :goto_3
    move-object/from16 v0, v36

    iget-object v7, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v7, v7, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    if-ge v8, v7, :cond_7

    move-object/from16 v0, v36

    iget-object v7, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v8, v7, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    :cond_7
    move-object/from16 v0, v36

    iget-boolean v7, v0, Lcom/android/server/wm/WindowState;->mIsWallpaper:Z

    if-eqz v7, :cond_1

    move-object/from16 v0, v36

    iget-object v0, v0, Lcom/android/server/wm/WindowState;->mFrame:Landroid/graphics/Rect;

    move-object/from16 v34, v0

    .local v34, "wf":Landroid/graphics/Rect;
    move-object/from16 v0, v36

    iget-object v15, v0, Lcom/android/server/wm/WindowState;->mContentInsets:Landroid/graphics/Rect;

    .local v15, "cr":Landroid/graphics/Rect;
    move-object/from16 v0, v34

    iget v7, v0, Landroid/graphics/Rect;->left:I

    iget v0, v15, Landroid/graphics/Rect;->left:I

    move/from16 v38, v0

    add-int v24, v7, v38

    .local v24, "left":I
    move-object/from16 v0, v34

    iget v7, v0, Landroid/graphics/Rect;->top:I

    iget v0, v15, Landroid/graphics/Rect;->top:I

    move/from16 v38, v0

    add-int v33, v7, v38

    .local v33, "top":I
    move-object/from16 v0, v34

    iget v7, v0, Landroid/graphics/Rect;->right:I

    iget v0, v15, Landroid/graphics/Rect;->right:I

    move/from16 v38, v0

    sub-int v27, v7, v38

    .local v27, "right":I
    move-object/from16 v0, v34

    iget v7, v0, Landroid/graphics/Rect;->bottom:I

    iget v0, v15, Landroid/graphics/Rect;->bottom:I

    move/from16 v38, v0

    sub-int v13, v7, v38

    .local v13, "bottom":I
    move/from16 v0, v24

    move/from16 v1, v33

    move/from16 v2, v27

    invoke-virtual {v4, v0, v1, v2, v13}, Landroid/graphics/Rect;->union(IIII)V

    move-object/from16 v0, v36

    iget-object v7, v0, Lcom/android/server/wm/WindowState;->mWinAnimator:Lcom/android/server/wm/WindowStateAnimator;

    iget v8, v7, Lcom/android/server/wm/WindowStateAnimator;->mAnimLayer:I

    .end local v13    # "bottom":I
    .end local v15    # "cr":Landroid/graphics/Rect;
    .end local v24    # "left":I
    .end local v27    # "right":I
    .end local v33    # "top":I
    .end local v34    # "wf":Landroid/graphics/Rect;
    .end local v36    # "ws":Lcom/android/server/wm/WindowState;
    :cond_8
    invoke-static/range {v20 .. v21}, Landroid/os/Binder;->restoreCallingIdentity(J)V

    const/4 v7, 0x0

    const/16 v38, 0x0

    move/from16 v0, v38

    invoke-virtual {v4, v7, v0, v5, v6}, Landroid/graphics/Rect;->intersect(IIII)Z

    invoke-virtual {v4}, Landroid/graphics/Rect;->isEmpty()Z
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    move-result v7

    if-nez v7, :cond_9

    if-nez v8, :cond_c

    :cond_9
    const/4 v7, 0x0

    monitor-exit v37

    return-object v7

    .restart local v36    # "ws":Lcom/android/server/wm/WindowState;
    :cond_a
    :try_start_1
    move-object/from16 v0, v36

    iget-object v7, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    if-eqz v7, :cond_1

    move-object/from16 v0, v36

    iget-object v7, v0, Lcom/android/server/wm/WindowState;->mAppToken:Lcom/android/server/wm/AppWindowToken;

    iget-object v7, v7, Lcom/android/server/wm/AppWindowToken;->token:Landroid/os/IBinder;

    move-object/from16 v0, p1

    if-eq v7, v0, :cond_5

    goto/16 :goto_2

    :cond_b
    const/16 v22, 0x1

    goto :goto_3

    .end local v36    # "ws":Lcom/android/server/wm/WindowState;
    :cond_c
    invoke-virtual/range {p0 .. p0}, Lcom/android/server/wm/WindowManagerService;->getRotation()I

    move-result v10

    .local v10, "rot":I
    invoke-virtual {v4}, Landroid/graphics/Rect;->width()I

    move-result v18

    .local v18, "fw":I
    invoke-virtual {v4}, Landroid/graphics/Rect;->height()I

    move-result v17

    .local v17, "fh":I
    move/from16 v0, p2

    int-to-float v7, v0

    move/from16 v0, v18

    int-to-float v0, v0

    move/from16 v38, v0

    div-float v31, v7, v38

    .local v31, "targetWidthScale":F
    move/from16 v0, p3

    int-to-float v7, v0

    move/from16 v0, v17

    int-to-float v0, v0

    move/from16 v38, v0

    div-float v30, v7, v38

    .local v30, "targetHeightScale":F
    if-gt v5, v6, :cond_10

    move/from16 v28, v31

    .local v28, "scale":F
    cmpl-float v7, v30, v31

    if-lez v7, :cond_d

    move/from16 v0, v18

    int-to-float v7, v0

    mul-float v7, v7, v30

    float-to-int v7, v7

    move/from16 v0, p2

    if-ne v7, v0, :cond_d

    move/from16 v28, v30

    :cond_d
    :goto_4
    int-to-float v7, v5

    mul-float v7, v7, v28

    float-to-int v5, v7

    int-to-float v7, v6

    mul-float v7, v7, v28

    float-to-int v6, v7

    const/4 v7, 0x1

    if-eq v10, v7, :cond_e

    const/4 v7, 0x3

    if-ne v10, v7, :cond_f

    :cond_e
    move/from16 v32, v5

    .local v32, "tmp":I
    move v5, v6

    move/from16 v6, v32

    const/4 v7, 0x1

    if-ne v10, v7, :cond_11

    const/4 v10, 0x3

    .end local v32    # "tmp":I
    :cond_f
    :goto_5
    move-object/from16 v0, p0

    iget-object v7, v0, Lcom/android/server/wm/WindowManagerService;->mAnimator:Lcom/android/server/wm/WindowAnimator;

    const/16 v38, 0x0

    move/from16 v0, v38

    invoke-virtual {v7, v0}, Lcom/android/server/wm/WindowAnimator;->getScreenRotationAnimationLocked(I)Lcom/android/server/wm/ScreenRotationAnimation;

    move-result-object v29

    .local v29, "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    if-eqz v29, :cond_12

    invoke-virtual/range {v29 .. v29}, Lcom/android/server/wm/ScreenRotationAnimation;->isAnimating()Z

    move-result v9

    .local v9, "inRotation":Z
    :goto_6
    const/4 v7, 0x0

    invoke-static/range {v4 .. v10}, Landroid/view/SurfaceControl;->screenshot(Landroid/graphics/Rect;IIIIZI)Landroid/graphics/Bitmap;
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    move-result-object v26

    .local v26, "rawss":Landroid/graphics/Bitmap;
    monitor-exit v37

    if-nez v26, :cond_13

    const/4 v7, 0x0

    return-object v7

    .end local v9    # "inRotation":Z
    .end local v26    # "rawss":Landroid/graphics/Bitmap;
    .end local v28    # "scale":F
    .end local v29    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    :cond_10
    move/from16 v28, v30

    .restart local v28    # "scale":F
    cmpl-float v7, v31, v30

    if-lez v7, :cond_d

    move/from16 v0, v17

    int-to-float v7, v0

    mul-float v7, v7, v31

    float-to-int v7, v7

    move/from16 v0, p3

    if-ne v7, v0, :cond_d

    move/from16 v28, v31

    goto :goto_4

    .restart local v32    # "tmp":I
    :cond_11
    const/4 v10, 0x1

    goto :goto_5

    .end local v32    # "tmp":I
    .restart local v29    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    :cond_12
    const/4 v9, 0x0

    goto :goto_6

    .end local v5    # "dw":I
    .end local v6    # "dh":I
    .end local v10    # "rot":I
    .end local v11    # "aboveAppLayer":I
    .end local v16    # "displayInfo":Landroid/view/DisplayInfo;
    .end local v17    # "fh":I
    .end local v18    # "fw":I
    .end local v19    # "i":I
    .end local v20    # "ident":J
    .end local v22    # "including":Z
    .end local v23    # "isImeTarget":Z
    .end local v28    # "scale":F
    .end local v29    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .end local v30    # "targetHeightScale":F
    .end local v31    # "targetWidthScale":F
    .end local v35    # "windows":Lcom/android/server/wm/WindowList;
    :catchall_0
    move-exception v7

    monitor-exit v37

    throw v7

    .restart local v5    # "dw":I
    .restart local v6    # "dh":I
    .restart local v9    # "inRotation":Z
    .restart local v10    # "rot":I
    .restart local v11    # "aboveAppLayer":I
    .restart local v16    # "displayInfo":Landroid/view/DisplayInfo;
    .restart local v17    # "fh":I
    .restart local v18    # "fw":I
    .restart local v19    # "i":I
    .restart local v20    # "ident":J
    .restart local v22    # "including":Z
    .restart local v23    # "isImeTarget":Z
    .restart local v26    # "rawss":Landroid/graphics/Bitmap;
    .restart local v28    # "scale":F
    .restart local v29    # "screenRotationAnimation":Lcom/android/server/wm/ScreenRotationAnimation;
    .restart local v30    # "targetHeightScale":F
    .restart local v31    # "targetWidthScale":F
    .restart local v35    # "windows":Lcom/android/server/wm/WindowList;
    :cond_13
    invoke-virtual/range {v26 .. v26}, Landroid/graphics/Bitmap;->getConfig()Landroid/graphics/Bitmap$Config;

    move-result-object v7

    move/from16 v0, p2

    move/from16 v1, p3

    invoke-static {v0, v1, v7}, Landroid/graphics/Bitmap;->createBitmap(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;

    move-result-object v12

    .local v12, "bm":Landroid/graphics/Bitmap;
    new-instance v25, Landroid/graphics/Matrix;

    invoke-direct/range {v25 .. v25}, Landroid/graphics/Matrix;-><init>()V

    .local v25, "matrix":Landroid/graphics/Matrix;
    move-object/from16 v0, v25

    invoke-static {v10, v5, v6, v0}, Lcom/android/server/wm/ScreenRotationAnimation;->createRotationMatrix(IIILandroid/graphics/Matrix;)V

    iget v7, v4, Landroid/graphics/Rect;->left:I

    int-to-float v7, v7

    mul-float v7, v7, v28

    float-to-int v7, v7

    neg-int v7, v7

    int-to-float v7, v7

    iget v0, v4, Landroid/graphics/Rect;->top:I

    move/from16 v37, v0

    move/from16 v0, v37

    int-to-float v0, v0

    move/from16 v37, v0

    mul-float v37, v37, v28

    move/from16 v0, v37

    float-to-int v0, v0

    move/from16 v37, v0

    move/from16 v0, v37

    neg-int v0, v0

    move/from16 v37, v0

    move/from16 v0, v37

    int-to-float v0, v0

    move/from16 v37, v0

    move-object/from16 v0, v25

    move/from16 v1, v37

    invoke-virtual {v0, v7, v1}, Landroid/graphics/Matrix;->postTranslate(FF)Z

    new-instance v14, Landroid/graphics/Canvas;

    invoke-direct {v14, v12}, Landroid/graphics/Canvas;-><init>(Landroid/graphics/Bitmap;)V

    .local v14, "canvas":Landroid/graphics/Canvas;
    const/4 v7, 0x0

    move-object/from16 v0, v26

    move-object/from16 v1, v25

    invoke-virtual {v14, v0, v1, v7}, Landroid/graphics/Canvas;->drawBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V

    const/4 v7, 0x0

    invoke-virtual {v14, v7}, Landroid/graphics/Canvas;->setBitmap(Landroid/graphics/Bitmap;)V

    invoke-virtual/range {v26 .. v26}, Landroid/graphics/Bitmap;->recycle()V

    return-object v12
.end method

.method public startMoveWindowService(Landroid/content/Context;)Lcom/android/server/wm/MoveWindowService;
    .locals 2
    .param p1, "context"    # Landroid/content/Context;

    .prologue
    new-instance v0, Lcom/android/server/wm/MoveWindowService;

    iget-object v1, p0, Lcom/android/server/wm/WindowManagerService;->mH:Lcom/android/server/wm/WindowManagerService$H;

    invoke-direct {v0, p1, p0, v1}, Lcom/android/server/wm/MoveWindowService;-><init>(Landroid/content/Context;Lcom/android/server/wm/WindowManagerService;Landroid/os/Handler;)V

    .local v0, "mws":Lcom/android/server/wm/MoveWindowService;
    iput-object v0, p0, Lcom/android/server/wm/WindowManagerService;->mMoveWindowService:Lcom/android/server/wm/MoveWindowService;

    return-object v0
.end method
